<?xml version="1.0" encoding="UTF-8"?>
<project
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
        xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <modelVersion>4.0.0</modelVersion>

  <parent>
     <groupId>org.fusesource.ide</groupId>
	 <artifactId>testing</artifactId>
	 <version>7.3.0-SNAPSHOT</version>
  </parent>

  <artifactId>rcp_testing</artifactId>
  <packaging>jar</packaging>
  <name>Fuse IDE :: RCP :: Testing :: RCP Test</name>

  <properties>
    <jubula.home>${user.home}/jubula</jubula.home>
    <jubula.default.tests.dir>${jubula.home}/examples/testCaseLibrary/</jubula.default.tests.dir>
	<testdata.dir>${project.build.directory}/testdata</testdata.dir>
	<report.dir>${basedir}/../target/report/jubula</report.dir>
	<application.dir>/tmp/plugin-test/runtime</application.dir>
	<workspace.dir>${project.build.directory}/workspace</workspace.dir> 
	<testexec>${jubula.home}/jubula/testexec</testexec>
	<autagent.start.exec>${jubula.home}/server/autagent</autagent.start.exec>
	<autagent.stop.exec>${jubula.home}/server/stopautagent</autagent.stop.exec>
	<product.name>Fuse IDE</product.name>
	<product.version>1.0</product.version>
	<jre.dir>${java.home}/bin</jre.dir>
	
	<test.suite>Fuse IDE - Full Testing</test.suite>
	<test.aut.config>AUT Fuse IDE@localhost</test.aut.config>
	<test.aut.port>60000</test.aut.port>
	<test.aut.host>localhost</test.aut.host>
	<test.db.scheme>Default Embedded (H2)</test.db.scheme>
	<test.db.user>sa</test.db.user>
	<test.db.pwd></test.db.pwd>
	<test.config.file>${project.build.directory}/classes/configs/fuseide.xml</test.config.file>
	<test.db.url>jdbc:h2:${project.build.directory}/database/embedded;MVCC=TRUE;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE</test.db.url>
	
	<ide.executable.dir>${application.dir}/FuseIDE</ide.executable.dir>
	<ide.executable.name>FuseIDE</ide.executable.name>
	
	<!-- we are using the 32bit linux version as our hudson runs this OS version -->
	<application.archive>../../org.fusesource.ide.rcp.product/target/products/FuseIDE-linux.gtk.x86.zip</application.archive> <!-- path to the zipped RCP -->
	
	<!-- informations regarding the jubula rc plugin -->
	<jubula.rc.plugin.name>org.eclipse.jubula.rc.rcp</jubula.rc.plugin.name>
	<jubula.rc.plugin.version>1.1.0.201109140653</jubula.rc.plugin.version>
	<jubula.rc.plugin.filename>org.eclipse.jubula.rc.rcp_5.2.00266/</jubula.rc.plugin.filename>
	
	<!-- derived properties -->
	<deploy.dir>${application.dir}/eclipse/plugins</deploy.dir>
	<report.index>${report.dir}/Overview.html</report.index>
  </properties>

  <build>
  	<resources>
  		<resource>
        	<directory>src/main/filtered-resources</directory>
        	<filtering>true</filtering>
        	<includes>
          		<include>**/*.xml</include>
        	</includes>
      	</resource>
      	<resource>
      		<directory>src/main/resources</directory>
      		<filtering>false</filtering>
      	</resource>
  	</resources>
  	<plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.7</version>
        <dependencies>
			  <dependency>
			    <groupId>ant-contrib</groupId>
			    <artifactId>ant-contrib</artifactId>
			    <version>1.0b3</version>
			    <exclusions>
			      <exclusion>
			        <groupId>ant</groupId>
			        <artifactId>ant</artifactId>
			      </exclusion>
			    </exclusions>
			  </dependency>
			  <dependency>
			    <groupId>org.apache.ant</groupId>
			    <artifactId>ant-nodeps</artifactId>
			    <version>1.8.1</version>
			  </dependency>
		</dependencies>
        <executions>
          <!-- prepare the needed directories -->
          <execution>
            <id>prepare-directories</id>
            <phase>validate</phase>
            <configuration>
              <target>
<!--            <delete dir="${report.dir}"/>   -->
				<mkdir dir="${report.dir}"/>
				<delete dir="${testdata.dir}"/>
				<mkdir dir="${testdata.dir}"/>
				<delete dir="${application.dir}"/>
				<mkdir dir="${application.dir}"/>
				<delete dir="${workspace.dir}"/>
				<mkdir dir="${workspace.dir}"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
           
          <execution>
          	<id>prepare-test-db</id>
          	<phase>generate-test-resources</phase>
          	<configuration>
          		<target>
          			<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath" />

					<!-- stop a maybe running aut agent -->
					<!-- disabled as Jubula AUT agent behaves stupid 
					<exec executable="${autagent.stop.exec}" failonerror="false"/>
					-->
					 
					<!-- now start a new aut agent -->
					<!-- disabled as Jubula AUT agent behaves stupid
					<exec executable="${autagent.start.exec}" failonerror="false">
						<arg line=' &amp;'/>
					</exec>
					-->
					
					<!-- first cleanup the test database -->          			
          			<exec executable="${jubula.home}/jubula/dbtool" failonerror="true">
   						<arg line='-c'/>
   						<arg line='"${test.config.file}"'/>
   						<arg line='-deleteall'/>
   					</exec>
          			
          			<!-- first import the default jubula testing libs stuff -->
           			<for param="projectFile" keepgoing="true">
          				<path>
          					<fileset dir="${jubula.default.tests.dir}" includes="*.xml"/>
          				</path>
          				<sequential>
          					<exec executable="${jubula.home}/jubula/dbtool" failonerror="true">
          						<arg line='-c'/>
          						<arg line='"${test.config.file}"'/>
          						<arg line='-import'/>
          						<arg line='"@{projectFile}"'/>
          					</exec>
          				</sequential>
          			</for>
          			<!-- then import our own testing lib stuff -->
          			<for param="projectFile" keepgoing="true">
          				<path>
          					<fileset dir="${project.build.directory}/classes/tests" includes="*.xml"/>
          				</path>
          				<sequential>
          					<exec executable="${jubula.home}/jubula/dbtool" failonerror="true">
          						<arg line='-c'/>
          						<arg line='"${test.config.file}"'/>
          						<arg line='-import'/>
          						<arg line='"@{projectFile}"'/>
          					</exec>
          				</sequential>
          			</for>
          		</target>
          	</configuration>
          	<goals>
          		<goal>run</goal>
          	</goals>
          </execution>

          <execution>
            <id>prepare-runtime</id>
            <phase>process-test-resources</phase>
            <configuration>
              <target>
				<unzip dest="${application.dir}" src="${application.archive}" overwrite="true"/>
				<chmod perm="a+x" file="${ide.executable.dir}/${ide.executable.name}"/>
			    <unzip dest="${ide.executable.dir}" src="${jubula.plugin.archive}" overwrite="true"/>
			    <!-- now add the jubula plugin definition to the bundles to load config file -->
			    <concat append="yes" fixlastline="yes" destfile="${ide.executable.dir}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info">${jubula.rc.plugin.name},${jubula.rc.plugin.version},plugins/${jubula.rc.plugin.filename},4,true</concat>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          
          <execution>
            <id>test</id>
            <phase>test</phase>
            <configuration>
              <target>
    			<exec executable="${testexec}" failonerror="false" dir="${ide.executable.dir}">
    			    <arg line='-c'/>
          			<arg line='"${test.config.file}"'/>
					<arg line="-dburl"/>
					<arg line="${test.db.url}"/>
			    </exec>
			    
			    <!-- stop running aut agent -->
			    <!-- disabled as Jubula AUT agent behaves stupid
				<exec executable="${autagent.stop.exec}" failonerror="false"/>
				-->
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        
          <execution>
            <id>report</id>
            <phase>package</phase>
            <configuration>
              <target>
              	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath" />
              	
              	<if>
			        <available file="${report.index}"/>
			        <then>
						<!-- nothing to do... -->
						<property name="report.index.status" value="old"/>
			        </then>
			        <else>
			        	<property name="report.index.status" value="new"/>
			            <concat append="no" fixlastline="yes" destfile="${report.index}">
		              		&lt;html&gt;
		              		&lt;header&gt;
		              		&lt;title&gt;
		              		Jubula Integration Test Results - Overview
		              		&lt;/title&gt;
		              		&lt;/header&gt;
		              		&lt;body&gt;
		              		&lt;center&gt;
							&lt;h2&gt;
							Jubula Integration Test Results - Overview
							&lt;/h2&gt;
							&lt;hr/&gt;
							Choose a tab from above to view the detailed report for this test:
							&lt;br/&gt;
							&lt;br/&gt;
		              		&lt;table border="1" width="70%" cellspacing="0" cellpadding="0"&gt;
		              		&lt;tr&gt;
		              		&lt;th bgcolor="lightgray"&gt;Test&lt;/th&gt;
		              		&lt;th bgcolor="lightgray"&gt;Status&lt;/th&gt;
		              		&lt;/tr&gt;
		              	</concat>
			        </else>
			    </if>
              	              	
		        <for param="file">
		        	<path>
		        		<fileset dir="${report.dir}" includes="*.htm" excludes="${report.index}" />
		        	</path>
		        	<sequential>
		        		<propertyregex override="yes" property="test.title"   input="@{file}" regexp="(.*)/executionLog-(.*)-(.*)\.htm" replace="\2"/>
		        		<propertyregex override="yes" property="test.result"  input="@{file}" regexp="(.*)/executionLog-(.*)-(.*)\.htm" replace="\3"/>
		        		<propertyregex override="yes" property="test.newname" input="@{file}" regexp="(.*)/executionLog-(.*)-(.*)\.htm" replace="\1/\2.html"/>
		        		<if>
		        			<equals arg1="${test.result}" arg2="failed" />
	        				<then>
								<property name="cell.opener" value="&lt;td bgcolor='red'&gt;&lt;center&gt;&lt;font color='white'&gt;"/>
	        			   	</then>
	        			   	<else>
								<property name="cell.opener" value="&lt;td bgcolor='green'&gt;&lt;center&gt;&lt;font color='white'&gt;"/>
	        			   	</else>
		        	    </if>
		        		
		        		<concat append="yes" fixlastline="no" destfile="${report.index}">
		        			&lt;tr&gt;
		        			   &lt;td&gt;${test.title}&lt;/td&gt;
		        			   ${cell.opener}${test.result}&lt;/font&gt;&lt;/center&gt;&lt;/td&gt;
		        			&lt;/tr&gt;
		        		</concat>
		        		
		        		<!-- rename the file -->
		        		<move file="@{file}" tofile="${test.newname}"/>
		        	</sequential>
		        </for>
		        <if>
		        	<equals arg1="${report.index.status}" arg2="old"/>
		        	<then>
		        		<concat append="yes" fixlastline="yes" destfile="${report.index}">
				            &lt;/table&gt;
				            &lt;/center&gt;
				            &lt;/body&gt;
				            &lt;/html&gt;
				        </concat>
		        	</then>
		        	<else>
		        		<!-- leave the table open as there is another module writing to it -->
		        	</else>
		        </if>
	          </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
</project>
