<?xml version="1.0" encoding="UTF-8"?>
<components>
   <component>
      <id>elsql</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>ElSQL</title>
      <description>The elsql component is an extension to the existing SQL Component that uses ElSql to define the SQL queries.</description>
      <syntax>elsql:elsqlName:resourceUri</syntax>
      <class>org.apache.camel.component.elsql.ElsqlComponent</class>
      <kind>component</kind>
      <scheme>elsql</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-elsql-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="databaseVendor" type="string" javaType="org.apache.camel.component.elsql.ElSqlDatabaseVendor" kind="property" choice="Default,Postgres,HSql,MySql,Oracle,SqlServer2008,Veritca" deprecated="false" description="To use a vendor specific com.opengamma.elsql.ElSqlConfig"/>
         <componentProperty name="elSqlConfig" type="object" javaType="com.opengamma.elsql.ElSqlConfig" kind="property" deprecated="false" description="To use a specific configured ElSqlConfig. It may be better to use the databaseVendor option instead."/>
         <componentProperty name="resourceUri" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma. The resources are loaded on the classpath by default you can prefix with file: to load from file system. Notice you can set this option on the component and then you do not have to configure this on the endpoint."/>
         <componentProperty name="dataSource" type="object" javaType="javax.sql.DataSource" kind="property" deprecated="false" description="Sets the DataSource to use to communicate with the database."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="allowNamedParameters" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to allow using named parameters in the queries."/>
         <uriParameter name="usePlaceholder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries."/>
         <uriParameter name="templateOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Configures the Spring JdbcTemplate with the key/values from the Map"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Sets the maximum number of messages to poll"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="elsqlName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the elsql to use (is NAMED in the elsql file)"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="batch" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Enables or disables batch mode"/>
         <uriParameter name="separator" type="string" javaType="char" kind="parameter" deprecated="false" defaultValue="," group="common" description="The separator to use when parameter values is taken from message body (if the body is a String type) to be inserted at placeholders.Notice if you use named parameters then a Map type is used instead. The default value is comma"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="processingStrategy" type="object" javaType="org.apache.camel.component.sql.SqlProcessingStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch."/>
         <uriParameter name="prepareStatementStrategy" type="object" javaType="org.apache.camel.component.sql.SqlPrepareStatementStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="outputClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specify the full package and class name to use as conversion when outputType=SelectOne."/>
         <uriParameter name="dataSource" type="object" javaType="javax.sql.DataSource" kind="parameter" deprecated="false" group="common" description="Sets the DataSource to use to communicate with the database."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="breakBatchOnConsumeFail" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets whether to break batch if onConsume failed."/>
         <uriParameter name="onConsume" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing each row then this query can be executed if the Exchange was processed successfully for example to mark the row as processed. The query can have parameter."/>
         <uriParameter name="onConsumeFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing each row then this query can be executed if the Exchange failed for example to mark the row as failed. The query can have parameter."/>
         <uriParameter name="useMessageBodyForSql" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether to use the message body as the SQL and then headers for parameters. If this option is enabled then the SQL in the uri is not used."/>
         <uriParameter name="dataSourceRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" group="common" description="Sets the reference to a DataSource to lookup from the registry to use for communicating with the database."/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.sql.SqlOutputType" kind="parameter" choice="SelectOne,SelectList,StreamList" deprecated="false" defaultValue="SelectList" group="common" description="Make the output of consumer or producer to SelectList as List of Map or SelectOne as single Java object in the following way:a) If the query has only single column then that JDBC Column object is returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long object.b) If the query has more than one column then it will return a Map of that result.c) If the outputClass is set then it will convert the query result into an Java bean object by calling all the setters that match the column names.It will assume your class has a default constructor to create instance with.d) If the query resulted in more than one rows it throws an non-unique result exception.StreamList streams the result of the query using an Iterator. This can be used with the Splitter EIP in streaming mode to process the ResultSet in streaming fashion."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Enables or disables transaction. If enabled then if processing an exchange failed then the consumerbreak out processing any further exchanges to cause a rollback eager."/>
         <uriParameter name="useIterator" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true."/>
         <uriParameter name="parametersCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="If set greater than zero then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API. This is useful if the JDBC vendor could not return correct parameters count then user may override instead."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If set will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing"/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="databaseVendor" type="string" javaType="org.apache.camel.component.elsql.ElSqlDatabaseVendor" kind="parameter" choice="Default,Postgres,HSql,MySql,Oracle,SqlServer2008,Veritca" deprecated="false" group="common" description="To use a vendor specific com.opengamma.elsql.ElSqlConfig"/>
         <uriParameter name="elSqlConfig" type="object" javaType="com.opengamma.elsql.ElSqlConfig" kind="parameter" deprecated="false" group="common" description="To use a specific configured ElSqlConfig. It may be better to use the databaseVendor option instead."/>
         <uriParameter name="placeholder" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="#" label="advanced" group="advanced" description="Specifies a character that will be replaced to in SQL query. Notice that it is simple String.replaceAll() operation and no SQL parsing is involved (quoted strings will also change)."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="onConsumeBatchComplete" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing the entire batch this query can be executed to bulk update rows etc. The query cannot have parameters."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="routeEmptyResultSet" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets whether empty resultset should be allowed to be sent to the next hop. Defaults to false. So the empty resultset will be filtered out."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma. The resources are loaded on the classpath by default you can prefix with file: to load from file system. Notice you can set this option on the component and then you do not have to configure this on the endpoint."/>
         <uriParameter name="alwaysPopulateStatement" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there is 1 or more expected parameters to be set; for example this avoids reading the message body/headers for SQL queries with no parameters."/>
         <uriParameter name="outputHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Store the query result in a header instead of the message body. By default outputHeader == null and the query result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the query result and the original message body is preserved."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="expectedUpdateCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Sets an expected update count to validate when using onConsume."/>
      </uriParameters>
   </component>
   <component>
      <id>servlet</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>Servlet</title>
      <description>To use a HTTP Servlet as entry for Camel routes when running in a servlet container.</description>
      <syntax>servlet:contextPath</syntax>
      <class>org.apache.camel.component.servlet.ServletComponent</class>
      <kind>component</kind>
      <extendsScheme>http</extendsScheme>
      <consumerOnly>true</consumerOnly>
      <scheme>servlet</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-servlet-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <componentProperty name="attachmentMultipartBinding" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to automatic bind multipart/form-data as attachments on the Camel Exchange. This is turn off by default as this may require servet specific configuration to enable this when using Servlet's."/>
         <componentProperty name="servletName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Default name of servlet to use. The default name is CamelServlet."/>
         <componentProperty name="httpRegistry" type="object" javaType="org.apache.camel.component.servlet.HttpRegistry" kind="property" deprecated="false" description="To use a custom org.apache.camel.component.servlet.HttpRegistry."/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" description="To use the shared HttpConfiguration as base configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="eagerCheckContentAvailable" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="consumer" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="contextPath" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" label="consumer" group="consumer" description="The context-path to use"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="servletName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelServlet" label="consumer" group="consumer" description="Name of the servlet to use"/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="async" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Configure the consumer to work in async mode"/>
         <uriParameter name="responseBufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom buffer size on the javax.servlet.ServletResponse."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="consumer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="optionsEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="traceEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>asterisk</id>
      <tags>
         <tag>voip</tag>
      </tags>
      <title>Asterisk</title>
      <description>The asterisk component is used to interact with Asterisk PBX Server Asterisk PBX Server.</description>
      <syntax>asterisk:name</syntax>
      <class>org.apache.camel.component.asterisk.AsteriskComponent</class>
      <kind>component</kind>
      <scheme>asterisk</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-asterisk-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The hostname of the asterix server"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Login password"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Logical name"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="action" type="string" javaType="org.apache.camel.component.asterisk.AsteriskActionEnum" kind="parameter" choice="QUEUE_STATUS,SIP_PEERS,EXTENSION_STATE" deprecated="false" label="producer" group="producer" description="What action to perform such as getting queue status sip peers or extension state."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Login username"/>
      </uriParameters>
   </component>
   <component>
      <id>sjms</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Simple JMS</title>
      <description>The sjms component (simple jms) allows messages to be sent to (or consumed from) a JMS Queue or Topic.</description>
      <syntax>sjms:destinationType:destinationName</syntax>
      <class>org.apache.camel.component.sjms.SjmsComponent</class>
      <kind>component</kind>
      <scheme>sjms</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sjms-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="transactionCommitStrategy" type="object" javaType="org.apache.camel.component.sjms.TransactionCommitStrategy" kind="property" deprecated="false" description="To configure which kind of commit strategy to use. Camel provides two implementations out of the box default and batch."/>
         <componentProperty name="connectionCount" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="The maximum number of connections available to endpoints started under this component"/>
         <componentProperty name="jmsKeyFormatStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy" kind="property" deprecated="false" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides one implementation out of the box: default. The default strategy will safely marshal dots and hyphens (. and -). Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="property" deprecated="false" description="A ConnectionFactory is required to enable the SjmsComponent. It can be set directly or set set as part of a ConnectionResource."/>
         <componentProperty name="destinationCreationStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.DestinationCreationStrategy" kind="property" deprecated="false" description="To use a custom DestinationCreationStrategy."/>
         <componentProperty name="timedTaskManager" type="object" javaType="org.apache.camel.component.sjms.taskmanager.TimedTaskManager" kind="property" deprecated="false" description="To use a custom TimedTaskManager"/>
         <componentProperty name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.MessageCreatedStrategy" kind="property" deprecated="false" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <componentProperty name="connectionResource" type="object" javaType="org.apache.camel.component.sjms.jms.ConnectionResource" kind="property" deprecated="false" description="A ConnectionResource is an interface that allows for customization and container control of the ConnectionFactory. See Plugable Connection Resource Management for further details."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="connectionCount" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The maximum number of connections available to this endpoint"/>
         <uriParameter name="mapJmsMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="connectionResource" type="object" javaType="org.apache.camel.component.sjms.jms.ConnectionResource" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Initializes the connectionResource for the endpoint which takes precedence over the component&apos;s connectionResource if any"/>
         <uriParameter name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,transaction" group="transaction" description="Specifies whether to use transacted mode"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="transactionBatchCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer,transaction" group="transaction" description="If transacted sets the number of messages to process before committing a transaction."/>
         <uriParameter name="jmsKeyFormatStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="destinationName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="DestinationName is a JMS queue or topic name. By default the destinationName is interpreted as a queue name."/>
         <uriParameter name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.MessageCreatedStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <uriParameter name="asyncStopListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to stop the consumer message listener asynchronously when stopping a route."/>
         <uriParameter name="destinationType" type="string" javaType="java.lang.String" kind="path" choice="queue,topic" deprecated="false" defaultValue="queue" group="common" description="The kind of destination to use"/>
         <uriParameter name="asyncStartListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to startup the consumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry."/>
         <uriParameter name="persistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Flag used to enable/disable message persistence."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
         <uriParameter name="namedReplyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the reply to destination name used for InOut producer endpoints."/>
         <uriParameter name="consumerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Sets the number of consumer listeners used for this endpoint."/>
         <uriParameter name="destinationCreationStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.DestinationCreationStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom DestinationCreationStrategy."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="prefillPool" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to prefill the producer connection pool on startup or create connections lazy when needed."/>
         <uriParameter name="messageSelector" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the JMS Message selector syntax."/>
         <uriParameter name="ttl" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Flag used to adjust the Time To Live value of produced messages."/>
         <uriParameter name="acknowledgementMode" type="string" javaType="org.apache.camel.component.sjms.jms.SessionAcknowledgementType" kind="parameter" choice="SESSION_TRANSACTED,CLIENT_ACKNOWLEDGE,AUTO_ACKNOWLEDGE,DUPS_OK_ACKNOWLEDGE" deprecated="false" defaultValue="AUTO_ACKNOWLEDGE" group="common" description="The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE"/>
         <uriParameter name="transactionBatchTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="consumer,transaction" group="transaction" description="Sets timeout (in millis) for batch transactions the value should be 1000 or higher."/>
         <uriParameter name="transactionCommitStrategy" type="object" javaType="org.apache.camel.component.sjms.TransactionCommitStrategy" kind="parameter" deprecated="false" label="transaction" group="transaction" description="Sets the commit strategy."/>
         <uriParameter name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Initializes the connectionFactory for the endpoint which takes precedence over the component&apos;s connectionFactory if any"/>
         <uriParameter name="producerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="producer" group="producer" description="Sets the number of producers used for this endpoint."/>
         <uriParameter name="durableSubscriptionId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the durable subscription Id required for durable topics."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="responseTimeOut" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="producer,advanced" group="producer (advanced)" description="Sets the amount of time we should wait before timing out a InOut response."/>
      </uriParameters>
   </component>
   <component>
      <id>ssh</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>SSH</title>
      <description>The ssh component enables access to SSH servers such that you can send an SSH command and process the response.</description>
      <syntax>ssh:host:port</syntax>
      <class>org.apache.camel.component.ssh.SshComponent</class>
      <kind>component</kind>
      <scheme>ssh</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ssh-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.ssh.SshConfiguration" kind="property" deprecated="false" description="To use the shared SSH configuration"/>
         <componentProperty name="port" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the port number for the remote SSH server."/>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the hostname of the remote SSH server."/>
         <componentProperty name="certResource" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting."/>
         <componentProperty name="certFilename" type="string" javaType="java.lang.String" kind="property" deprecated="true" description="Sets the resource path of the certificate to use for Authentication."/>
         <componentProperty name="keyPairProvider" type="object" javaType="org.apache.sshd.common.KeyPairProvider" kind="property" deprecated="false" description="Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server."/>
         <componentProperty name="keyType" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa."/>
         <componentProperty name="pollCommand" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...). You may need to end your command with a newline and that must be URL encoded 0A"/>
         <componentProperty name="timeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds."/>
         <componentProperty name="username" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the username to use in logging into the remote SSH server."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Sets the hostname of the remote SSH server."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="keyType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="ssh-rsa" group="common" description="Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="pollCommand" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...) You may need to end your command with a newline and that must be URL encoded 0A"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="22" group="common" description="Sets the port number for the remote SSH server."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="certResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the username to use in logging into the remote SSH server."/>
      </uriParameters>
   </component>
   <component>
      <id>geocoder</id>
      <tags>
         <tag>api</tag>
         <tag>location</tag>
      </tags>
      <title>Geocoder</title>
      <description>The geocoder component is used for looking up geocodes (latitude and longitude) for a given address or reverse lookup.</description>
      <syntax>geocoder:address:latlng</syntax>
      <class>org.apache.camel.component.geocoder.GeoCoderComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>geocoder</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-geocoder-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyAuthMethod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="address" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="producer" description="The geo address which should be prefixed with address:"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To use google premium with this client id"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="language" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="en" group="producer" description="The language to use."/>
         <uriParameter name="proxyAuthUsername" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Username for proxy authentication"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy host name"/>
         <uriParameter name="headersOnly" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to only enrich the Exchange with headers and leave the body as-is."/>
         <uriParameter name="proxyAuthHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Optional host for proxy NTML authentication"/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy port number"/>
         <uriParameter name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.geocoder.http.HttpClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc"/>
         <uriParameter name="clientKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To use google premium with this client key"/>
         <uriParameter name="proxyAuthPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Password for proxy authentication"/>
         <uriParameter name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpConnectionManager to manage connections"/>
         <uriParameter name="latlng" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="producer" description="The geo latitude and longitude which should be prefixed with latlng:"/>
         <uriParameter name="proxyAuthDomain" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Domain for proxy NTML authentication"/>
      </uriParameters>
   </component>
   <component>
      <id>hazelcast</id>
      <tags>
         <tag>cache</tag>
         <tag>datagrid</tag>
      </tags>
      <title>Hazelcast</title>
      <description>The hazelcast component allows you to work with the Hazelcast distributed data grid / cache.</description>
      <syntax>hazelcast:command:cacheName</syntax>
      <class>org.apache.camel.component.hazelcast.HazelcastComponent</class>
      <kind>component</kind>
      <scheme>hazelcast</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-hazelcast-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="hazelcastInstance" type="object" javaType="com.hazelcast.core.HazelcastInstance" kind="property" deprecated="false" description="The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="defaultOperation" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="To specify a default operation to use if no operation header has been provided."/>
         <uriParameter name="pollTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" label="seda" group="seda" description="The timeout used when consuming from the SEDA queue. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="seda" group="seda" description="If set to true then the consumer runs in transaction mode where the messages in the seda queue will only be removed if the transaction commits which happens when the processing is complete."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="seda" group="seda" description="To use concurrent consumers polling from the SEDA queue."/>
         <uriParameter name="command" type="string" javaType="org.apache.camel.component.hazelcast.HazelcastCommand" kind="path" choice="map,multimap,queue,topic,seda,set,atomicvalue,instance,list,replicatedmap,ringbuffer" deprecated="false" required="true" group="common" description="What operation to perform."/>
         <uriParameter name="cacheName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the cache"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="hazelcastInstance" type="object" javaType="com.hazelcast.core.HazelcastInstance" kind="parameter" deprecated="false" group="common" description="The hazelcast instance reference which can be used for hazelcast endpoint."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="seda" group="seda" description="If set to true the whole Exchange will be transfered. If header or body contains not serializable objects they will be skipped."/>
         <uriParameter name="hazelcastInstanceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The hazelcast instance reference name which can be used for hazelcast endpoint. If you don&apos;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>apns</id>
      <tags>
         <tag>eventbus</tag>
         <tag>mobile</tag>
      </tags>
      <title>APNS</title>
      <description>For sending notifications to Apple iOS devices.</description>
      <syntax>apns:name</syntax>
      <class>org.apache.camel.component.apns.ApnsComponent</class>
      <kind>component</kind>
      <scheme>apns</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-apns-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="apnsService" type="object" javaType="com.notnoop.apns.ApnsService" kind="property" deprecated="false" description="To use a custom link ApnsService"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Name of the endpoint"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="tokens" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Configure this property in case you want to statically declare tokens related to devices you want to notify. Tokens are separated by comma."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
      </uriParameters>
   </component>
   <component>
      <id>spring-batch</id>
      <tags>
         <tag>spring</tag>
         <tag>batch</tag>
         <tag>scheduling</tag>
      </tags>
      <title>Spring Batch</title>
      <description>The spring-batch component allows to send messages to Spring Batch for further processing.</description>
      <syntax>spring-batch:jobName</syntax>
      <class>org.apache.camel.component.spring.batch.SpringBatchComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>spring-batch</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-batch-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="jobRegistry" type="object" javaType="org.springframework.batch.core.configuration.JobRegistry" kind="property" deprecated="false" description="Explicitly specifies a JobRegistry to be used."/>
         <componentProperty name="jobLauncher" type="object" javaType="org.springframework.batch.core.launch.JobLauncher" kind="property" deprecated="false" description="Explicitly specifies a JobLauncher to be used."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="jobName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The name of the Spring Batch job located in the registry."/>
         <uriParameter name="jobFromHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Explicitly defines if the jobName should be taken from the headers instead of the URI."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="jobRegistry" type="object" javaType="org.springframework.batch.core.configuration.JobRegistry" kind="parameter" deprecated="false" group="producer" description="Explicitly specifies a JobRegistry to be used."/>
         <uriParameter name="jobLauncher" type="object" javaType="org.springframework.batch.core.launch.JobLauncher" kind="parameter" deprecated="false" group="producer" description="Explicitly specifies a JobLauncher to be used."/>
      </uriParameters>
   </component>
   <component>
      <id>chronicle-engine</id>
      <tags>
         <tag>Chronicle</tag>
      </tags>
      <title>Chronicle Engine</title>
      <description>The camel chronicle-engine component let you leverage the power of OpenHFT&apos;s Chronicle-Engine.</description>
      <syntax>chronicle-engine:addresses/path</syntax>
      <class>org.apache.camel.component.chronicle.engine.ChronicleEngineComponent</class>
      <kind>component</kind>
      <scheme>chronicle-engine</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-chronicle-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="addresses" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Engine addresses. Multiple addresses can be separated by comman."/>
         <uriParameter name="subscribeTopologicalEvents" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Set if consumer should subscribe to TopologicalEventsd efault false."/>
         <uriParameter name="filteredMapEvents" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="A comma separated list of Map event type to filer valid values are: INSERT UPDATE REMOVE."/>
         <uriParameter name="wireType" type="string" javaType="java.lang.String" kind="parameter" choice="TEXT,BINARY,BINARY_LIGHT,DEFAULT_ZERO_BINARY,DELTA_BINARY,FIELDLESS_BINARY,COMPRESSED_BINARY,JSON,RAW,CSV,READ_ANY" deprecated="false" defaultValue="BINARY" group="common" description="The Wire type to use default to binary wire."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="subscribeMapEvents" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Set if consumer should subscribe to Map events default true."/>
         <uriParameter name="subscribeTopicEvents" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Set if consumer should subscribe to TopicEventsd efault false."/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Engine path"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="action" type="string" javaType="java.lang.String" kind="parameter" choice="PUBLISH,PUBLISH_AND_INDEX,PPUT,PGET_AND_PUT,PPUT_ALL,PPUT_IF_ABSENT,PGET,PGET_AND_REMOVE,PREMOVE,PIS_EMPTY,PSIZE" deprecated="false" group="common" description="The default action to perform valid values are: - PUBLISH - PPUBLISH_AND_INDEX - PPUT - PGET_AND_PUT - PPUT_ALL - PPUT_IF_ABSENT - PGET - PGET_AND_REMOVE - PREMOVE - PIS_EMPTY - PSIZE"/>
         <uriParameter name="persistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Enable/disable data persistence"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-sns</id>
      <tags>
         <tag>cloud</tag>
         <tag>mobile</tag>
         <tag>messaging</tag>
      </tags>
      <title>AWS Simple Notification System</title>
      <description>The aws-sns component is used for sending messages to an Amazon Simple Notification Topic.</description>
      <syntax>aws-sns:topicNameOrArn</syntax>
      <class>org.apache.camel.component.aws.sns.SnsComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-sns</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="amazonSNSEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-SNS client wants to work with."/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="topicNameOrArn" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Topic name or ARN"/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The subject which is used if the message header &apos;CamelAwsSnsSubject&apos; is not present."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="messageStructure" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The message structure to use such as json"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="amazonSNSClient" type="object" javaType="com.amazonaws.services.sns.AmazonSNS" kind="parameter" deprecated="false" group="producer" description="To use the AmazonSNS as the client"/>
         <uriParameter name="policy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The policy for this queue"/>
      </uriParameters>
   </component>
   <component>
      <id>scp</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>SCP</title>
      <description>To copy files using the secure copy protocol (SCP).</description>
      <syntax>scp:host:port/directoryName</syntax>
      <class>org.apache.camel.component.scp.ScpComponent</class>
      <kind>component</kind>
      <extendsScheme>ftp</extendsScheme>
      <producerOnly>true</producerOnly>
      <scheme>scp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jsch-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="verboseLogging" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="JSCH is verbose logging out of the box. Therefore we turn the logging down to DEBUG logging by default. But setting this option to true turns on the verbose logging again."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="useUserKnownHostsFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="security" group="security" description="If knownHostFile has not been explicit configured then use the host file from System.getProperty(user.home) /.ssh/known_hosts"/>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop then you need to stop the consumer/route instead."/>
         <uriParameter name="disconnectOnBatchComplete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Use Expression such as File Language to dynamically set the filename. For consumers it&apos;s used as a filename filter. For producers it&apos;s used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today&apos;s file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards."/>
         <uriParameter name="strictHostKeyChecking" type="string" javaType="java.lang.String" kind="parameter" choice="no,yes" deprecated="false" defaultValue="no" group="producer" description="Sets whether to use strict host key checking. Possible values are: no yes"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="privateKeyFilePassphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key file passphrase to that the SFTP endpoint can do private key verification."/>
         <uriParameter name="soTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="300000" label="advanced" group="advanced" description="Sets the so timeout Used only by FTPClient"/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="Sets the data timeout for waiting for reply Used only by FTPClient"/>
         <uriParameter name="flatten" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Flatten is used to flatten the file name path to strip any leading paths so it&apos;s just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use for login"/>
         <uriParameter name="privateKeyFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key file to that the SFTP endpoint can do private key verification."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="producer" description="Port of the FTP server"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Hostname of the FTP server"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH"/>
         <uriParameter name="ciphers" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security,advanced" group="security (advanced)" description="Set a comma separated list of ciphers that will be used in order of preference. Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctraes128-cbc3des-ctr3des-cbcblowfish-cbcaes192-cbcaes256-cbc. If not specified the default list from JSCH will be used."/>
         <uriParameter name="chmod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="664" group="producer" description="Allows you to set chmod on the stored file. For example chmod=664."/>
         <uriParameter name="directoryName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="producer" description="The starting directory"/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of &apos;Cannot write null body to file.&apos; will be thrown. If the fileExist option is set to &apos;Override&apos; then the file will be truncated and if set to append the file will remain unchanged."/>
         <uriParameter name="knownHostsFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the known_hosts file so that the jsch endpoint can do host key verification."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use for login"/>
      </uriParameters>
   </component>
   <component>
      <id>cache</id>
      <tags>
         <tag>cache</tag>
      </tags>
      <title>EHCache</title>
      <description>The cache component enables you to perform caching operations using EHCache as the Cache Implementation.</description>
      <syntax>cache:cacheName</syntax>
      <class>org.apache.camel.component.cache.CacheComponent</class>
      <kind>component</kind>
      <scheme>cache</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cache-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="cacheManagerFactory" type="object" javaType="org.apache.camel.component.cache.CacheManagerFactory" kind="property" deprecated="false" description="To use the given CacheManagerFactory for creating the CacheManager. By default the DefaultCacheManagerFactory is used."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.cache.CacheConfiguration" kind="property" deprecated="false" description="Sets the Cache configuration"/>
         <componentProperty name="configurationFile" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the location of the ehcache.xml file to load from classpath or file system. By default the file is loaded from classpath:ehcache.xml"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="overflowToDisk" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Specifies whether cache may overflow to disk"/>
         <uriParameter name="timeToLiveSeconds" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300" group="common" description="The maximum time between creation time and when an element expires. Is used only if the element is not eternal"/>
         <uriParameter name="timeToIdleSeconds" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300" group="common" description="The maximum amount of time between accesses before an element expires"/>
         <uriParameter name="cacheManagerFactory" type="object" javaType="org.apache.camel.component.cache.CacheManagerFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom CacheManagerFactory for creating the CacheManager to be used by this endpoint. By default the CacheManagerFactory configured on the component is used."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="maxElementsInMemory" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" group="common" description="The number of elements that may be stored in the defined cache in memory."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="eventListenerRegistry" type="object" javaType="org.apache.camel.component.cache.CacheEventListenerRegistry" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure event listeners using the CacheEventListenerRegistry"/>
         <uriParameter name="diskStorePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" group="common" description="This parameter is ignored. CacheManager sets it using setter injection."/>
         <uriParameter name="memoryStoreEvictionPolicy" type="string" javaType="net.sf.ehcache.store.MemoryStoreEvictionPolicy" kind="parameter" choice="LRU,LFU,FIFO" deprecated="false" defaultValue="LFU" group="common" description="Which eviction strategy to use when maximum number of elements in memory is reached. The strategy defines which elements to be removed. LRU - Lest Recently Used LFU - Lest Frequently Used FIFO - First In First Out"/>
         <uriParameter name="objectCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to turn on allowing to store non serializable objects in the cache. If this option is enabled then overflow to disk cannot be enabled as well."/>
         <uriParameter name="eternal" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Sets whether elements are eternal. If eternal timeouts are ignored and the element never expires."/>
         <uriParameter name="cacheName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the cache"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="diskPersistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether the disk store persists between restarts of the application."/>
         <uriParameter name="cacheLoaderRegistry" type="object" javaType="org.apache.camel.component.cache.CacheLoaderRegistry" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure cache loader using the CacheLoaderRegistry"/>
         <uriParameter name="diskExpiryThreadIntervalSeconds" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="common" description="The number of seconds between runs of the disk expiry thread."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The default cache operation to use. If an operation in the message header then the operation from the header takes precedence."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="key" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The default key to use. If a key is provided in the message header then the key from the header takes precedence."/>
      </uriParameters>
   </component>
   <component>
      <id>github</id>
      <tags>
         <tag>api</tag>
         <tag>file</tag>
      </tags>
      <title>GitHub</title>
      <description>The github component is used for integrating Camel with github.</description>
      <syntax>github:type/branchName</syntax>
      <class>org.apache.camel.component.github.GitHubComponent</class>
      <kind>component</kind>
      <scheme>github</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-github-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="repoOwner" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="GitHub repository owner (organization)"/>
         <uriParameter name="repoName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="GitHub repository name"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="branchName" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="consumer" group="consumer" description="Name of branch"/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.github.GitHubType" kind="path" choice="CLOSEPULLREQUEST,PULLREQUESTCOMMENT,COMMIT,PULLREQUEST,TAG,PULLREQUESTSTATE,PULLREQUESTFILES,GETCOMMITFILE,CREATEISSUE" deprecated="false" required="true" group="common" description="What git operation to execute"/>
         <uriParameter name="oauthToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="GitHub OAuth token required unless username &amp; password are provided"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="To use the given encoding when getting a git commit file"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="GitHub password required unless oauthToken is provided"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="state" type="string" javaType="java.lang.String" kind="parameter" choice="error,failure,pending,success" deprecated="false" label="producer" group="producer" description="To set git commit status state"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="targetUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="To set git commit status target url"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="GitHub username required unless oauthToken is provided"/>
      </uriParameters>
   </component>
   <component>
      <id>mvel</id>
      <tags>
         <tag>transformation</tag>
         <tag>script</tag>
      </tags>
      <title>MVEL</title>
      <description>Transforms the message using a MVEL template.</description>
      <syntax>mvel:resourceUri</syntax>
      <class>org.apache.camel.component.mvel.MvelComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>mvel</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mvel-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Character encoding of the resource content."/>
      </uriParameters>
   </component>
   <component>
      <id>quartz2</id>
      <tags>
         <tag>scheduling</tag>
      </tags>
      <title>Quartz2</title>
      <description>Provides a scheduled delivery of messages using the Quartz 2.x scheduler.</description>
      <syntax>quartz2:groupName/triggerName</syntax>
      <class>org.apache.camel.component.quartz2.QuartzComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>quartz2</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-quartz2-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="autoStartScheduler" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether or not the scheduler should be auto started. This options is default true"/>
         <componentProperty name="propertiesFile" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="File name of the properties to load from the classpath"/>
         <componentProperty name="scheduler" type="object" javaType="org.quartz.Scheduler" kind="property" deprecated="false" description="To use the custom configured Quartz scheduler instead of creating a new Scheduler."/>
         <componentProperty name="prefixInstanceName" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to prefix the Quartz Scheduler instance name with the CamelContext name. This is enabled by default to let each CamelContext use its own Quartz scheduler instance by default. You can set this option to false to reuse Quartz scheduler instances between multiple CamelContext's."/>
         <componentProperty name="prefixJobNameWithEndpointId" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to prefix the quartz job with the endpoint id. This option is default false."/>
         <componentProperty name="schedulerFactory" type="object" javaType="org.quartz.SchedulerFactory" kind="property" deprecated="false" description="To use the custom SchedulerFactory which is used to create the Scheduler."/>
         <componentProperty name="startDelayedSeconds" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Seconds to wait before starting the quartz scheduler."/>
         <componentProperty name="enableJmx" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to enable Quartz JMX which allows to manage the Quartz scheduler from JMX. This options is default true"/>
         <componentProperty name="properties" type="object" javaType="java.util.Properties" kind="property" deprecated="false" description="Properties to configure the Quartz scheduler."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="cron" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Specifies a cron expression to define when to trigger."/>
         <uriParameter name="triggerName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The quartz timer name to use. The combination of group name and timer name should be unique."/>
         <uriParameter name="customCalendar" type="object" javaType="org.quartz.Calendar" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies a custom calendar to avoid specific range of date"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="deleteJob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="If set to true then the trigger automatically delete when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true."/>
         <uriParameter name="pauseJob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="If set to true then the trigger automatically pauses when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true."/>
         <uriParameter name="triggerStartDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="scheduler" group="scheduler" description="In case of scheduler has already started we want the trigger start slightly after current time to ensure endpoint is fully started before the job kicks in."/>
         <uriParameter name="autoStartScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="scheduler" group="scheduler" description="Whether or not the scheduler should be auto started."/>
         <uriParameter name="groupName" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="Camel" group="consumer" description="The quartz group name to use. The combination of group name and timer name should be unique."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="prefixJobNameWithEndpointId" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether the job name should be prefixed with endpoint id"/>
         <uriParameter name="recoverableJob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Instructs the scheduler whether or not the job should be re-executed if a &apos;recovery&apos; or &apos;fail-over&apos; situation is encountered."/>
         <uriParameter name="triggerParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure additional options on the trigger."/>
         <uriParameter name="durableJob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Whether or not the job should remain stored after it is orphaned (no triggers point to it)."/>
         <uriParameter name="startDelayedSeconds" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="scheduler" group="scheduler" description="Seconds to wait before starting the quartz scheduler."/>
         <uriParameter name="jobParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure additional options on the job."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="usingFixedCamelContextName" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If it is true JobDataMap uses the CamelContext name directly to reference the CamelContext if it is false JobDataMap uses use the CamelContext management name which could be changed during the deploy time."/>
         <uriParameter name="stateful" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Uses a Quartz PersistJobDataAfterExecution and DisallowConcurrentExecution instead of the default job."/>
         <uriParameter name="fireNow" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="scheduler" group="scheduler" description="If it is true will fire the trigger when the route is start when using SimpleTrigger."/>
      </uriParameters>
   </component>
   <component>
      <id>zookeeper</id>
      <tags>
         <tag>clustering</tag>
      </tags>
      <title>ZooKeeper</title>
      <description>The zookeeper component allows interaction with a ZooKeeper cluster.</description>
      <syntax>zookeeper:serverUrls/path</syntax>
      <class>org.apache.camel.component.zookeeper.ZooKeeperComponent</class>
      <kind>component</kind>
      <scheme>zookeeper</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-zookeeper-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.zookeeper.ZooKeeperConfiguration" kind="property" deprecated="false" description="To use a shared ZooKeeperConfiguration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoff" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="consumer" group="consumer" description="The time interval to backoff for after an error before retrying."/>
         <uriParameter name="createMode" type="string" javaType="java.lang.String" kind="parameter" choice="PERSISTENT,PERSISTENT_SEQUENTIAL,EPHEMERAL,EPHEMERAL_SEQUENTIAL" deprecated="false" defaultValue="EPHEMERAL" label="producer" group="producer" description="The create mode that should be used for the newly created node"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="serverUrls" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The zookeeper server hosts (multiple servers can be separated by comma)"/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5000" group="common" description="The time interval to wait on connection before timing out."/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The node in the ZooKeeper server (aka znode)"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="repeat" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Should changes to the znode be &apos;watched&apos; and repeatedly processed."/>
         <uriParameter name="sendEmptyMessageOnDelete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Upon the delete of a znode should an empty message be send to the consumer"/>
         <uriParameter name="create" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Should the endpoint create the node if it does not currently exist."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="awaitExistence" type="boolean" javaType="boolean" kind="parameter" deprecated="true" defaultValue="true" group="common" description="Not in use"/>
         <uriParameter name="listChildren" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether the children of the node should be listed"/>
      </uriParameters>
   </component>
   <component>
      <id>aws-ec2</id>
      <tags>
         <tag>cloud</tag>
         <tag>management</tag>
      </tags>
      <title>AWS EC2</title>
      <description>The aws-ec2 is used for managing Amazon EC2 instances.</description>
      <syntax>aws-ec2:label</syntax>
      <class>org.apache.camel.component.aws.ec2.EC2Component</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-ec2</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="amazonEc2Client" type="object" javaType="com.amazonaws.services.ec2.AmazonEC2Client" kind="parameter" deprecated="false" group="producer" description="To use a existing configured AmazonEC2Client as client"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="amazonEc2Endpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-EC2 client wants to work with."/>
         <uriParameter name="label" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Logical name"/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.aws.ec2.EC2Operations" kind="parameter" choice="createAndRunInstances, startInstances, stopInstances, terminateInstances, describeInstances, describeInstancesStatus, rebootInstances, monitorInstances, unmonitorInstances, createTags, deleteTags" deprecated="false" required="true" label="producer" group="producer" description="The operation to perform. It can be createAndRunInstances startInstances stopInstances terminateInstances describeInstances describeInstancesStatus rebootInstances monitorInstances unmonitorInstances createTags or deleteTags"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
      </uriParameters>
   </component>
   <component>
      <id>pop3</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>POP3</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>pop3:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>pop3</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>sftp</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>SFTP</title>
      <description>The sftp (FTP over SSH) component is used for uploading or downloading files from SFTP servers.</description>
      <syntax>sftp:host:port/directoryName</syntax>
      <class>org.apache.camel.component.file.remote.SftpComponent</class>
      <kind>component</kind>
      <extendsScheme>file</extendsScheme>
      <scheme>sftp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ftp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop then you need to stop the consumer/route instead."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Use Expression such as File Language to dynamically set the filename. For consumers it&apos;s used as a filename filter. For producers it&apos;s used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today&apos;s file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards."/>
         <uriParameter name="strictHostKeyChecking" type="string" javaType="java.lang.String" kind="parameter" choice="no,yes" deprecated="false" defaultValue="no" label="security" group="security" description="Sets whether to use strict host key checking."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="idempotent" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,filter" group="filter" description="Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use for login"/>
         <uriParameter name="privateKeyPassphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key file passphrase so that the SFTP endpoint can do private key verification."/>
         <uriParameter name="sortBy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="directoryName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The starting directory"/>
         <uriParameter name="readLockDeleteOrphanLockFiles" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether or not read lock with marker files should upon startup delete any orphan read lock files which may have been left on the file system if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file this could also be due another node is concurrently reading files from the same shared directory."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="serverAliveInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Allows you to set the serverAliveInterval of the sftp session"/>
         <uriParameter name="inProgressRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used."/>
         <uriParameter name="soTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="300000" label="advanced" group="advanced" description="Sets the so timeout Used only by FTPClient"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="proxy" type="object" javaType="com.jcraft.jsch.Proxy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured com.jcraft.jsch.Proxy. This proxy is used to consume/send messages from the target SFTP host."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="preferredAuthentications" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the preferred authentications which SFTP endpoint will used. Some example include:passwordpublickey. If not specified the default list from JSCH will be used."/>
         <uriParameter name="readLockTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="consumer,lock" group="lock" description="Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="compression" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="To use compression. Specify a level from 1 to 10. Important: You must manually add the needed JSCH zlib JAR to the classpath for compression support."/>
         <uriParameter name="charset" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well."/>
         <uriParameter name="disconnectOnBatchComplete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server."/>
         <uriParameter name="idempotentKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size"/>
         <uriParameter name="sorter" type="object" javaType="java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;T&gt;&gt;" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Pluggable sorter as a java.util.Comparator class."/>
         <uriParameter name="maximumReconnectAttempts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Specifies the maximum reconnect attempts Camel performs when it tries to connect to the remote FTP server. Use 0 to disable this behavior."/>
         <uriParameter name="stepwise" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Sets whether we should stepwise change directories while traversing file structures when downloading files or as well when uploading a file to a directory. You can disable this if you for example are in a situation where you cannot change directory on the FTP server due security reasons."/>
         <uriParameter name="directoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Similar to startingDirectoryMustExist but this applies during polling recursive sub directories."/>
         <uriParameter name="autoCreate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Automatically create missing directories in the file&apos;s pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to."/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If a directory will look for files in all the sub-directories as well."/>
         <uriParameter name="antExclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format."/>
         <uriParameter name="keepLastModified" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers."/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="privateKeyUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key file (loaded from classpath by default) so that the SFTP endpoint can do private key verification."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="ciphers" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set a comma separated list of ciphers that will be used in order of preference. Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctraes128-cbc3des-ctr3des-cbcblowfish-cbcaes192-cbcaes256-cbc. If not specified the default list from JSCH will be used."/>
         <uriParameter name="tempPrefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files."/>
         <uriParameter name="sendNoop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid which allows to silently re-connect to be able to upload the file. However if this causes problems you can turn this option off."/>
         <uriParameter name="minDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory."/>
         <uriParameter name="include" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to include files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true."/>
         <uriParameter name="streamDownload" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets the download method to use when not using a local working directory. If set to true the remote files are streamed to the route as they are read. When set to false the remote files are loaded into memory before being sent into the route."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Delay in millis Camel will wait before performing a reconnect attempt."/>
         <uriParameter name="bulkRequests" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies how many requests may be outstanding at any one time. Increasing this value may slightly improve file transfer speed but will increase memory usage."/>
         <uriParameter name="filter" type="object" javaType="org.apache.camel.component.file.GenericFileFilter&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method."/>
         <uriParameter name="maxDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="consumer,filter" group="filter" description="The maximum depth to traverse when recursively processing a directory."/>
         <uriParameter name="filterFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the file based on Simple language. For example to filter on file size you can use $file:size 5000"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="shuffle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,sort" group="sort" description="To shuffle the list of files (sort in random order)"/>
         <uriParameter name="knownHostsFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the known_hosts file so that the SFTP endpoint can do host key verification."/>
         <uriParameter name="antInclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format."/>
         <uriParameter name="moveExisting" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base."/>
         <uriParameter name="throwExceptionOnConnectFailed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Should an exception be thrown if connection failed (exhausted) By default exception is not thrown and a WARN is logged. You can use this to enable exception being thrown and handle the thrown exception from the org.apache.camel.spi.PollingConsumerPollStrategy rollback method."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="flatten" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Flatten is used to flatten the file name path to strip any leading paths so it&apos;s just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths."/>
         <uriParameter name="download" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the FTP consumer should download the file. If this option is set to false then the message body will be null but the consumer will still trigger a Camel Exchange that has details about the file such as file name file size etc. It&apos;s just that the file will not be downloaded."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerDeleteTargetFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation."/>
         <uriParameter name="readLockRemoveOnRollback" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false then the file name entry is confirmed (as if the file did a commit)."/>
         <uriParameter name="privateKeyFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key file so that the SFTP endpoint can do private key verification."/>
         <uriParameter name="readLockRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname of the FTP server"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="exclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to exclude files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards."/>
         <uriParameter name="fastExistsCheck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common,advanced" group="common (advanced)" description="If set this option to be true camel-ftp will use the list file directly to check if the file exists. Since some FTP server may not support to list the file directly if the option is false camel-ftp will use the old way to list the directory and check if the file exists. This option also influences readLock=changed to control whether it performs a fast check to update file information or not. This can be used to speed up the process if the FTP server has a lot of files."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="processStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileProcessStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply."/>
         <uriParameter name="readLock" type="string" javaType="java.lang.String" kind="parameter" choice="none,markerFile,fileLock,rename,changed,idempotent" deprecated="false" label="consumer,lock" group="lock" description="Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering such as Hazelcast Component or Infinispan."/>
         <uriParameter name="separator" type="object" javaType="org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator" kind="parameter" deprecated="false" defaultValue="UNIX" group="common" description="Sets the path separator to be used. UNIX = Uses unix style path separator Windows = Uses windows style path separator Auto = (is default) Use existing path separator in file name"/>
         <uriParameter name="readLockLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,lock" group="lock" description="Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock rename."/>
         <uriParameter name="jschLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" group="common" description="The logging level to use for JSCH activity logging. As JSCH is verbose at by default at INFO level the threshold is WARN by default."/>
         <uriParameter name="readLockMinLength" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1" label="consumer,lock" group="lock" description="This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="Port of the FTP server"/>
         <uriParameter name="readLockMarkerFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application."/>
         <uriParameter name="keyPair" type="object" javaType="java.security.KeyPair" kind="parameter" deprecated="false" label="security" group="security" description="Sets a key pair of the public and private key so to that the SFTP endpoint can do public/private key verification."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerMaxMessagesPerPoll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="useUserKnownHostsFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="security" group="security" description="If knownHostFile has not been explicit configured then use the host file from System.getProperty(user.home)/.ssh/known_hosts"/>
         <uriParameter name="exclusiveReadLockStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,lock" group="lock" description="Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation."/>
         <uriParameter name="readLockCheckInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,lock" group="lock" description="Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="fileExist" type="string" javaType="org.apache.camel.component.file.GenericFileExist" kind="parameter" choice="Override,Append,Fail,Ignore,Move,TryRename" deprecated="false" defaultValue="Override" label="producer" group="producer" description="What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers."/>
         <uriParameter name="localWorkDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory."/>
         <uriParameter name="startingDirectoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn&apos;t exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn&apos;t exist."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file will be deleted after it is processed successfully."/>
         <uriParameter name="readLockMinAge" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,lock" group="lock" description="This option applied only for readLock=change. This option allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="Sets the data timeout for waiting for reply Used only by FTPClient"/>
         <uriParameter name="knownHostsUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the known_hosts file (loaded from classpath by default) so that the SFTP endpoint can do host key verification."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="doneFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Producer: If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="chmod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Allows you to set chmod on the stored file. For example chmod=640."/>
         <uriParameter name="onCompletionExceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of &apos;Cannot write null body to file.&apos; will be thrown. If the fileExist option is set to &apos;Override&apos; then the file will be truncated and if set to append the file will remain unchanged."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="moveFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again."/>
         <uriParameter name="preMove" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order."/>
         <uriParameter name="move" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done."/>
         <uriParameter name="serverAliveCountMax" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="advanced" group="advanced" description="Allows you to set the serverAliveCountMax of the sftp session"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="knownHosts" type="string" javaType="byte[]" kind="parameter" deprecated="false" label="security" group="security" description="Sets the known_hosts from the byte array so that the SFTP endpoint can do host key verification."/>
         <uriParameter name="privateKey" type="string" javaType="byte[]" kind="parameter" deprecated="false" label="security" group="security" description="Set the private key as byte so that the SFTP endpoint can do private key verification."/>
         <uriParameter name="tempFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language."/>
         <uriParameter name="ignoreFileNotFoundOrPermissionError" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to ignore when trying to download a file which does not exist or due to permission error. By default when a file does not exists or insufficient permission then an exception is thrown. Setting this option to true allows to ignore that instead."/>
         <uriParameter name="antFilterCaseSensitive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Sets case sensitive flag on ant fiter"/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="131072" label="advanced" group="advanced" description="Write buffer sized in bytes."/>
         <uriParameter name="filterDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the directory based on Simple language. For example to filter on current date you can use a simple date pattern such as $date:now:yyyMMdd"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use for login"/>
      </uriParameters>
   </component>
   <component>
      <id>metrics</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>Metrics</title>
      <description>To collect various metrics directly from Camel routes using the DropWizard metrics library.</description>
      <syntax>metrics:metricsType:metricsName</syntax>
      <class>org.apache.camel.component.metrics.MetricsComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>metrics</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-metrics-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="metricRegistry" type="object" javaType="com.codahale.metrics.MetricRegistry" kind="property" deprecated="false" description="To use a custom configured MetricRegistry."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="metricsType" type="string" javaType="org.apache.camel.component.metrics.MetricsType" kind="path" choice="GAUGE,COUNTER,HISTOGRAM,METER,TIMER" deprecated="false" required="true" group="producer" description="Type of metrics"/>
         <uriParameter name="decrement" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="Decrement value when using counter type"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="metricsName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of metrics"/>
         <uriParameter name="action" type="string" javaType="org.apache.camel.component.metrics.MetricsTimerAction" kind="parameter" choice="start,stop" deprecated="false" group="producer" description="Action when using timer type"/>
         <uriParameter name="increment" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="Increment value when using counter type"/>
         <uriParameter name="value" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="Value value when using histogram type"/>
         <uriParameter name="mark" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="Mark when using meter type"/>
      </uriParameters>
   </component>
   <component>
      <id>ahc-ws</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>AHC Websocket</title>
      <description>To exchange data with external Websocket servers using Async Http Client.</description>
      <syntax>ahc-ws:httpUri</syntax>
      <class>org.apache.camel.component.ahc.ws.WsComponent</class>
      <kind>component</kind>
      <extendsScheme>ahc</extendsScheme>
      <scheme>ahc-ws</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ahc-ws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <componentProperty name="client" type="object" javaType="org.asynchttpclient.AsyncHttpClient" kind="property" deprecated="false" description="To use a custom AsyncHttpClient"/>
         <componentProperty name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="property" deprecated="false" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <componentProperty name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="property" deprecated="false" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientConfigOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClientConfig using the key/values from the Map."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Option to disable throwing the AhcOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. This reference overrides any configured SSLContextParameters at the component level. See Using the JSSE Configuration Utility. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="parameter" deprecated="false" group="common" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Define if the Connection Close header has to be added to HTTP Request. This parameter is false by default"/>
         <uriParameter name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useStreaming" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="To enable streaming to send data as multiple text fragments."/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="common" description="The URI to use such as http://hostname:port/path"/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or Servlet Camel components). On the producer side the exception will be deserialized and thrown as is instead of the AhcOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="sendMessageOnError" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to send an message if the web-socket listener received an error."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If the option is true then the Exchange.HTTP_URI header is ignored and use the endpoint&apos;s URI for request. You may also set the throwExceptionOnFailure to be false to let the AhcProducer send all the fault response back."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" group="common" description="The initial in-memory buffer size used when transferring data between Camel and AHC Client."/>
      </uriParameters>
   </component>
   <component>
      <id>lucene</id>
      <tags>
         <tag>database</tag>
         <tag>search</tag>
      </tags>
      <title>Lucene</title>
      <description>To insert or query from Apache Lucene databases.</description>
      <syntax>lucene:host:operation</syntax>
      <class>org.apache.camel.component.lucene.LuceneComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>lucene</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-lucene-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="config" type="object" javaType="org.apache.camel.component.lucene.LuceneConfiguration" kind="property" deprecated="false" description="To use a shared lucene configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="analyzer" type="object" javaType="org.apache.lucene.analysis.Analyzer" kind="parameter" deprecated="false" group="producer" description="An Analyzer builds TokenStreams which analyze text. It thus represents a policy for extracting index terms from text. The value for analyzer can be any class that extends the abstract class org.apache.lucene.analysis.Analyzer. Lucene also offers a rich set of analyzers out of the box"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The URL to the lucene server"/>
         <uriParameter name="srcDir" type="string" javaType="java.io.File" kind="parameter" deprecated="false" group="producer" description="An optional directory containing files to be used to be analyzed and added to the index at producer startup."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.lucene.LuceneOperation" kind="path" choice="insert,query" deprecated="false" required="true" group="producer" description="Operation to do such as insert or query."/>
         <uriParameter name="maxHits" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="An integer value that limits the result set of the search operation"/>
         <uriParameter name="indexDir" type="string" javaType="java.io.File" kind="parameter" deprecated="false" group="producer" description="A file system directory in which index files are created upon analysis of the document by the specified analyzer"/>
      </uriParameters>
   </component>
   <component>
      <id>freemarker</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Freemarker</title>
      <description>Transforms the message using a FreeMarker template.</description>
      <syntax>freemarker:resourceUri</syntax>
      <class>org.apache.camel.component.freemarker.FreemarkerComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>freemarker</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-freemarker-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="freemarker.template.Configuration" kind="property" deprecated="false" description="To use an existing freemarker.template.Configuration instance as the configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="configuration" type="object" javaType="freemarker.template.Configuration" kind="parameter" deprecated="false" group="producer" description="Sets the Freemarker configuration to use"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the encoding to be used for loading the template file."/>
         <uriParameter name="templateUpdateDelay" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="Number of seconds the loaded template resource will remain in the cache."/>
      </uriParameters>
   </component>
   <component>
      <id>rss</id>
      <tags>
         <tag>rss</tag>
      </tags>
      <title>RSS</title>
      <description>The rss component is used for consuming RSS feeds.</description>
      <syntax>rss:feedUri</syntax>
      <class>org.apache.camel.component.rss.RssComponent</class>
      <kind>component</kind>
      <extendsScheme>atom</extendsScheme>
      <consumerOnly>true</consumerOnly>
      <scheme>rss</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rss-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the password to be used for basic authentication when polling from a HTTP feed"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="throttleEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether all entries identified in a single feed poll should be delivered immediately. If true only one entry is processed per consumer.delay. Only applicable when splitEntries = true."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="splitEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether or not entries should be sent individually or whether the entire feed should be sent as a single message"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sortEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Sets whether to sort entries by published date. Only works when splitEntries = true."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="feedHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether to add the feed object as a header"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="filter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether to use filtering or not of the entries."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="lastUpdate" type="string" javaType="java.util.Date" kind="parameter" deprecated="false" group="consumer" description="Sets the timestamp to be used for filtering entries from the atom feeds. This options is only in conjunction with the splitEntries."/>
         <uriParameter name="feedUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The URI to the feed to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the username to be used for basic authentication when polling from a HTTP feed"/>
      </uriParameters>
   </component>
   <component>
      <id>spark</id>
      <tags>
         <tag>bigdata</tag>
         <tag>iot</tag>
      </tags>
      <title>Apache Spark</title>
      <description>The spark component can be used to send RDD or DataFrame jobs to Apache Spark cluster.</description>
      <syntax>spark:endpointType</syntax>
      <class>org.apache.camel.component.spark.SparkComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>spark</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spark-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="rdd" type="object" javaType="org.apache.spark.api.java.JavaRDDLike" kind="property" deprecated="false" description="RDD to compute against."/>
         <componentProperty name="rddCallback" type="object" javaType="org.apache.camel.component.spark.RddCallback" kind="property" deprecated="false" description="Function performing action against an RDD."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="endpointType" type="string" javaType="org.apache.camel.component.spark.EndpointType" kind="path" choice="rdd,dataframe,hive" deprecated="false" required="true" group="producer" description="Type of the endpoint (rdd dataframe hive)."/>
         <uriParameter name="rdd" type="object" javaType="org.apache.spark.api.java.JavaRDDLike" kind="parameter" deprecated="false" group="producer" description="RDD to compute against."/>
         <uriParameter name="dataFrame" type="object" javaType="org.apache.spark.sql.DataFrame" kind="parameter" deprecated="false" group="producer" description="DataFrame to compute against."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="collect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Indicates if results should be collected or counted."/>
         <uriParameter name="rddCallback" type="object" javaType="org.apache.camel.component.spark.RddCallback" kind="parameter" deprecated="false" group="producer" description="Function performing action against an RDD."/>
         <uriParameter name="dataFrameCallback" type="object" javaType="org.apache.camel.component.spark.DataFrameCallback" kind="parameter" deprecated="false" group="producer" description="Function performing action against an DataFrame."/>
      </uriParameters>
   </component>
   <component>
      <id>sjms-batch</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Simple JMS Batch</title>
      <description>The sjms-batch component is a specialized for highly performant transactional batch consumption from a JMS queue.</description>
      <syntax>sjms-batch:destinationName</syntax>
      <class>org.apache.camel.component.sjms.batch.SjmsBatchComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>sjms-batch</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sjms-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="property" deprecated="false" description="A ConnectionFactory is required to enable the SjmsBatchComponent."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="aggregationStrategy" type="object" javaType="org.apache.camel.processor.aggregate.AggregationStrategy" kind="parameter" deprecated="false" required="true" group="consumer" description="The aggregation strategy to use which merges all the batched messages into a single message"/>
         <uriParameter name="mapJmsMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details."/>
         <uriParameter name="consumerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" group="consumer" description="The number of JMS sessions to consume from"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="If using completion timeout or interval then the batch may be empty if the timeout triggered and there was no messages in the batch. If this option is true and the batch is empty then an empty message is added to the batch so an empty message is routed."/>
         <uriParameter name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <uriParameter name="pollDuration" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" group="consumer" description="The duration in milliseconds of each poll for messages. completionTimeOut will be used if it is shorter and a batch has started."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="eagerCheckCompletion" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Use eager completion checking which means that the completionPredicate will use the incoming Exchange. As opposed to without eager completion checking the completionPredicate will use the aggregated Exchange."/>
         <uriParameter name="completionSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="200" group="consumer" description="The number of messages consumed at which the batch will be completed"/>
         <uriParameter name="timeoutCheckerExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="advanced" group="advanced" description="If using the completionInterval option a background thread is created to trigger the completion interval. Set this option to provide a custom thread pool to be used rather than creating a new thread for every consumer."/>
         <uriParameter name="completionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="500" group="consumer" description="The timeout in millis from receipt of the first first message when the batch will be completed. The batch may be empty if the timeout triggered and there was no messages in the batch. Notice you cannot use both completion timeout and completion interval at the same time only one can be configured."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="jmsKeyFormatStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <uriParameter name="completionInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" group="consumer" description="The completion interval in millis which causes batches to be completed in a scheduled fixed rate every interval. The batch may be empty if the timeout triggered and there was no messages in the batch. Notice you cannot use both completion timeout and completion interval at the same time only one can be configured."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="destinationName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The destination name. Only queues are supported names may be prefixed by &apos;queue:&apos;."/>
         <uriParameter name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.sjms.jms.MessageCreatedStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <uriParameter name="completionPredicate" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="The completion predicate which causes batches to be completed when the predicate evaluates as true. The predicate can also be configured using the simple language using the string syntax. You may want to set the option eagerCheckCompletion to true to let the predicate match the incoming message as otherwise it matches the aggregated message."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
      </uriParameters>
   </component>
   <component>
      <id>jcr</id>
      <tags>
         <tag>cms</tag>
         <tag>database</tag>
      </tags>
      <title>JCR</title>
      <description>The jcr component allows you to add/read nodes to/from a JCR compliant content repository.</description>
      <syntax>jcr:host/base</syntax>
      <class>org.apache.camel.component.jcr.JcrComponent</class>
      <kind>component</kind>
      <scheme>jcr</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jcr-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="deep" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="When isDeep is true events whose associated parent node is at absPath or within its subgraph are received."/>
         <uriParameter name="sessionLiveCheckInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" group="common" description="Interval in milliseconds to wait before each session live checking The default value is 60000 ms."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="eventTypes" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="eventTypes (a combination of one or more event types encoded as a bit mask value such as javax.jcr.observation.Event.NODE_ADDED javax.jcr.observation.Event.NODE_REMOVED etc.)."/>
         <uriParameter name="noLocal" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If noLocal is true then events generated by the session through which the listener was registered are ignored. Otherwise they are not ignored."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the javax.jcr.Repository to lookup from the Camel registry to be used."/>
         <uriParameter name="workspaceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The workspace to access. If it&apos;s not specified then the default one will be used"/>
         <uriParameter name="nodeTypeNames" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="When a comma separated nodeTypeName list string is set only events whose associated parent node has one of the node types (or a subtype of one of the node types) in this list will be received."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="base" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Get the base node when accessing the repository"/>
         <uriParameter name="sessionLiveCheckIntervalOnStart" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="3000" group="common" description="Interval in milliseconds to wait before the first session live checking. The default value is 3000 ms."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username for login"/>
         <uriParameter name="uuids" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="When a comma separated uuid list string is set only events whose associated parent node has one of the identifiers in the comma separated uuid list will be received."/>
      </uriParameters>
   </component>
   <component>
      <id>smtps</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>SMTPS</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>smtps:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>smtps</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>irc</id>
      <tags>
         <tag>chat</tag>
      </tags>
      <title>IRC</title>
      <description>The irc component implements an IRC (Internet Relay Chat) transport.</description>
      <syntax>irc:hostname:port</syntax>
      <class>org.apache.camel.component.irc.IrcComponent</class>
      <kind>component</kind>
      <scheme>irc</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-irc-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="Used for configuring security using SSL. Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. This reference overrides any configured SSLContextParameters at the component level. Note that this setting overrides the trustManager option."/>
         <uriParameter name="autoRejoin" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to auto re-join when being kicked"/>
         <uriParameter name="onTopic" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle topic change events."/>
         <uriParameter name="colors" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Whether or not the server supports color codes."/>
         <uriParameter name="onQuit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle user quit events."/>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname for the IRC chat server"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The IRC server password."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="nickname" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The nickname used in chat."/>
         <uriParameter name="nickPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Your IRC server nickname password."/>
         <uriParameter name="trustManager" type="object" javaType="org.schwering.irc.lib.ssl.SSLTrustManager" kind="parameter" deprecated="false" label="security" group="security" description="The trust manager used to verify the SSL server&apos;s certificate."/>
         <uriParameter name="persistent" type="boolean" javaType="boolean" kind="parameter" deprecated="true" defaultValue="true" group="common" description="Use persistent messages."/>
         <uriParameter name="onKick" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle kick events."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="namesOnJoin" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Sends NAMES command to channel after joining it. link onReply has to be true in order to process the result which will have the header value irc.num = &apos;353&apos;."/>
         <uriParameter name="realname" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The IRC user&apos;s actual name."/>
         <uriParameter name="onPart" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle user part events."/>
         <uriParameter name="onReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="filter" group="filter" description="Whether or not to handle general responses to commands or informational messages."/>
         <uriParameter name="onJoin" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle user join events."/>
         <uriParameter name="onPrivmsg" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle private message events."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="6667,6668,6669" group="common" description="Port number for the IRC chat server"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="onMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle mode change events."/>
         <uriParameter name="onNick" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="filter" group="filter" description="Handle nickname change events."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The IRC server user name."/>
      </uriParameters>
   </component>
   <component>
      <id>kestrel</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Kestrel</title>
      <description>The kestrel component allows messages to be sent to (or consumed from) Kestrel brokers.</description>
      <syntax>kestrel:addresses/queue</syntax>
      <class>org.apache.camel.component.kestrel.KestrelComponent</class>
      <kind>component</kind>
      <scheme>kestrel</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-kestrel-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.kestrel.KestrelConfiguration" kind="property" deprecated="false" description="To use a shared configured configuration as base for creating new endpoints."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="addresses" type="array" javaType="java.lang.String[]" kind="path" deprecated="false" defaultValue="localhost:22133" group="common" description="The address(es) on which kestrel is running"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="waitTimeMs" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" group="common" description="How long a given wait should block (server side) in milliseconds"/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" group="common" description="How many concurrent listeners to schedule for the thread pool"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="queue" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The queue we are polling"/>
      </uriParameters>
   </component>
   <component>
      <id>dataformat</id>
      <tags>
         <tag>core</tag>
         <tag>transformation</tag>
      </tags>
      <title>Data Format</title>
      <description>The dataformat component is used for working with Data Formats as if it was a regular Component supporting Endpoints and URIs.</description>
      <syntax>dataformat:name:operation</syntax>
      <class>org.apache.camel.component.dataformat.DataFormatComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>dataformat</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of data format"/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="path" choice="marshal,unmarshal" deprecated="false" required="true" group="producer" description="Operation to use either marshal or unmarshal"/>
      </uriParameters>
   </component>
   <component>
      <id>imap</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>IMAP</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>imap:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>imap</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>smtp</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>SMTP</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>smtp:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>smtp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>xquery</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>XQuery</title>
      <description>Transforms the message using a XQuery template using Saxon.</description>
      <syntax>xquery:resourceUri</syntax>
      <class>org.apache.camel.component.xquery.XQueryComponent</class>
      <kind>component</kind>
      <scheme>xquery</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-saxon-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="moduleURIResolver" type="object" javaType="net.sf.saxon.lib.ModuleURIResolver" kind="property" deprecated="false" description="To use the custom ModuleURIResolver"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="configuration" type="object" javaType="net.sf.saxon.Configuration" kind="parameter" deprecated="false" group="common" description="To use a custom Saxon configuration"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="resultsFormat" type="string" javaType="org.apache.camel.component.xquery.ResultFormat" kind="parameter" choice="Bytes,BytesSource,DOM,DOMSource,List,String,StringSource" deprecated="false" defaultValue="DOM" group="common" description="What output result to use"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="resultType" type="string" javaType="java.lang.Class&lt;?&gt;" kind="parameter" deprecated="false" group="common" description="What output result to use defined as a class"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="headerName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="To use a Camel Message header as the input source instead of Message body."/>
         <uriParameter name="namespacePrefixes" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="Allows to control which namespace prefixes to use for a set of namespace mappings"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the template to load from classpath or file system"/>
         <uriParameter name="allowStAX" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to allow using StAX mode"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="staticQueryContext" type="object" javaType="net.sf.saxon.query.StaticQueryContext" kind="parameter" deprecated="false" group="common" description="To use a custom Saxon StaticQueryContext"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="moduleURIResolver" type="object" javaType="net.sf.saxon.lib.ModuleURIResolver" kind="parameter" deprecated="false" group="common" description="To use the custom ModuleURIResolver"/>
         <uriParameter name="stripsAllWhiteSpace" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to strip all whitespaces"/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="Additional parameters"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="properties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" group="common" description="Properties to configure the serialization parameters"/>
      </uriParameters>
   </component>
   <component>
      <id>beanstalk</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Beanstalk</title>
      <description>The beanstalk component is used for job retrieval and post-processing of Beanstalk jobs.</description>
      <syntax>beanstalk:connectionSettings</syntax>
      <class>org.apache.camel.component.beanstalk.BeanstalkComponent</class>
      <kind>component</kind>
      <scheme>beanstalk</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-beanstalk-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="connectionSettingsFactory" type="object" javaType="org.apache.camel.component.beanstalk.ConnectionSettingsFactory" kind="property" deprecated="false" description="Custom ConnectionSettingsFactory. Specify which ConnectionSettingsFactory to use to make connections to Beanstalkd. Especially useful for unit testing without beanstalkd daemon (you can mock ConnectionSettings)"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="onFailure" type="string" javaType="org.apache.camel.component.beanstalk.BeanstalkCommand" kind="parameter" choice="bury,release,put,touch,delete,kick" deprecated="false" label="consumer" group="consumer" description="Command to use when processing failed."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="awaitJob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether to wait for job to complete before ack the job from beanstalk"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="jobPriority" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" group="common" description="Job priority. (0 is the highest see Beanstalk protocol)"/>
         <uriParameter name="jobTimeToRun" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60" group="common" description="Job time to run in seconds. (when 0 the beanstalkd daemon raises it to 1 automatically see Beanstalk protocol)"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="command" type="string" javaType="org.apache.camel.component.beanstalk.BeanstalkCommand" kind="parameter" choice="bury,release,put,touch,delete,kick" deprecated="false" group="common" description="put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header. delete release touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="connectionSettings" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Connection settings host:port/tube"/>
         <uriParameter name="useBlockIO" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether to use blockIO."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="jobDelay" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Job delay in seconds."/>
      </uriParameters>
   </component>
   <component>
      <id>hipchat</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
      </tags>
      <title>Hipchat</title>
      <description>The hipchat component supports producing and consuming messages from/to Hipchat service.</description>
      <syntax>hipchat:protocol:host:port</syntax>
      <class>org.apache.camel.component.hipchat.HipchatComponent</class>
      <kind>component</kind>
      <scheme>hipchat</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-hipchat-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="authToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 auth token"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The protocol for the hipchat server such as http."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" defaultValue="80" group="common" description="The port for the hipchat server. Is by default 80."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The host for the hipchat server such as api.hipchat.com"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="consumeUsers" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username(s) when consuming messages from the hiptchat server. Multiple user names can be separated by comma."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
      </uriParameters>
   </component>
   <component>
      <id>stax</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>StAX</title>
      <description>The stax component allows messages to be process through a SAX ContentHandler.</description>
      <syntax>stax:contentHandlerClass</syntax>
      <class>org.apache.camel.component.stax.StAXComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>stax</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stax-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentHandlerClass" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The FQN class name for the ContentHandler implementation to use."/>
      </uriParameters>
   </component>
   <component>
      <id>atmos</id>
      <tags>
         <tag>file</tag>
         <tag>cloud</tag>
      </tags>
      <title>Atmos</title>
      <description>The atmos component is used for integrating with EMC&apos;s Atomos Storage.</description>
      <syntax>atmos:name/operation</syntax>
      <class>org.apache.camel.component.atmos.AtmosComponent</class>
      <kind>component</kind>
      <scheme>atmos</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-atmos-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="remotePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Where to put files on Atmos"/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Atmos shared secret"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Search query on Atmos"/>
         <uriParameter name="enableSslValidation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Atmos SSL validation"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="uri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Atomos server uri"/>
         <uriParameter name="fullTokenId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Atmos client fullTokenId"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Atmos name"/>
         <uriParameter name="localPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Local path to put files"/>
         <uriParameter name="newRemotePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="New path on Atmos when moving files"/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.atmos.util.AtmosOperation" kind="path" choice="put,del,search,get,move" deprecated="false" required="true" group="common" description="Operation to perform"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>cm-sms</id>
      <tags>
         <tag>mobile</tag>
      </tags>
      <title>CM SMS Gateway</title>
      <description>The influxdb component allows to integrate with CM SMS Gateway.</description>
      <syntax>cm-sms:host</syntax>
      <class>org.apache.camel.component.cm.CMComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>cm-sms</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cm-sms-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="productToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="producer" description="The unique token to use"/>
         <uriParameter name="defaultFrom" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="This is the sender name. The maximum length is 11 characters."/>
         <uriParameter name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to test the connection to the SMS Gateway on startup"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="SMS Provider HOST with scheme"/>
         <uriParameter name="defaultMaxNumberOfParts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="8" group="producer" description="If it is a multipart message forces the max number. Message can be truncated. Technically the gateway will first check if a message is larger than 160 characters if so the message will be cut into multiple 153 characters parts limited by these parameters."/>
      </uriParameters>
   </component>
   <component>
      <id>splunk</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>Splunk</title>
      <description>The splunk component allows to publish or search for events in Splunk.</description>
      <syntax>splunk:name</syntax>
      <class>org.apache.camel.component.splunk.SplunkComponent</class>
      <kind>component</kind>
      <scheme>splunk</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-splunk-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="splunkConfigurationFactory" type="object" javaType="org.apache.camel.component.splunk.SplunkConfigurationFactory" kind="property" deprecated="false" description="To use the SplunkConfigurationFactory"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="scheme" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https" group="common" description="Splunk scheme"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="earliestTime" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Earliest time of the search time window."/>
         <uriParameter name="useSunHttpsHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Use sun.net.www.protocol.https.Handler Https handler to establish the Splunk Connection. Can be useful when running in application servers to avoid app. server https handling."/>
         <uriParameter name="source" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Splunk source argument"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="savedSearch" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The name of the query saved in Splunk to run"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password for Splunk"/>
         <uriParameter name="search" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Splunk query to run"/>
         <uriParameter name="streaming" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets streaming mode. Streaming mode sends exchanges as they are received rather than in a batch."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="localhost" group="common" description="Splunk host."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5000" group="common" description="Timeout in MS when connecting to Splunk server"/>
         <uriParameter name="tcpReceiverPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Splunk tcp receiver port"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="app" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Splunk app"/>
         <uriParameter name="owner" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Splunk owner"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="count" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="A number that indicates the maximum number of entities to return."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="index" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Splunk index to write to"/>
         <uriParameter name="raw" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Should the payload be inserted raw"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="8089" group="common" description="Splunk port"/>
         <uriParameter name="sourceType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Splunk sourcetype argument"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="initEarliestTime" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Initial start offset of the first search"/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name has no purpose"/>
         <uriParameter name="sslProtocol" type="string" javaType="com.splunk.SSLSecurityProtocol" kind="parameter" choice="TLSv1.2,TLSv1.1,TLSv1,SSLv3" deprecated="false" defaultValue="TLSv1.2" group="common" description="Set the ssl protocol to use"/>
         <uriParameter name="latestTime" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Latest time of the search time window."/>
         <uriParameter name="eventHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Override the default Splunk event host field"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username for Splunk"/>
      </uriParameters>
   </component>
   <component>
      <id>seda</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>SEDA</title>
      <description>The seda component provides asynchronous call to another endpoint from any CamelContext in the same JVM.</description>
      <syntax>seda:name</syntax>
      <class>org.apache.camel.component.seda.SedaComponent</class>
      <kind>component</kind>
      <scheme>seda</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="queueSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <componentProperty name="defaultQueueFactory" type="object" javaType="org.apache.camel.component.seda.BlockingQueueFactory&lt;org.apache.camel.Exchange&gt;" kind="property" deprecated="false" description="Sets the default queue factory."/>
         <componentProperty name="concurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="1" required="false" description="Sets the default number of concurrent threads processing exchanges."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="pollTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,advanced" group="consumer (advanced)" description="The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown."/>
         <uriParameter name="failIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="waitForTaskToComplete" type="string" javaType="org.apache.camel.WaitForTaskToComplete" kind="parameter" choice="Never,IfReplyExpected,Always" deprecated="false" defaultValue="IfReplyExpected" label="producer" group="producer" description="Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected."/>
         <uriParameter name="limitConcurrentConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off."/>
         <uriParameter name="blockWhenFull" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether a thread that sends messages to a full SEDA queue will block until the queue&apos;s capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent threads processing exchanges."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="size" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" group="common" description="The maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <uriParameter name="discardIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of queue"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="purgeWhenStopping" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded."/>
         <uriParameter name="multipleConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint."/>
         <uriParameter name="queue" type="object" javaType="java.util.concurrent.BlockingQueue" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance."/>
      </uriParameters>
   </component>
   <component>
      <id>lumberjack</id>
      <tags>
         <tag>log</tag>
      </tags>
      <title>Lumberjack</title>
      <description>The lumberjack retrieves logs sent over the network using the Lumberjack protocol.</description>
      <syntax>lumberjack:host:port</syntax>
      <class>org.apache.camel.component.lumberjack.LumberjackComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>lumberjack</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-lumberjack-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="Sets the default SSL configuration to use for all the endpoints. You can also configure it directly at the endpoint level."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="5044" group="consumer" description="Network port on which to listen for Lumberjack"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="Network interface on which to listen for Lumberjack"/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" group="consumer" description="SSL configuration"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>dataset</id>
      <tags>
         <tag>core</tag>
         <tag>testing</tag>
      </tags>
      <title>Dataset</title>
      <description>The dataset component provides a mechanism to easily perform load &amp; soak testing of your system.</description>
      <syntax>dataset:name</syntax>
      <class>org.apache.camel.component.dataset.DataSetComponent</class>
      <kind>component</kind>
      <scheme>dataset</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="consumeDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows a delay to be specified which causes a delay when a message is consumed by the producer (to simulate slow processing)"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="preloadSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Sets how many messages should be preloaded (sent) before the route completes its initialization"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer" group="consumer" description="Time period in millis to wait before starting sending messages."/>
         <uriParameter name="expectedCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n&apos;th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details."/>
         <uriParameter name="retainLast" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the last n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
         <uriParameter name="assertPeriod" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled."/>
         <uriParameter name="resultMinimumWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="reportGroup" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="A number that is used to turn on throughput logging based on groups of the size."/>
         <uriParameter name="sleepForEmptyTest" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="name" type="object" javaType="org.apache.camel.component.dataset.DataSet" kind="path" deprecated="false" required="true" group="common" description="Name of DataSet to lookup in the registry"/>
         <uriParameter name="dataSetIndex" type="string" javaType="java.lang.String" kind="parameter" choice="strict,lenient,off" deprecated="false" defaultValue="lenient" group="common" description="Controls the behaviour of the CamelDataSetIndex header. For Consumers: - off = the header will not be set - strict/lenient = the header will be set For Producers: - off = the header value will not be verified and will not be set if it is not present = strict = the header value must be present and will be verified = lenient = the header value will be verified if it is present and will be set if it is not present"/>
         <uriParameter name="minRate" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Wait until the DataSet contains at least this number of messages"/>
         <uriParameter name="copyOnExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="produceDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="3" label="consumer" group="consumer" description="Allows a delay to be specified which causes a delay when a message is sent by the consumer (to simulate slow processing)"/>
         <uriParameter name="resultWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="retainFirst" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the first n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
      </uriParameters>
   </component>
   <component>
      <id>kubernetes</id>
      <tags>
         <tag>container</tag>
         <tag>cloud</tag>
         <tag>paas</tag>
      </tags>
      <title>Kubernetes</title>
      <description>The kubernetes component allows to work with Kubernetes PaaS.</description>
      <syntax>kubernetes:masterUrl</syntax>
      <class>org.apache.camel.component.kubernetes.KubernetesComponent</class>
      <kind>component</kind>
      <scheme>kubernetes</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-kubernetes-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="caCertData" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The CA Cert Data"/>
         <uriParameter name="portName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The port name used for ServiceCall EIP"/>
         <uriParameter name="dnsDomain" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The dns domain used for ServiceCall EIP"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to connect to Kubernetes"/>
         <uriParameter name="apiVersion" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The Kubernetes API Version to use"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="clientCertData" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Client Cert Data"/>
         <uriParameter name="caCertFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The CA Cert File"/>
         <uriParameter name="clientKeyFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Client Key file"/>
         <uriParameter name="kubernetesClient" type="object" javaType="io.fabric8.kubernetes.client.DefaultKubernetesClient" kind="parameter" deprecated="false" group="common" description="Default KubernetesClient to use if provided"/>
         <uriParameter name="poolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="The Consumer pool size"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="resourceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Consumer Resource Name we would like to watch"/>
         <uriParameter name="oauthToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Auth Token"/>
         <uriParameter name="clientKeyAlgo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Key Algorithm used by the client"/>
         <uriParameter name="clientCertFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Client Cert File"/>
         <uriParameter name="clientKeyData" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Client Key data"/>
         <uriParameter name="masterUrl" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Kubernetes Master url"/>
         <uriParameter name="namespace" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The namespace"/>
         <uriParameter name="labelValue" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Consumer Label value when watching at some resources"/>
         <uriParameter name="category" type="string" javaType="java.lang.String" kind="parameter" choice="namespaces,services,replicationControllers,pods,persistentVolumes,persistentVolumesClaims,secrets,resourcesQuota,serviceAccounts,nodes,configMaps,builds,buildConfigs" deprecated="false" required="true" group="common" description="Kubernetes Producer and Consumer category"/>
         <uriParameter name="labelKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Consumer Label key when watching at some resources"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="listNamespaces,listNamespacesByLabels,getNamespace,createNamespace,deleteNamespace,listServices,listServicesByLabels,getService,createService,deleteService,listReplicationControllers,listReplicationControllersByLabels,getReplicationController,createReplicationController,deleteReplicationController,scaleReplicationController,listPods,listPodsByLabels,getPod,createPod,deletePod,listPersistentVolumes,listPersistentVolumesByLabels,getPersistentVolume,listPersistentVolumesClaims,listPersistentVolumesClaimsByLabels,getPersistentVolumeClaim,createPersistentVolumeClaim,deletePersistentVolumeClaim,listSecrets,listSecretsByLabels,getSecret,createSecret,deleteSecret,listResourcesQuota,listResourcesQuotaByLabels,getResourceQuota,createResourceQuota,deleteResourceQuota,listServiceAccounts,listServiceAccountsByLabels,getServiceAccount,createServiceAccount,deleteServiceAccount,listNodes,listNodesByLabels,getNode,listConfigMaps,listConfigMapsByLabels,getConfigMap,createConfigMap,deleteConfigMap,listBuilds,listBuildsByLabels,getBuild,listBuildConfigs,listBuildConfigsByLabels,getBuildConfig" deprecated="false" label="producer" group="producer" description="Producer operation to do on Kubernetes"/>
         <uriParameter name="clientKeyPassphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The Client Key Passphrase"/>
         <uriParameter name="trustCerts" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Define if the certs we used are trusted anyway or not"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to connect to Kubernetes"/>
      </uriParameters>
   </component>
   <component>
      <id>bean-validator</id>
      <tags>
         <tag>validation</tag>
      </tags>
      <title>Bean Validator</title>
      <description>The Validator component performs bean validation of the message body using the Java Bean Validation API.</description>
      <syntax>bean-validator:label</syntax>
      <class>org.apache.camel.component.bean.validator.BeanValidatorComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>bean-validator</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-bean-validator-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="messageInterpolator" type="object" javaType="javax.validation.MessageInterpolator" kind="parameter" deprecated="false" group="producer" description="To use a custom MessageInterpolator"/>
         <uriParameter name="validationProviderResolver" type="object" javaType="javax.validation.ValidationProviderResolver" kind="parameter" deprecated="false" group="producer" description="To use a a custom ValidationProviderResolver"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="constraintValidatorFactory" type="object" javaType="javax.validation.ConstraintValidatorFactory" kind="parameter" deprecated="false" group="producer" description="To use a custom ConstraintValidatorFactory"/>
         <uriParameter name="label" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Where label is an arbitrary text value describing the endpoint"/>
         <uriParameter name="traversableResolver" type="object" javaType="javax.validation.TraversableResolver" kind="parameter" deprecated="false" group="producer" description="To use a custom TraversableResolver"/>
         <uriParameter name="group" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="javax.validation.groups.Default" group="producer" description="To use a custom validation group"/>
      </uriParameters>
   </component>
   <component>
      <id>validator</id>
      <tags>
         <tag>core</tag>
         <tag>validation</tag>
      </tags>
      <title>Validator</title>
      <description>Validates the payload of a message using XML Schema and JAXP Validation.</description>
      <syntax>validator:resourceUri</syntax>
      <class>org.apache.camel.component.validator.ValidatorComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>validator</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="resourceResolverFactory" type="object" javaType="org.apache.camel.component.validator.ValidatorResourceResolverFactory" kind="property" deprecated="false" label="advanced" required="false" description="To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="useDom" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether DOMSource/DOMResult or SaxSource/SaxResult should be used by the validator."/>
         <uriParameter name="headerName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To validate against a header instead of the message body."/>
         <uriParameter name="resourceResolver" type="object" javaType="org.w3c.dom.ls.LSResourceResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom LSResourceResolver. See also link setResourceResolverFactory(ValidatorResourceResolverFactory)"/>
         <uriParameter name="schemaFactory" type="object" javaType="javax.xml.validation.SchemaFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom javax.xml.validation.SchemaFactory"/>
         <uriParameter name="failOnNullHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to fail if no header exists when validating against a header."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="useSharedSchema" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Whether the Schema instance should be shared or not. This option is introduced to work around a JDK 1.6.x bug. Xerces should not have this issue."/>
         <uriParameter name="failOnNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to fail if no body exists."/>
         <uriParameter name="errorHandler" type="object" javaType="org.apache.camel.processor.validation.ValidatorErrorHandler" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler. The default error handler captures the errors and throws an exception."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="URL to a local resource on the classpathor a reference to lookup a bean in the Registry or a full URL to a remote resource or resource on the file system which contains the XSD to validate against."/>
         <uriParameter name="schemaLanguage" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="http://www.w3.org/2001/XMLSchema" label="advanced" group="advanced" description="Configures the W3C XML Schema Namespace URI."/>
         <uriParameter name="resourceResolverFactory" type="object" javaType="org.apache.camel.component.validator.ValidatorResourceResolverFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="For creating a resource resolver which depends on the endpoint resource URI. Must not be used in combination with method link setResourceResolver(LSResourceResolver). If not set then DefaultValidatorResourceResolverFactory is used"/>
      </uriParameters>
   </component>
   <component>
      <id>language</id>
      <tags>
         <tag>core</tag>
         <tag>script</tag>
      </tags>
      <title>Language</title>
      <description>The language component allows you to send a message to an endpoint which executes a script by any of the supported Languages in Camel.</description>
      <syntax>language:languageName:resourceUri</syntax>
      <class>org.apache.camel.component.language.LanguageComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>language</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="transform" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether or not the result of the script should be used as message body. This options is default true."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binary" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether the script is binary content or text content. By default the script is read as text content (eg java.lang.String)"/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="false" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="cacheScript" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to cache the compiled script and reuse Notice reusing the script can cause side effects from processing one Camel org.apache.camel.Exchange to the next org.apache.camel.Exchange."/>
         <uriParameter name="languageName" type="string" javaType="java.lang.String" kind="path" choice="bean,constant,el,exchangeProperty,file,groovy,header,javascript,jsonpath,jxpath,mvel,ognl,php,python,ref,ruby,simple,spel,sql,terser,tokenize,xpath,xquery,xtokenize" deprecated="false" required="true" group="producer" description="Sets the name of the language to use"/>
         <uriParameter name="script" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the script to execute"/>
      </uriParameters>
   </component>
   <component>
      <id>paho</id>
      <tags>
         <tag>messaging</tag>
         <tag>iot</tag>
      </tags>
      <title>Paho</title>
      <description>Component for communicating with MQTT M2M message brokers using Eclipse Paho MQTT Client.</description>
      <syntax>paho:topic</syntax>
      <class>org.apache.camel.component.paho.PahoComponent</class>
      <kind>component</kind>
      <scheme>paho</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-paho-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="brokerUrl" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The URL of the MQTT broker."/>
         <componentProperty name="connectOptions" type="object" javaType="org.eclipse.paho.client.mqttv3.MqttConnectOptions" kind="property" deprecated="false" description="Client connection options"/>
         <componentProperty name="clientId" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="MQTT client identifier."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="brokerUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="tcp://localhost:1883" group="common" description="The URL of the MQTT broker."/>
         <uriParameter name="retained" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Retain option"/>
         <uriParameter name="connectOptions" type="object" javaType="org.eclipse.paho.client.mqttv3.MqttConnectOptions" kind="parameter" deprecated="false" group="common" description="Client connection options"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="MQTT client identifier."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="qos" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2" group="common" description="Client quality of service level (0-2)."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="topic" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the topic"/>
         <uriParameter name="filePersistenceDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="Current directory" group="common" description="Base directory used by the file persistence provider."/>
         <uriParameter name="persistence" type="string" javaType="org.apache.camel.component.paho.PahoPersistence" kind="parameter" choice="FILE,MEMORY" deprecated="false" defaultValue="MEMORY" group="common" description="Client persistence to be used - memory or file."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>cxf</id>
      <tags>
         <tag>soap</tag>
         <tag>webservice</tag>
      </tags>
      <title>CXF</title>
      <description>The cxf component is used for SOAP WebServices using Apache CXF.</description>
      <syntax>cxf:beanId:address</syntax>
      <class>org.apache.camel.component.cxf.CxfComponent</class>
      <kind>component</kind>
      <scheme>cxf</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cxf-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="allowStreaming" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="This option controls whether the CXF component when running in PAYLOAD mode will DOM parse the incoming messages into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bus" type="object" javaType="org.apache.cxf.Bus" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured CXF Bus."/>
         <uriParameter name="cxfBinding" type="object" javaType="org.apache.camel.component.cxf.CxfBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom CxfBinding to control the binding between Camel Message and CXF Message."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="mtomEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="To enable MTOM (attachments). This requires to use POJO or PAYLOAD data format mode."/>
         <uriParameter name="hostnameVerifier" type="object" javaType="javax.net.ssl.HostnameVerifier" kind="parameter" deprecated="false" label="producer" group="producer" description="The hostname verifier to be used. Use the notation to reference a HostnameVerifier from the registry."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="producer" group="producer" description="The Camel SSL setting reference. Use the notation to reference the SSL Context."/>
         <uriParameter name="portName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="service" group="service" description="The endpoint name this service is implementing it maps to the wsdl:portname. In the format of ns:PORT_NAME where ns is a namespace prefix valid at this scope."/>
         <uriParameter name="defaultBus" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Will set the default bus when CXF endpoint create a bus by itself"/>
         <uriParameter name="mergeProtocolHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to merge protocol headers. If enabled then propagating headers between Camel and CXF becomes more consistent and similar. For more details see CAMEL-6393."/>
         <uriParameter name="cxfEndpointConfigurer" type="object" javaType="org.apache.camel.component.cxf.CxfEndpointConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="This option could apply the implementation of org.apache.camel.component.cxf.CxfEndpointConfigurer which supports to configure the CXF endpoint in programmatic way. User can configure the CXF server and client by implementing configureServerClient method of CxfEndpointConfigurer."/>
         <uriParameter name="defaultOperationName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option will set the default operationName that will be used by the CxfProducer which invokes the remote service."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="This option is used to set the basic authentication information of password for the CXF client."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="loggingSizeLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="49152" label="logging" group="logging" description="To limit the total size of number of bytes the logger will output when logging feature has been enabled and -1 for no limit."/>
         <uriParameter name="wrappedStyle" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="The WSDL style that describes how parameters are represented in the SOAP body. If the value is false CXF will chose the document-literal unwrapped style If the value is true CXF will chose the document-literal wrapped style"/>
         <uriParameter name="bindingId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="service" group="service" description="The bindingId for the service model to use."/>
         <uriParameter name="beanId" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="To lookup an existing configured CxfEndpoint. Must used bean: as prefix."/>
         <uriParameter name="wrapped" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Which kind of operation that CXF endpoint producer will invoke"/>
         <uriParameter name="wsdlURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="service" group="service" description="The location of the WSDL. Can be on the classpath file system or be hosted remotely."/>
         <uriParameter name="defaultOperationNamespace" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option will set the default operationNamespace that will be used by the CxfProducer which invokes the remote service."/>
         <uriParameter name="address" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="service" group="service" description="The service publish address."/>
         <uriParameter name="skipFaultLogging" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="logging" group="logging" description="This option controls whether the PhaseInterceptorChain skips logging the Fault that it catches."/>
         <uriParameter name="serviceClass" type="string" javaType="java.lang.Class&lt;?&gt;" kind="parameter" deprecated="false" label="service" group="service" description="The class name of the SEI (Service Endpoint Interface) class which could have JSR181 annotation or not."/>
         <uriParameter name="dataFormat" type="string" javaType="org.apache.camel.component.cxf.DataFormat" kind="parameter" choice="PAYLOAD,RAW,MESSAGE,CXF_MESSAGE,POJO" deprecated="false" defaultValue="POJO" group="common" description="The data type messages supported by the CXF endpoint."/>
         <uriParameter name="continuationTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="This option is used to set the CXF continuation timeout which could be used in CxfConsumer by default when the CXF server is using Jetty or Servlet transport."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="allowStreaming" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="This option controls whether the CXF component when running in PAYLOAD mode will DOM parse the incoming messages into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases."/>
         <uriParameter name="serviceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="service" group="service" description="The service name this service is implementing it maps to the wsdl:servicename."/>
         <uriParameter name="loggingFeatureEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="logging" group="logging" description="This option enables CXF Logging Feature which writes inbound and outbound SOAP messages to log."/>
         <uriParameter name="publishedEndpointUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="service" group="service" description="This option can override the endpointUrl that published from the WSDL which can be accessed with service address url plus wsd"/>
         <uriParameter name="skipPayloadMessagePartCheck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether SOAP message validation should be disabled."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="properties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To set additional CXF options using the key/value pairs from the Map. For example to turn on stacktraces in SOAP faults properties.faultStackTraceEnabled=true"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="This option is used to set the basic authentication information of username for the CXF client."/>
      </uriParameters>
   </component>
   <component>
      <id>ref</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>Ref</title>
      <description>The ref component is used for lookup of existing endpoints bound in the Registry.</description>
      <syntax>ref:name</syntax>
      <class>org.apache.camel.component.ref.RefComponent</class>
      <kind>component</kind>
      <scheme>ref</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of endpoint to lookup in the registry."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>xmlrpc</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>XML RPC</title>
      <description>The xmlrpc component is used for sending messages to a XML RPC service.</description>
      <syntax>xmlrpc:address</syntax>
      <class>org.apache.camel.component.xmlrpc.XmlRpcComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>xmlrpc</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xmlrpc-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="address" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The server url"/>
         <uriParameter name="contentLengthOptional" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether a Content-Length header may be omitted. The XML-RPC specification demands that such a header be present."/>
         <uriParameter name="enabledForExceptions" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether the response should contain a faultCause element in case of errors. The faultCause is an exception which the server has trapped and written into a byte stream as a serializable object."/>
         <uriParameter name="basicUserName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The user name for basic authentication."/>
         <uriParameter name="basicEncoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the encoding for basic authentication null means UTF-8 is chosen."/>
         <uriParameter name="defaultMethodName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The method name which would be used for the xmlrpc requests by default if the Message header CamelXmlRpcMethodName is not set."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="basicPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for basic authentication."/>
         <uriParameter name="timeZone" type="object" javaType="java.util.TimeZone" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The timezone which is used to interpret date/time. Defaults to link TimeZonegetDefault()."/>
         <uriParameter name="userAgent" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The http user agent header to set when doing xmlrpc requests"/>
         <uriParameter name="clientConfig" type="object" javaType="org.apache.xmlrpc.client.XmlRpcClientConfigImpl" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use the given XmlRpcClientConfigImpl as configuration for the client."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the requests encoding null means UTF-8 is chosen."/>
         <uriParameter name="gzipRequesting" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether gzip compression is being used for transmitting the request."/>
         <uriParameter name="xmlRpcServer" type="object" javaType="org.apache.xmlrpc.common.XmlRpcRequestProcessor" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom XmlRpcRequestProcessor as server."/>
         <uriParameter name="gzipCompressing" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether gzip compression is being used for transmitting the request."/>
         <uriParameter name="enabledForExtensions" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether extensions are enabled. By default the client or server is strictly compliant to the XML-RPC specification and extensions are disabled."/>
         <uriParameter name="replyTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="Set the reply timeout in milliseconds 0 is to disable it."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="Set the connection timeout in milliseconds 0 is to disable it"/>
         <uriParameter name="clientConfigurer" type="object" javaType="org.apache.camel.component.xmlrpc.XmlRpcClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom XmlRpcClientConfigurer to configure the client"/>
      </uriParameters>
   </component>
   <component>
      <id>stub</id>
      <tags>
         <tag>core</tag>
         <tag>testing</tag>
      </tags>
      <title>Stub</title>
      <description>The stub component provides a simple way to stub out any physical endpoints while in development or testing.</description>
      <syntax>stub:name</syntax>
      <class>org.apache.camel.component.stub.StubComponent</class>
      <kind>component</kind>
      <scheme>stub</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="queueSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <componentProperty name="defaultQueueFactory" type="object" javaType="org.apache.camel.component.seda.BlockingQueueFactory&lt;org.apache.camel.Exchange&gt;" kind="property" deprecated="false" description="Sets the default queue factory."/>
         <componentProperty name="concurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="1" required="false" description="Sets the default number of concurrent threads processing exchanges."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="pollTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,advanced" group="consumer (advanced)" description="The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown."/>
         <uriParameter name="failIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="waitForTaskToComplete" type="string" javaType="org.apache.camel.WaitForTaskToComplete" kind="parameter" choice="Never,IfReplyExpected,Always" deprecated="false" defaultValue="IfReplyExpected" label="producer" group="producer" description="Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected."/>
         <uriParameter name="limitConcurrentConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off."/>
         <uriParameter name="blockWhenFull" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether a thread that sends messages to a full SEDA queue will block until the queue&apos;s capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent threads processing exchanges."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="size" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" group="common" description="The maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <uriParameter name="discardIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of queue"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="purgeWhenStopping" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded."/>
         <uriParameter name="multipleConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint."/>
         <uriParameter name="queue" type="object" javaType="java.util.concurrent.BlockingQueue" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance."/>
      </uriParameters>
   </component>
   <component>
      <id>netty-http</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>Netty HTTP</title>
      <description>Netty HTTP server and client using the Netty 3.x library.</description>
      <syntax>netty-http:protocol:host:port/path</syntax>
      <class>org.apache.camel.component.netty.http.NettyHttpComponent</class>
      <kind>component</kind>
      <extendsScheme>netty</extendsScheme>
      <scheme>netty-http</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-netty-http-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="nettyHttpBinding" type="object" javaType="org.apache.camel.component.netty.http.NettyHttpBinding" kind="property" deprecated="false" description="To use a custom org.apache.camel.component.netty.http.NettyHttpBinding for binding to/from Netty and Camel Message API."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.netty.NettyConfiguration" kind="property" deprecated="false" description="To use the NettyConfiguration as configuration when creating endpoints."/>
         <componentProperty name="maximumPoolSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The core pool size for the ordered thread pool if its in use. The default value is 16."/>
         <componentProperty name="securityConfiguration" type="object" javaType="org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration" kind="property" deprecated="false" description="Refers to a org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration for configuring secure web resources."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer."/>
         <uriParameter name="enabledProtocols" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLSv1,TLSv1.1,TLSv1.2" label="security" group="security" description="Which protocols to enable when using SSL"/>
         <uriParameter name="maxChannelMemorySize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10485760" label="consumer,advanced" group="consumer (advanced)" description="The maximum total size of the queued events per channel when using orderedThreadPoolExecutor. Specify 0 to disable."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="nettySharedHttpServer" type="object" javaType="org.apache.camel.component.netty.http.NettySharedHttpServer" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a shared Netty HTTP server. See Netty HTTP Server Example for more details."/>
         <uriParameter name="keyStoreFormat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="JKS" label="security" group="security" description="Keystore format to be used for payload encryption. Defaults to JKS if not set"/>
         <uriParameter name="producerPoolMinIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects."/>
         <uriParameter name="ssl" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Setting to specify whether SSL encryption is applied to this endpoint"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Resource path"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="http,https" deprecated="false" required="true" group="common" description="The protocol to use which is either http or https"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="SunX509" label="security" group="security" description="Security provider to be used for payload encryption. Defaults to SunX509 if not set."/>
         <uriParameter name="useRelativePath" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Sets whether to use a relative path in HTTP requests. Some third party backend systems such as IBM Datapower do not support absolute URIs in HTTP POSTs and setting this option to true can work around this problem."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="bossPool" type="object" javaType="org.jboss.netty.channel.socket.nio.BossPool" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit org.jboss.netty.channel.socket.nio.BossPool as the boss thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own boss pool with 1 core thread."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The local hostname such as localhost or 0.0.0.0 when being a consumer. The remote HTTP server hostname when using producer."/>
         <uriParameter name="connectTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="producer" group="producer" description="Time to wait for a socket connection to be available. Value is in millis."/>
         <uriParameter name="options" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used."/>
         <uriParameter name="producerPoolMinEvictableIdle" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300000" label="producer,advanced" group="producer (advanced)" description="Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If the option is true the producer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back. The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange)."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to improve TCP protocol performance"/>
         <uriParameter name="needClientAuth" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,security" group="security" description="Configures whether the server needs client authentication when using SSL."/>
         <uriParameter name="sslHandler" type="object" javaType="org.jboss.netty.handler.ssl.SslHandler" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a class that could be used to return an SSL Handler"/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="encoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="keyStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption"/>
         <uriParameter name="decoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="reuseAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to facilitate socket multiplexing"/>
         <uriParameter name="decoder" type="object" javaType="org.jboss.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="To use a single decoder. This options is deprecated use encoders instead."/>
         <uriParameter name="workerPool" type="object" javaType="org.jboss.netty.channel.socket.nio.WorkerPool" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit org.jboss.netty.channel.socket.nio.WorkerPool as the worker thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own worker pool with 2 x cpu count core threads."/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to set endpoint as one-way or request-response"/>
         <uriParameter name="encoder" type="object" javaType="org.jboss.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="To use a single encoder. This options is deprecated use encoders instead."/>
         <uriParameter name="securityOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,security" group="security" description="To configure NettyHttpSecurityConfiguration using key/value pairs from the map"/>
         <uriParameter name="workerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty"/>
         <uriParameter name="backlog" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting."/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Determines whether or not the raw input stream from Netty HttpRequestgetContent() is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache. By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. Mind that if you enable this option then you cannot read the Netty stream multiple times out of the box and you would need manually to reset the reader index on the Netty raw stream."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The host port number"/>
         <uriParameter name="passphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password setting to use in order to encrypt/decrypt payloads sent using SSH"/>
         <uriParameter name="compression" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers."/>
         <uriParameter name="nettyServerBootstrapFactory" type="object" javaType="org.apache.camel.component.netty.NettyServerBootstrapFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom NettyServerBootstrapFactory"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityConfiguration" type="object" javaType="org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration" kind="parameter" deprecated="false" label="consumer,security" group="security" description="Refers to a org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration for configuring secure web resources."/>
         <uriParameter name="trustStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="bossCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty"/>
         <uriParameter name="sslClientCertHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range."/>
         <uriParameter name="configuration" type="object" javaType="org.apache.camel.component.netty.http.NettyHttpConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyHttpConfiguration for configuring this endpoint."/>
         <uriParameter name="disconnectOnNoReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="keyStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="maxHeaderSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="8192" label="consumer,advanced" group="consumer (advanced)" description="The maximum length of all headers. If the sum of the length of each header exceeds this value a TooLongFrameException will be raised."/>
         <uriParameter name="serverPipelineFactory" type="object" javaType="org.apache.camel.component.netty.ServerPipelineFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom ServerPipelineFactory"/>
         <uriParameter name="producerPoolMaxIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of idle instances in the pool."/>
         <uriParameter name="maxTotalMemorySize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="209715200" label="consumer,advanced" group="consumer (advanced)" description="The maximum total size of the queued events for this pool when using orderedThreadPoolExecutor. Specify 0 to disable."/>
         <uriParameter name="producerPoolEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether producer pool is enabled or not. Important: Do not turn this off as the pooling is needed for handling concurrency and reliable request/reply."/>
         <uriParameter name="trustStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption"/>
         <uriParameter name="chunkedMaxContentLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1048576" label="consumer,advanced" group="consumer (advanced)" description="Value in bytes the max content length per chunked frame received on the Netty HTTP server."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="noReplyLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back."/>
         <uriParameter name="urlDecodeHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="If this option is enabled then during binding from Netty to Camel Message then the header values will be URL decoded (eg 20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding and therefore if you implement a custom org.apache.camel.component.netty.http.NettyHttpBinding then you would need to decode the headers accordingly to this option."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="useChannelBuffer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If the useChannelBuffer is true netty producer will turn the message body into ChannelBuffer before sending it out."/>
         <uriParameter name="mapHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If this option is enabled then during binding from Netty to Camel Message then the headers will be mapped as well (eg added as header to the Camel Message as well). You can turn off this option to disable this. The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with the method getHttpRequest() that returns the Netty HTTP request org.jboss.netty.handler.codec.http.HttpRequest instance."/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty&apos;s ReadTimeoutHandler to trigger the timeout."/>
         <uriParameter name="clientPipelineFactory" type="object" javaType="org.apache.camel.component.netty.ClientPipelineFactory" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="To use a custom ClientPipelineFactory"/>
         <uriParameter name="receiveBufferSizePredictor" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Configures the buffer size predictor. See details at Jetty documentation and this mail thread."/>
         <uriParameter name="keepAlive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to ensure socket is not closed due to inactivity"/>
         <uriParameter name="producerPoolMaxActive" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit."/>
         <uriParameter name="nettyHttpBinding" type="object" javaType="org.apache.camel.component.netty.http.NettyHttpBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.component.netty.http.NettyHttpBinding for binding to/from Netty and Camel Message API."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To disable HTTP methods on the Netty HTTP consumer. You can specify multiple separated by comma."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="sendBufferSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="lazyChannelCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started."/>
         <uriParameter name="channelGroup" type="object" javaType="org.jboss.netty.channel.group.ChannelGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit ChannelGroup."/>
         <uriParameter name="orderedThreadPoolExecutor" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to use ordered thread pool to ensure events are processed orderly on the same channel. See details at the netty javadoc of org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor for more details."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer,advanced" group="producer (advanced)" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included. The default range is 200-299"/>
         <uriParameter name="send503whenSuspended" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether to send back HTTP status code 503 when the consumer has been suspended. If the option is false then the Netty Acceptor is unbound when the consumer is suspended so clients cannot connect anymore."/>
         <uriParameter name="bootstrapConfiguration" type="object" javaType="org.apache.camel.component.netty.NettyServerBootstrapConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes."/>
         <uriParameter name="serverClosedChannelExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="DEBUG" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server."/>
         <uriParameter name="serverExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an exception then its logged using this logging level."/>
         <uriParameter name="traceEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether to enable HTTP TRACE for this Netty HTTP consumer. By default TRACE is turned off."/>
      </uriParameters>
   </component>
   <component>
      <id>solrCloud</id>
      <tags>
         <tag>monitoring</tag>
         <tag>search</tag>
      </tags>
      <title>Solr</title>
      <description>The solr component allows you to interface with an Apache Lucene Solr server.</description>
      <syntax>solrCloud:url</syntax>
      <class>org.apache.camel.component.solr.SolrComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>solrCloud</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-solr-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="defaultMaxConnectionsPerHost" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxConnectionsPerHost on the underlying HttpConnectionManager"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="maxTotalConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxTotalConnection on the underlying HttpConnectionManager"/>
         <uriParameter name="streamingThreadCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2" group="producer" description="Set the number of threads for the StreamingUpdateSolrServer"/>
         <uriParameter name="collection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the collection name which the solrCloud server could use"/>
         <uriParameter name="zkHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the ZooKeeper host information which the solrCloud could use such as zkhost=localhost:8123."/>
         <uriParameter name="soTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Read timeout on the underlying HttpConnectionManager. This is desirable for queries but probably not for indexing"/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Hostname and port for the solr server"/>
         <uriParameter name="maxRetries" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Maximum number of retries to attempt in the event of transient errors"/>
         <uriParameter name="allowCompression" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Server side must support gzip or deflate for this to have any effect"/>
         <uriParameter name="requestHandler" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Set the request handler to be used"/>
         <uriParameter name="followRedirects" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="indicates whether redirects are used to get to the Solr server"/>
         <uriParameter name="streamingQueueSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" group="producer" description="Set the queue size for the StreamingUpdateSolrServer"/>
         <uriParameter name="connectionTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="connectionTimeout on the underlying HttpConnectionManager"/>
      </uriParameters>
   </component>
   <component>
      <id>test</id>
      <tags>
         <tag>core</tag>
         <tag>testing</tag>
      </tags>
      <title>Test</title>
      <description>The test component extends the mock component by on startup to pull messages from another endpoint to set the expected message bodies.</description>
      <syntax>test:name</syntax>
      <class>org.apache.camel.component.test.TestComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>test</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="anyOrder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether the expected messages should arrive in the same order or can be in any order."/>
         <uriParameter name="expectedCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n&apos;th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details."/>
         <uriParameter name="retainLast" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the last n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
         <uriParameter name="assertPeriod" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled."/>
         <uriParameter name="resultMinimumWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="2000" group="producer" description="The timeout to use when polling for message bodies from the URI"/>
         <uriParameter name="reportGroup" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="A number that is used to turn on throughput logging based on groups of the size."/>
         <uriParameter name="sleepForEmptyTest" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero"/>
         <uriParameter name="split" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled the the messages loaded from the test endpoint will be split using \n\r delimiters (new lines) so each line is an expected message. For example to use a file endpoint to load a file where each line is an expected message."/>
         <uriParameter name="delimiter" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The split delimiter to use when split is enabled. By default the delimiter is new line based. The delimiter can be a regular expression."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of endpoint to lookup in the registry to use for polling messages used for testing"/>
         <uriParameter name="copyOnExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true."/>
         <uriParameter name="resultWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="retainFirst" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the first n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
      </uriParameters>
   </component>
   <component>
      <id>gridfs</id>
      <tags>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>MongoDBGridFS</title>
      <description>Component for working with MongoDB GridFS.</description>
      <syntax>gridfs:connectionBean</syntax>
      <class>org.apache.camel.component.gridfs.GridFsComponent</class>
      <kind>component</kind>
      <scheme>gridfs</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mongodb-gridfs-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="connectionBean" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of com.mongodb.Mongo to use."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Additional query parameters (in JSON) that are used to configure the query used for finding files in the GridFsConsumer"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="writeConcernRef" type="object" javaType="com.mongodb.WriteConcern" kind="parameter" deprecated="false" group="common" description="Set the WriteConcern for write operations on MongoDB passing in the bean ref to a custom WriteConcern which exists in the Registry. You can also use standard WriteConcerns by passing in their key. See the link setWriteConcern(String) setWriteConcern method."/>
         <uriParameter name="writeConcern" type="string" javaType="com.mongodb.WriteConcern" kind="parameter" choice="ACKNOWLEDGED,W1,W2,W3,UNACKNOWLEDGED,JOURNALED,MAJORITY,SAFE" deprecated="false" group="common" description="Set the WriteConcern for write operations on MongoDB using the standard ones. Resolved from the fields of the WriteConcern class by calling the link WriteConcernvalueOf(String) method."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer" group="consumer" description="Sets the initialDelay before the consumer will start polling. Default is 1000ms"/>
         <uriParameter name="queryStrategy" type="object" javaType="org.apache.camel.component.gridfs.GridFsEndpoint.QueryStrategy" kind="parameter" deprecated="false" defaultValue="TimeStamp" label="consumer" group="consumer" description="Sets the QueryStrategy that is used for polling for new files. Default is Timestamp"/>
         <uriParameter name="bucket" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="fs" group="common" description="Sets the name of the GridFS bucket within the database. Default is fs."/>
         <uriParameter name="database" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="Sets the name of the MongoDB database to target"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer" group="consumer" description="Sets the delay between polls within the Consumer. Default is 500ms"/>
         <uriParameter name="persistentTSCollection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel-timestamps" label="consumer" group="consumer" description="If the QueryType uses a persistent timestamp this sets the name of the collection within the DB to store the timestamp."/>
         <uriParameter name="readPreference" type="object" javaType="com.mongodb.ReadPreference" kind="parameter" deprecated="false" group="common" description="Sets a MongoDB ReadPreference on the Mongo connection. Read preferences set directly on the connection will be overridden by this setting. The link com.mongodb.ReadPreferencevalueOf(String) utility method is used to resolve the passed readPreference value. Some examples for the possible values are nearest primary or secondary etc."/>
         <uriParameter name="fileAttributeName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel-processed" label="consumer" group="consumer" description="If the QueryType uses a FileAttribute this sets the name of the attribute that is used. Default is camel-processed."/>
         <uriParameter name="persistentTSObject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel-timestamp" label="consumer" group="consumer" description="If the QueryType uses a persistent timestamp this is the ID of the object in the collection to store the timestamp."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the operation this endpoint will execute against GridRS."/>
      </uriParameters>
   </component>
   <component>
      <id>grape</id>
      <tags>
         <tag>management</tag>
         <tag>deployment</tag>
      </tags>
      <title>Grape</title>
      <description>Grape component allows you to fetch, load and manage additional jars when CamelContext is running.</description>
      <syntax>grape:defaultCoordinates</syntax>
      <class>org.apache.camel.component.grape.GrapeEndpoint</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>grape</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-grape-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="defaultCoordinates" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" description="Maven coordinates to use as default to grab if the message body is empty."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" defaultValue="InOnly" description="Sets the default exchange pattern when creating an exchange."/>
      </uriParameters>
   </component>
   <component>
      <id>restlet</id>
      <tags>
         <tag>rest</tag>
      </tags>
      <title>Restlet</title>
      <description>Component for consuming and producing Restful resources using Restlet.</description>
      <syntax>restlet:protocol:host:port/uriPattern</syntax>
      <class>org.apache.camel.component.restlet.RestletComponent</class>
      <kind>component</kind>
      <scheme>restlet</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-restlet-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="controllerDaemon" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Indicates if the controller thread should be a daemon (not blocking JVM exit)."/>
         <componentProperty name="inboundBufferSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="The size of the buffer when reading messages."/>
         <componentProperty name="useForwardedForHeader" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Lookup the X-Forwarded-For header supported by popular proxies and caches and uses it to populate the Request.getClientAddresses() method result. This information is only safe for intermediary components within your local network. Other addresses could easily be changed by setting a fake header and should not be trusted for serious security checks."/>
         <componentProperty name="minThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Minimum threads waiting to service requests."/>
         <componentProperty name="synchronous" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to use synchronous Restlet Client for the producer. Setting this option to true can yield faster performance as it seems the Restlet synchronous Client works better."/>
         <componentProperty name="maxTotalConnections" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Maximum number of concurrent connections in total."/>
         <componentProperty name="pipeliningConnections" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Indicates if pipelining connections are supported."/>
         <componentProperty name="reuseAddress" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Enable/disable the SO_REUSEADDR socket option. See java.io.ServerSocketreuseAddress property for additional details."/>
         <componentProperty name="maxQueued" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Maximum number of calls that can be queued if there aren't any worker thread available to service them. If the value is '0' then no queue is used and calls are rejected if no worker thread is immediately available. If the value is '-1' then an unbounded queue is used and calls are never rejected."/>
         <componentProperty name="threadMaxIdleTimeMs" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Time for an idle thread to wait for an operation before being collected."/>
         <componentProperty name="outboundBufferSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="The size of the buffer when writing messages."/>
         <componentProperty name="controllerSleepTimeMs" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Time for the controller thread to sleep between each control."/>
         <componentProperty name="disableStreamCache" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Determines whether or not the raw input stream from Restlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Restlet input stream to support reading it multiple times to ensure Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultRestletBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times."/>
         <componentProperty name="port" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="To configure the port number for the restlet consumer routes. This allows to configure this once to reuse the same port for these consumers."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="lowThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Number of worker threads determining when the connector is considered overloaded."/>
         <componentProperty name="persistingConnections" type="boolean" javaType="java.lang.Boolean" kind="property" deprecated="false" defaultValue="false" description="Indicates if connections should be kept alive after a call."/>
         <componentProperty name="maxConnectionsPerHost" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Maximum number of concurrent connections per host (IP address)."/>
         <componentProperty name="maxThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Maximum threads that will service requests."/>
         <componentProperty name="enabledConverters" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="property" deprecated="false" description="A list of converters to enable as full class name or simple class name. All the converters automatically registered are enabled if empty or null"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether to throw exception on a producer failure. If this option is false then the http status code is set as a message header which can be checked if it has an error value."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="restletRealm" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" label="security" group="security" description="To configure the security realms of restlet as a map."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="restletUriPatterns" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Specify one ore more URI templates to be serviced by a restlet consumer endpoint using the notation to reference a List in the Camel Registry. If a URI pattern has been defined in the endpoint URI both the URI pattern defined in the endpoint and the restletUriPatterns option will be honored."/>
         <uriParameter name="restletMethod" type="string" javaType="org.restlet.data.Method" kind="parameter" choice="ALL,CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE" deprecated="false" defaultValue="GET" group="common" description="On a producer endpoint specifies the request method to use. On a consumer endpoint specifies that the endpoint consumes only restletMethod requests."/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="http,https" deprecated="false" required="true" group="common" description="The protocol to use which is http or https"/>
         <uriParameter name="restletBinding" type="object" javaType="org.apache.camel.component.restlet.RestletBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom RestletBinding to bind between Restlet and Camel message."/>
         <uriParameter name="uriPattern" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The resource pattern such as /customer/id"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Determines whether or not the raw input stream from Restlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Restlet input stream to support reading it multiple times to ensure Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultRestletBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="80" required="true" group="common" description="The port number of the restlet service"/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="autoCloseStream" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether to auto close the stream representation as response from calling a REST service using the restlet producer. If the response is streaming and the option streamRepresentation is enabled then you may want to auto close the InputStream from the streaming response to ensure the input stream is closed when the Camel Exchange is done being routed. However if you need to read the stream outside a Camel route you may need to not auto close the stream."/>
         <uriParameter name="streamRepresentation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether to support stream representation as response from calling a REST service using the restlet producer. If the response is streaming then this option can be enabled to use an java.io.InputStream as the message body on the Camel Message body. If using this option you may want to enable the autoCloseStream option as well to ensure the input stream is closed when the Camel Exchange is done being routed. However if you need to read the stream outside a Camel route you may need to not auto close the stream."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The hostname of the restlet service"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The Client will give up connection if the connection is timeout 0 for unlimited wait."/>
         <uriParameter name="socketTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The Client socket receive timeout 0 for unlimited wait."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="restletMethods" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Specify one or more methods separated by commas (e.g. restletMethods=postput) to be serviced by a restlet consumer endpoint. If both restletMethod and restletMethods options are specified the restletMethod setting is ignored. The possible methods are: ALLCONNECTDELETEGETHEADOPTIONSPATCHPOSTPUTTRACE"/>
      </uriParameters>
   </component>
   <component>
      <id>schematron</id>
      <tags>
         <tag>validation</tag>
      </tags>
      <title>Schematron</title>
      <description>Validates the payload of a message using the Schematron Library.</description>
      <syntax>schematron:path</syntax>
      <class>org.apache.camel.component.schematron.SchematronComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>schematron</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-schematron-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The path to the schematron rules file. Can either be in class path or location in the file system."/>
         <uriParameter name="abort" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Flag to abort the route and throw a schematron validation exception."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="rules" type="object" javaType="javax.xml.transform.Templates" kind="parameter" deprecated="false" group="producer" description="To use the given schematron rules instead of loading from the path"/>
         <uriParameter name="uriResolver" type="object" javaType="javax.xml.transform.URIResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the URIResolver to be used for resolving schematron includes in the rules file."/>
      </uriParameters>
   </component>
   <component>
      <id>flink</id>
      <tags>
         <tag>hadoop</tag>
      </tags>
      <title>Apache Flink</title>
      <description>The flink component can be used to send DataSet jobs to Apache Flink cluster.</description>
      <syntax>flink:endpointType</syntax>
      <class>org.apache.camel.component.flink.FlinkComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>flink</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-flink-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="dataStream" type="object" javaType="org.apache.flink.streaming.api.datastream.DataStream" kind="property" deprecated="false" description="DataStream to compute against."/>
         <componentProperty name="dataSetCallback" type="object" javaType="org.apache.camel.component.flink.DataSetCallback" kind="property" deprecated="false" description="Function performing action against a DataSet."/>
         <componentProperty name="dataSet" type="object" javaType="org.apache.flink.api.java.DataSet" kind="property" deprecated="false" description="DataSet to compute against."/>
         <componentProperty name="dataStreamCallback" type="object" javaType="org.apache.camel.component.flink.DataStreamCallback" kind="property" deprecated="false" description="Function performing action against a DataStream."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="endpointType" type="string" javaType="org.apache.camel.component.flink.EndpointType" kind="path" choice="dataset,datastream" deprecated="false" required="true" group="producer" description="Type of the endpoint (dataset datastream)."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="dataStream" type="object" javaType="org.apache.flink.streaming.api.datastream.DataStream" kind="parameter" deprecated="false" group="producer" description="DataStream to compute against."/>
         <uriParameter name="dataSetCallback" type="object" javaType="org.apache.camel.component.flink.DataSetCallback" kind="parameter" deprecated="false" group="producer" description="Function performing action against a DataSet."/>
         <uriParameter name="collect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Indicates if results should be collected or counted."/>
         <uriParameter name="dataSet" type="object" javaType="org.apache.flink.api.java.DataSet" kind="parameter" deprecated="false" group="producer" description="DataSet to compute against."/>
         <uriParameter name="dataStreamCallback" type="object" javaType="org.apache.camel.component.flink.DataStreamCallback" kind="parameter" deprecated="false" group="producer" description="Function performing action against a DataStream."/>
      </uriParameters>
   </component>
   <component>
      <id>routebox</id>
      <tags>
         <tag>eventbus</tag>
      </tags>
      <title>RouteBox</title>
      <description>The routebox component allows to send/receive messages between Camel routes in a black box way.</description>
      <syntax>routebox:routeboxName</syntax>
      <class>org.apache.camel.component.routebox.RouteboxComponent</class>
      <kind>component</kind>
      <scheme>routebox</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-routebox-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="innerProtocol" type="string" javaType="java.lang.String" kind="parameter" choice="direct,seda" deprecated="false" defaultValue="direct" group="common" description="The Protocol used internally by the Routebox component. Can be Direct or SEDA. The Routebox component currently offers protocols that are JVM bound."/>
         <uriParameter name="routeBuilders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A string representing a key in the Camel Registry matching an object value of the type List. If the user does not supply an innerContext pre-primed with inner routes the routeBuilders option must be provided as a non-empty list of RouteBuilders containing inner routes"/>
         <uriParameter name="queueSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Create a fixed size queue to receive requests."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="threads" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="20" label="consumer" group="consumer" description="Number of threads to be used by the routebox to receive requests."/>
         <uriParameter name="dispatchMap" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="A string representing a key in the Camel Registry matching an object value of the type HashMap. The HashMap key should contain strings that can be matched against the value set for the exchange header ROUTE_DISPATCH_KEY. The HashMap value should contain inner route consumer URI&apos;s to which requests should be directed."/>
         <uriParameter name="dispatchStrategy" type="object" javaType="org.apache.camel.component.routebox.strategy.RouteboxDispatchStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom RouteboxDispatchStrategy which allows to use custom dispatching instead of the default."/>
         <uriParameter name="pollInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer" group="consumer" description="The timeout used when polling from seda. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown."/>
         <uriParameter name="innerRegistry" type="object" javaType="org.apache.camel.spi.Registry" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom registry for the internal embedded CamelContext."/>
         <uriParameter name="forkContext" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to fork and create a new inner CamelContext instead of reusing the same CamelContext."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="routeboxName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Logical name for the routebox (eg like a queue name)"/>
         <uriParameter name="innerContext" type="object" javaType="org.apache.camel.CamelContext" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A string representing a key in the Camel Registry matching an object value of the type org.apache.camel.CamelContext. If a CamelContext is not provided by the user a CamelContext is automatically created for deployment of inner routes."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="20000" label="producer" group="producer" description="Timeout in millis used by the producer when sending a message."/>
         <uriParameter name="sendToConsumer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Dictates whether a Producer endpoint sends a request to an external routebox consumer. If the setting is false the Producer creates an embedded inner context and processes requests internally."/>
         <uriParameter name="innerProducerTemplate" type="object" javaType="org.apache.camel.ProducerTemplate" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The ProducerTemplate to use by the internal embeded CamelContext"/>
      </uriParameters>
   </component>
   <component>
      <id>braintree</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>payment</tag>
      </tags>
      <title>Braintree</title>
      <description>The braintree component is used for integrating with the Braintree Payment System.</description>
      <syntax>braintree:apiName/methodName</syntax>
      <class>org.apache.camel.component.braintree.BraintreeComponent</class>
      <kind>component</kind>
      <scheme>braintree</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-braintree-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.braintree.BraintreeConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.braintree.internal.BraintreeApiName" kind="path" choice="ADDON,ADDRESS,CLIENTTOKEN,CREDITCARDVERIFICATION,CUSTOMER,DISCOUNT,MERCHANTACCOUNT,PAYMENTMETHOD,PAYMENTMETHODNONCE,PLAN,SETTLEMENTBATCHSUMMARY,SUBSCRIPTION,TRANSACTION,WEBHOOKNOTIFICATION" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="httpReadTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" required="false" label="advanced" group="advanced" description="Set read timeout for http calls."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="publicKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The public key provided by Braintree."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="proxy" group="proxy" description="The proxy host"/>
         <uriParameter name="privateKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The private key provided by Braintree."/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" required="false" label="proxy" group="proxy" description="The proxy port"/>
         <uriParameter name="environment" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The environment Either SANDBOX or PRODUCTION"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="merchantId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The merchant id provided by Braintree."/>
         <uriParameter name="httpLogLevel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="advanced,logging" group="logging" description="Set logging level for http calls see java.util.logging.Level"/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>dropbox</id>
      <tags>
         <tag>api</tag>
         <tag>file</tag>
      </tags>
      <title>Dropbox</title>
      <description>For uploading downloading and managing files folders groups collaborations etc on dropbox DOT com.</description>
      <syntax>dropbox:operation</syntax>
      <class>org.apache.camel.component.dropbox.DropboxComponent</class>
      <kind>component</kind>
      <scheme>dropbox</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-dropbox-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="remotePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Original file or folder to move"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="clientIdentifier" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="Name of the app registered to make API requests"/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="A space-separated list of substrings to search for. A file matches only if it contains all the substrings. If this option is not set all files will be matched."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The access token to make API requests for a specific Dropbox user"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="localPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Folder or file to upload on Dropbox from the local filesystem."/>
         <uriParameter name="newRemotePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Destination file or folder"/>
         <uriParameter name="client" type="object" javaType="com.dropbox.core.DbxClient" kind="parameter" deprecated="false" group="common" description="To use an existing DbxClient instance as DropBox client."/>
         <uriParameter name="uploadMode" type="string" javaType="org.apache.camel.component.dropbox.util.DropboxUploadMode" kind="parameter" choice="add,force" deprecated="false" group="common" description="Which mode to upload. in case of add the new file will be renamed if a file with the same name already exists on dropbox. in case of force if a file with the same name already exists on dropbox this will be overwritten."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.dropbox.util.DropboxOperation" kind="path" choice="put,del,search,get,move" deprecated="false" required="true" group="common" description="The specific action (typically is a CRUD action) to perform on Dropbox remote folder."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-s3</id>
      <tags>
         <tag>cloud</tag>
         <tag>file</tag>
      </tags>
      <title>AWS S3 Storage Service</title>
      <description>The aws-s3 component is used for storing and retrieving objecct from Amazon S3 Storage Service.</description>
      <syntax>aws-s3:bucketNameOrArn</syntax>
      <class>org.apache.camel.component.aws.s3.S3Component</class>
      <kind>component</kind>
      <scheme>aws-s3</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To get the object from the bucket with the given file name"/>
         <uriParameter name="serverSideEncryption" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Camel 2.16: Sets the server-side encryption algorithm when encrypting the object using AWS-managed keys. For example use AES256."/>
         <uriParameter name="bucketNameOrArn" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Bucket name or ARN"/>
         <uriParameter name="prefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Camel 2.10.1: The prefix which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in."/>
         <uriParameter name="partSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="26214400" label="producer" group="producer" description="Camel 2.15.0: Setup the partSize which is used in multi part upload the default size is 25M."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="Camel 2.16: Specify a proxy port to be used inside the client definition."/>
         <uriParameter name="multiPartUpload" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Camel 2.15.0: If it is true camel will upload the file with multi part format the part size is decided by the option of partSize"/>
         <uriParameter name="storageClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Camel 2.8.4: The storage class to set in the com.amazonaws.services.s3.model.PutObjectRequest request."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="amazonS3Client" type="object" javaType="com.amazonaws.services.s3.AmazonS3" kind="parameter" deprecated="false" group="common" description="Reference to a com.amazonaws.services.sqs.AmazonS3 in the link:registry.htmlRegistry."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="consumer" group="consumer" description="Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="policy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Camel 2.8.4: The policy for this queue to set in the com.amazonaws.services.s3.AmazonS3setBucketPolicy() method."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Secret Key"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="pathStyleAccess" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not the S3 client should use path style access"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Camel 2.16: To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="autocloseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If this option is true and includeBody is true then the S3Object.close() method will be called on exchange completion"/>
         <uriParameter name="amazonS3Endpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The region with which the AWS-S3 client wants to work with."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="includeBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Camel 2.17: If it is true the exchange body will be set to a stream to the contents of the file. If false the headers will be set with the S3 object metadata but the body will be null."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Access Key"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="deleteAfterRead" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs the object is not deleted. If this option is false then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the link S3ConstantsBUCKET_NAME and link S3ConstantsKEY headers or only the link S3ConstantsKEY header."/>
         <uriParameter name="deleteAfterWrite" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Camel 2.11.0: Delete file object after the S3 file has been uploaded"/>
         <uriParameter name="region" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The region where the bucket is located. This option is used in the com.amazonaws.services.s3.model.CreateBucketRequest."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.aws.s3.S3Operations" kind="parameter" choice="copyObject,deleteBucket,listBuckets" deprecated="false" label="producer" group="producer" description="Camel 2.18: The operation to do in case the user don&apos;t want to do only an upload"/>
      </uriParameters>
   </component>
   <component>
      <id>consul</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
      </tags>
      <title>Consul</title>
      <description>The camel consul component allows you to work with Consul a distributed highly available datacenter-aware service discovery and configuration system.</description>
      <syntax>consul:apiEndpoint</syntax>
      <class>org.apache.camel.component.consul.ConsulComponent</class>
      <kind>component</kind>
      <scheme>consul</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-consul-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="readTimeoutMillis" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="common" description="Read timeout for OkHttpClient"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="valueAsString" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Default to transform values retrieved from Consul i.e. on KV endpoint to string."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="SSL configuration using an org.apache.camel.util.jsse.SSLContextParameters instance."/>
         <uriParameter name="pingInstance" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Configure if the AgentClient should attempt a ping before returning the Consul instance"/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the username to be used for basic authentication"/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The Consul agent URL"/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,watch" group="watch" description="Recursively watch default false"/>
         <uriParameter name="tags" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Set tags. You can separate multiple tags by comma."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the password to be used for basic authentication"/>
         <uriParameter name="apiEndpoint" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The API endpoint"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="firstIndex" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,watch" group="watch" description="The first index for watch for default 0"/>
         <uriParameter name="aclToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the ACL token to be used with Consul"/>
         <uriParameter name="connectTimeoutMillis" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="common" description="Connect timeout for OkHttpClient"/>
         <uriParameter name="action" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The default action. Can be overridden by CamelConsulAction"/>
         <uriParameter name="writeTimeoutMillis" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="common" description="Write timeout for OkHttpClient"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="blockSeconds" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10" label="consumer,watch" group="watch" description="The second to wait for a watch event default 10 seconds"/>
         <uriParameter name="key" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The default key. Can be overridden by CamelConsulKey"/>
         <uriParameter name="dc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The data center"/>
      </uriParameters>
   </component>
   <component>
      <id>vm</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>VM</title>
      <description>The vm component provides asynchronous call to another endpoint from the same CamelContext.</description>
      <syntax>vm:name</syntax>
      <class>org.apache.camel.component.vm.VmComponent</class>
      <kind>component</kind>
      <scheme>vm</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="queueSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <componentProperty name="defaultQueueFactory" type="object" javaType="org.apache.camel.component.seda.BlockingQueueFactory&lt;org.apache.camel.Exchange&gt;" kind="property" deprecated="false" description="Sets the default queue factory."/>
         <componentProperty name="concurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="1" required="false" description="Sets the default number of concurrent threads processing exchanges."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="pollTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,advanced" group="consumer (advanced)" description="The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown."/>
         <uriParameter name="failIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="waitForTaskToComplete" type="string" javaType="org.apache.camel.WaitForTaskToComplete" kind="parameter" choice="Never,IfReplyExpected,Always" deprecated="false" defaultValue="IfReplyExpected" label="producer" group="producer" description="Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected."/>
         <uriParameter name="limitConcurrentConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off."/>
         <uriParameter name="blockWhenFull" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether a thread that sends messages to a full SEDA queue will block until the queue&apos;s capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent threads processing exchanges."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="size" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" group="common" description="The maximum capacity of the SEDA queue (i.e. the number of messages it can hold)."/>
         <uriParameter name="discardIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of queue"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="purgeWhenStopping" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded."/>
         <uriParameter name="multipleConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint."/>
         <uriParameter name="queue" type="object" javaType="java.util.concurrent.BlockingQueue" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance."/>
      </uriParameters>
   </component>
   <component>
      <id>http</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>HTTP</title>
      <description>For calling out to external HTTP servers using Apache HTTP Client 3.x.</description>
      <syntax>http:httpUri</syntax>
      <class>org.apache.camel.component.http.HttpComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>http</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http.HttpClientConfigurer" kind="property" deprecated="false" description="To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used."/>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <componentProperty name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="property" deprecated="false" description="To use a custom HttpConnectionManager to manage connections"/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" description="To use the shared HttpConfiguration as base configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" label="producer" group="producer" description="The url of the HTTP endpoint to call."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="producer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="httpConnectionManagerOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpConnectionManager using the key/values from the Map."/>
         <uriParameter name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpConnectionManager to manage connections"/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="producer" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="httpClientOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpClient using the key/values from the Map."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http.HttpClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
      </uriParameters>
   </component>
   <component>
      <id>exec</id>
      <tags>
         <tag>system</tag>
      </tags>
      <title>Exec</title>
      <description>The exec component can be used to execute OS system commands.</description>
      <syntax>exec:executable</syntax>
      <class>org.apache.camel.component.exec.ExecComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>exec</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-exec-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="args" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The arguments may be one or many whitespace-separated tokens."/>
         <uriParameter name="useStderrOnEmptyStdout" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="A boolean indicating that when stdout is empty this component will populate the Camel Message Body with stderr. This behavior is disabled (false) by default."/>
         <uriParameter name="outFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The name of a file created by the executable that should be considered as its output. If no outFile is set the standard output (stdout) of the executable will be used instead."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="workingDir" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The directory in which the command should be executed. If null the working directory of the current process will be used."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.exec.ExecBinding" kind="parameter" deprecated="false" group="producer" description="A reference to a org.apache.commons.exec.ExecBinding in the Registry."/>
         <uriParameter name="commandExecutor" type="object" javaType="org.apache.camel.component.exec.ExecCommandExecutor" kind="parameter" deprecated="false" group="producer" description="A reference to a org.apache.commons.exec.ExecCommandExecutor in the Registry that customizes the command execution. The default command executor utilizes the commons-exec library which adds a shutdown hook for every executed command."/>
         <uriParameter name="executable" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Sets the executable to be executed. The executable must not be empty or null."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="The timeout in milliseconds after which the executable should be terminated. If execution has not completed within the timeout the component will send a termination request."/>
      </uriParameters>
   </component>
   <component>
      <id>undertow</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>Undertow</title>
      <description>The undertow component provides HTTP-based endpoints for consuming and producing HTTP requests.</description>
      <syntax>undertow:httpURI</syntax>
      <class>org.apache.camel.component.undertow.UndertowComponent</class>
      <kind>component</kind>
      <scheme>undertow</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-undertow-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="undertowHttpBinding" type="object" javaType="org.apache.camel.component.undertow.UndertowHttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="reuseAddresses" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Setting to facilitate socket multiplexing"/>
         <uriParameter name="keepAlive" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Setting to ensure socket is not closed due to inactivity"/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the producer send all the fault response back."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="undertowHttpBinding" type="object" javaType="org.apache.camel.component.undertow.UndertowHttpBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom UndertowHttpBinding to control the mapping between Camel message and undertow."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="httpURI" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="common" description="The url of the HTTP endpoint to use."/>
         <uriParameter name="transferException" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="options" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets additional channel options. The options that can be used are defined in org.xnio.Options. To configure from endpoint uri then prefix each option with option. such as option.close-abort=true&amp;option.send-buffer=8192"/>
         <uriParameter name="optionsEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Setting to improve TCP protocol performance"/>
      </uriParameters>
   </component>
   <component>
      <id>google-calendar</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
      </tags>
      <title>Google Calendar</title>
      <description>The google-calendar component provides access to Google Calendar.</description>
      <syntax>google-calendar:apiName/methodName</syntax>
      <class>org.apache.camel.component.google.calendar.GoogleCalendarComponent</class>
      <kind>component</kind>
      <scheme>google-calendar</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-google-calendar-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.google.calendar.GoogleCalendarConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
         <componentProperty name="clientFactory" type="object" javaType="org.apache.camel.component.google.calendar.GoogleCalendarClientFactory" kind="property" deprecated="false" description="To use the GoogleCalendarClientFactory as factory for creating the client. Will by default use BatchGoogleCalendarClientFactory"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.google.calendar.internal.GoogleCalendarApiName" kind="path" choice="ACL,LIST,CALENDARS,CHANNELS,COLORS,FREEBUSY,EVENTS,SETTINGS" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="p12FileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The name of the p12 file which has the private key to use with the Google Service Account."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client ID of the calendar application"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" choice="calendarImport,clear,delete,get,insert,instances,list,move,patch,query,quickAdd,stop,update,watch" deprecated="false" required="true" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 access token. This typically expires after an hour so refreshToken is recommended for long term usage."/>
         <uriParameter name="emailAddress" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The emailAddress of the Google Service Account."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="clientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client secret of the calendar application"/>
         <uriParameter name="scopes" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" defaultValue="https://www.googleapis.com/auth/calendar" group="common" description="Specifies the level of permissions you want a calendar application to have to a user account. See https://developers.google.com/google-apps/calendar/auth for more info."/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="user" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The email address of the user the application is trying to impersonate in the service account flow"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="applicationName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Google calendar application name. Example would be camel-google-calendar/1.0"/>
         <uriParameter name="refreshToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 refresh token. Using this the Google Calendar component can obtain a new accessToken whenever the current one expires - a necessity if the application is long-lived."/>
      </uriParameters>
   </component>
   <component>
      <id>fop</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>FOP</title>
      <description>The fop component allows you to render a message into different output formats using Apache FOP.</description>
      <syntax>fop:outputType</syntax>
      <class>org.apache.camel.component.fop.FopComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>fop</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-fop-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="fopFactory" type="object" javaType="org.apache.fop.apps.FopFactory" kind="parameter" deprecated="false" group="producer" description="Allows to use a custom configured or implementation of org.apache.fop.apps.FopFactory."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.fop.FopOutputType" kind="path" choice="pdf,ps,pcl,png,jpeg,svg,xml,mif,rtf,txt" deprecated="false" required="true" group="producer" description="The primary output format is PDF but other output formats are also supported."/>
         <uriParameter name="userConfigURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The location of a configuration file which can be loaded from classpath or file system."/>
      </uriParameters>
   </component>
   <component>
      <id>jdbc</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>JDBC</title>
      <description>The jdbc component enables you to access databases through JDBC where SQL queries are sent in the message body.</description>
      <syntax>jdbc:dataSourceName</syntax>
      <class>org.apache.camel.component.jdbc.JdbcComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>jdbc</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jdbc-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="dataSource" type="object" javaType="javax.sql.DataSource" kind="property" deprecated="false" description="To use the DataSource instance instead of looking up the data source by name from the registry."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="resetAutoCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Camel will set the autoCommit on the JDBC connection to be false commit the change after executed the statement and reset the autoCommit flag of the connection at the end if the resetAutoCommit is true. If the JDBC connection doesn&apos;t support to reset the autoCommit flag you can set the resetAutoCommit flag to be false and Camel will not try to reset the autoCommit flag. When used with XA transactions you most likely need to set it to false so that the transaction manager is in charge of committing this tx."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.jdbc.JdbcOutputType" kind="parameter" choice="SelectOne,SelectList,StreamList" deprecated="false" defaultValue="SelectList" group="producer" description="Determines the output the producer should use."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether transactions are in use."/>
         <uriParameter name="useHeadersAsParameters" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this option to true to use the prepareStatementStrategy with named parameters. This allows to define queries with named placeholders and use headers with the dynamic values for the query placeholders."/>
         <uriParameter name="allowNamedParameters" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to allow using named parameters in the queries."/>
         <uriParameter name="dataSourceName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of DataSource to lookup in the Registry."/>
         <uriParameter name="useJDBC4ColumnNameAndLabelSemantics" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Sets whether to use JDBC 4 or JDBC 3.0 or older semantic when retrieving column name. JDBC 4.0 uses columnLabel to get the column name where as JDBC 3.0 uses both columnName or columnLabel. Unfortunately JDBC drivers behave differently so you can use this option to work out issues around your JDBC driver if you get problem using this component This option is default true."/>
         <uriParameter name="prepareStatementStrategy" type="object" javaType="org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy" kind="parameter" deprecated="false" group="producer" description="Allows to plugin to use a custom org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy to control preparation of the query and prepared statement."/>
         <uriParameter name="beanRowMapper" type="object" javaType="org.apache.camel.component.jdbc.BeanRowMapper" kind="parameter" deprecated="false" group="producer" description="To use a custom org.apache.camel.component.jdbc.BeanRowMapper when using outputClass. The default implementation will lower case the row names and skip underscores and dashes. For example CUST_ID is mapped as custId."/>
         <uriParameter name="useGetBytesForBlob" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="To read BLOB columns as bytes instead of string data. This may be needed for certain databases such as Oracle where you must read BLOB columns as bytes."/>
         <uriParameter name="outputClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Specify the full package and class name to use as conversion when outputType=SelectOne or SelectList."/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="producer" description="Optional parameters to the java.sql.Statement. For example to set maxRows fetchSize etc."/>
         <uriParameter name="readSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="The default maximum number of rows that can be read by a polling query. The default value is 0."/>
      </uriParameters>
   </component>
   <component>
      <id>mustache</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Mustache</title>
      <description>Transforms the message using a Mustache template.</description>
      <syntax>mustache:resourceUri</syntax>
      <class>org.apache.camel.component.mustache.MustacheComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>mustache</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mustache-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="mustacheFactory" type="object" javaType="com.github.mustachejava.MustacheFactory" kind="property" deprecated="false" description="To use a custom MustacheFactory"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="endDelimiter" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="}}" group="producer" description="Characters used to mark template code end."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="startDelimiter" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="{{" group="producer" description="Characters used to mark template code beginning."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Character encoding of the resource content."/>
      </uriParameters>
   </component>
   <component>
      <id>docker</id>
      <tags>
         <tag>container</tag>
         <tag>cloud</tag>
         <tag>paas</tag>
      </tags>
      <title>Docker</title>
      <description>The docker component is used for managing Docker containers.</description>
      <syntax>docker:operation</syntax>
      <class>org.apache.camel.component.docker.DockerComponent</class>
      <kind>component</kind>
      <scheme>docker</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-docker-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.docker.DockerConfiguration" kind="property" deprecated="false" description="To use the shared docker configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="followRedirectFilter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to follow redirect filter"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="tlsVerify" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Check TLS"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="maxTotalConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="100" label="advanced" group="advanced" description="Maximum total connections"/>
         <uriParameter name="serverAddress" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://index.docker.io/v1/" label="advanced" group="advanced" description="Server address for docker registry."/>
         <uriParameter name="secure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Use HTTPS communication"/>
         <uriParameter name="maxPerRouteConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="100" label="advanced" group="advanced" description="Maximum route connections"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to authenticate with"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="certPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Location containing the SSL certificate chain"/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="2375" required="true" group="common" description="Docker port"/>
         <uriParameter name="loggingFilter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use logging filter"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="localhost" required="true" group="common" description="Docker host"/>
         <uriParameter name="socket" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Socket connection mode"/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.docker.DockerOperation" kind="path" choice="events,stats,auth,info,ping,version,imagebuild,imagecreate,imageinspect,imagelist,imagepull,imagepushimageremove,imagesearch,imagetag,containerattach,containercommit,containercopyfile,containercreate,containerdiffinspectcontainer,containerkill,containerlist,containerlog,containerpause,containerrestart,containerremove,containerstartcontainerstop,containertop,containerunpause,containerwait,execcreate,execstart" deprecated="false" required="true" group="common" description="Which operation to use"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="email" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Email address associated with the user"/>
         <uriParameter name="requestTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="Request timeout for response (in seconds)"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="User name to authenticate with"/>
      </uriParameters>
   </component>
   <component>
      <id>scheduler</id>
      <tags>
         <tag>core</tag>
         <tag>scheduling</tag>
      </tags>
      <title>Scheduler</title>
      <description>The scheduler component is used for generating message exchanges when a scheduler fires.</description>
      <syntax>scheduler:name</syntax>
      <class>org.apache.camel.component.scheduler.SchedulerComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>scheduler</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="concurrentTasks" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Number of threads used by the scheduling thread pool. Is by default using a single thread"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="concurrentTasks" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="scheduler" group="scheduler" description="Number of threads used by the scheduling thread pool. Is by default using a single thread"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="Allow to plugin a custom org.apache.camel.spi.ScheduledPollConsumerScheduler to use as the scheduler for firing when the polling consumer runs. The default implementation uses the ScheduledExecutorService and there is a Quartz2 and Spring based which supports CRON expressions. Notice: If using a custom scheduler then the options for initialDelay useFixedDelay timeUnit and scheduledExecutorService may not be in use. Use the text quartz2 to refer to use the Quartz2 scheduler; and use the text spring to use the Spring based; and use the text myScheduler to refer to a custom scheduler by its id in the Registry. See Quartz2 page for an example."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. The default value is 500. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel. In other words the error occurred while the polling was gathering information for instance access to a file network failed so Camel cannot access it to scan for files. The default implementation will log the caused exception at WARN level and ignore it."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The name of the scheduler"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool. This option allows you to share a thread pool among multiple consumers."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
      </uriParameters>
   </component>
   <component>
      <id>solr</id>
      <tags>
         <tag>monitoring</tag>
         <tag>search</tag>
      </tags>
      <title>Solr</title>
      <description>The solr component allows you to interface with an Apache Lucene Solr server.</description>
      <syntax>solr:url</syntax>
      <class>org.apache.camel.component.solr.SolrComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>solr</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-solr-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="defaultMaxConnectionsPerHost" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxConnectionsPerHost on the underlying HttpConnectionManager"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="maxTotalConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxTotalConnection on the underlying HttpConnectionManager"/>
         <uriParameter name="streamingThreadCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2" group="producer" description="Set the number of threads for the StreamingUpdateSolrServer"/>
         <uriParameter name="collection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the collection name which the solrCloud server could use"/>
         <uriParameter name="zkHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the ZooKeeper host information which the solrCloud could use such as zkhost=localhost:8123."/>
         <uriParameter name="soTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Read timeout on the underlying HttpConnectionManager. This is desirable for queries but probably not for indexing"/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Hostname and port for the solr server"/>
         <uriParameter name="maxRetries" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Maximum number of retries to attempt in the event of transient errors"/>
         <uriParameter name="allowCompression" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Server side must support gzip or deflate for this to have any effect"/>
         <uriParameter name="requestHandler" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Set the request handler to be used"/>
         <uriParameter name="followRedirects" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="indicates whether redirects are used to get to the Solr server"/>
         <uriParameter name="streamingQueueSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" group="producer" description="Set the queue size for the StreamingUpdateSolrServer"/>
         <uriParameter name="connectionTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="connectionTimeout on the underlying HttpConnectionManager"/>
      </uriParameters>
   </component>
   <component>
      <id>ahc-wss</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>AHC Secure Websocket</title>
      <description>To exchange data with external Websocket servers using Async Http Client.</description>
      <syntax>ahc-wss:httpUri</syntax>
      <class>org.apache.camel.component.ahc.ws.WsComponent</class>
      <kind>component</kind>
      <extendsScheme>ahc</extendsScheme>
      <scheme>ahc-wss</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ahc-ws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <componentProperty name="client" type="object" javaType="org.asynchttpclient.AsyncHttpClient" kind="property" deprecated="false" description="To use a custom AsyncHttpClient"/>
         <componentProperty name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="property" deprecated="false" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <componentProperty name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="property" deprecated="false" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientConfigOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClientConfig using the key/values from the Map."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Option to disable throwing the AhcOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. This reference overrides any configured SSLContextParameters at the component level. See Using the JSSE Configuration Utility. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="parameter" deprecated="false" group="common" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Define if the Connection Close header has to be added to HTTP Request. This parameter is false by default"/>
         <uriParameter name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useStreaming" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="To enable streaming to send data as multiple text fragments."/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="common" description="The URI to use such as http://hostname:port/path"/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or Servlet Camel components). On the producer side the exception will be deserialized and thrown as is instead of the AhcOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="sendMessageOnError" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to send an message if the web-socket listener received an error."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If the option is true then the Exchange.HTTP_URI header is ignored and use the endpoint&apos;s URI for request. You may also set the throwExceptionOnFailure to be false to let the AhcProducer send all the fault response back."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" group="common" description="The initial in-memory buffer size used when transferring data between Camel and AHC Client."/>
      </uriParameters>
   </component>
   <component>
      <id>jetty</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>Jetty 9</title>
      <description>The jetty component provides HTTP-based endpoints for consuming and producing HTTP requests.</description>
      <syntax>jetty:httpUri</syntax>
      <class>org.apache.camel.component.jetty9.JettyHttpComponent9</class>
      <kind>component</kind>
      <extendsScheme>http</extendsScheme>
      <scheme>jetty</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jetty9-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="sslSocketConnectors" type="object" javaType="java.util.Map&lt;java.lang.Integer,org.eclipse.jetty.server.Connector&gt;" kind="property" deprecated="false" required="false" description="A map which contains per port number specific SSL connectors."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" required="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="sslKeyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="The key password which is used to access the certificate's key entry in the keystore (this is the same password that is supplied to the keystore command's -keypass option)."/>
         <componentProperty name="enableJmx" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" required="false" description="If this option is true Jetty JMX support will be enabled for this endpoint."/>
         <componentProperty name="sslSocketConnectorProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="property" deprecated="false" required="false" description="A map which contains general SSL connector properties."/>
         <componentProperty name="useContinuation" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" required="false" description="Whether or not to use Jetty continuations for the Jetty Server."/>
         <componentProperty name="proxyPort" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="To use a http proxy to configure the port number."/>
         <componentProperty name="sendServerVersion" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" required="false" description="If the option is true jetty server will send the date header to the client which sends the request. NOTE please make sure there is no any other camel-jetty endpoint is share the same port otherwise this option may not work as expected."/>
         <componentProperty name="httpClientMinThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="To set a value for minimum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="socketConnectors" type="object" javaType="java.util.Map&lt;java.lang.Integer,org.eclipse.jetty.server.Connector&gt;" kind="property" deprecated="false" required="false" description="A map which contains per port number specific HTTP connectors. Uses the same principle as sslSocketConnectors."/>
         <componentProperty name="keystore" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="Specifies the location of the Java keystore file which contains the Jetty server's own X.509 certificate in a key entry."/>
         <componentProperty name="threadPool" type="object" javaType="org.eclipse.jetty.util.thread.ThreadPool" kind="property" deprecated="false" required="false" description="To use a custom thread pool for the server. This option should only be used in special circumstances."/>
         <componentProperty name="maxThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="To set a value for maximum number of threads in server thread pool. Notice that both a min and max size must be configured."/>
         <componentProperty name="mbContainer" type="object" javaType="org.eclipse.jetty.jmx.MBeanContainer" kind="property" deprecated="false" required="false" description="To use a existing configured org.eclipse.jetty.jmx.MBeanContainer if JMX is enabled that Jetty uses for registering mbeans."/>
         <componentProperty name="responseHeaderSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="Allows to configure a custom value of the response header size on the Jetty connectors."/>
         <componentProperty name="requestHeaderSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="Allows to configure a custom value of the request header size on the Jetty connectors."/>
         <componentProperty name="minThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="To set a value for minimum number of threads in server thread pool. Notice that both a min and max size must be configured."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" required="false" description="Not to be used - use JettyHttpBinding instead."/>
         <componentProperty name="continuationTimeout" type="integer" javaType="java.lang.Long" kind="property" deprecated="false" required="false" description="Allows to set a timeout in millis when using Jetty as consumer (server). By default Jetty uses 30000. You can use a value of = 0 to never expire. If a timeout occurs then the request will be expired and Jetty will return back a http error 503 to the client. This option is only in use when using Jetty with the Asynchronous Routing Engine."/>
         <componentProperty name="requestBufferSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="Allows to configure a custom value of the request buffer size on the Jetty connectors."/>
         <componentProperty name="useXForwardedForHeader" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" required="false" description="To use the X-Forwarded-For header in HttpServletRequest.getRemoteAddr."/>
         <componentProperty name="proxyHost" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="To use a http proxy to configure the hostname."/>
         <componentProperty name="jettyHttpBinding" type="object" javaType="org.apache.camel.component.jetty.JettyHttpBinding" kind="property" deprecated="false" required="false" description="To use a custom org.apache.camel.component.jetty.JettyHttpBinding which are used to customize how a response should be written for the producer."/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" required="false" description="Jetty component does not use HttpConfiguration."/>
         <componentProperty name="responseBufferSize" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="Allows to configure a custom value of the response buffer size on the Jetty connectors."/>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="sslPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="The ssl password which is required to access the keystore file (this is the same password that is supplied to the keystore command's -storepass option)."/>
         <componentProperty name="errorHandler" type="object" javaType="org.eclipse.jetty.server.handler.ErrorHandler" kind="property" deprecated="false" required="false" description="This option is used to set the ErrorHandler that Jetty server uses."/>
         <componentProperty name="socketConnectorProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="property" deprecated="false" required="false" description="A map which contains general HTTP connector properties. Uses the same principle as sslSocketConnectorProperties."/>
         <componentProperty name="httpClientMaxThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" required="false" description="To set a value for maximum number of threads in HttpClient thread pool. Notice that both a min and max size must be configured."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="jettyBinding" type="object" javaType="org.apache.camel.component.jetty.JettyHttpBinding" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="To use a custom JettyHttpBinding which be used to customize how a response should be written for the producer."/>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="useContinuation" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not to use Jetty continuations for the Jetty Server."/>
         <uriParameter name="sendServerVersion" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If the option is true jetty will send the server header with the jetty version information to the client which sends the request. NOTE please make sure there is no any other camel-jetty endpoint is share the same port otherwise this option may not work as expected."/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="jettyBindingRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" label="producer,advanced" group="producer (advanced)" description="To use a custom JettyHttpBinding which be used to customize how a response should be written for the producer."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="eagerCheckContentAvailable" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="common" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="multipartFilter" type="object" javaType="javax.servlet.Filter" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Allows using a custom multipart filter. Note: setting multipartFilterRef forces the value of enableMultipartFilter to true."/>
         <uriParameter name="optionsEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."/>
         <uriParameter name="sslContextParametersRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="httpClientMaxThreads" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="254" label="producer" group="producer" description="To set a value for maximum number of threads in HttpClient thread pool. This setting override any setting configured on component level. Notice that both a min and max size must be configured. If not set it default to max 254 threads used in Jettys thread pool."/>
         <uriParameter name="enableMultipartFilter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether Jetty org.eclipse.jetty.servlets.MultiPartFilter is enabled or not. You should set this value to false when bridging endpoints to ensure multipart requests is proxied/bridged as well."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="enableJmx" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If this option is true Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details."/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="sessionSupport" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable the session manager on the server side of Jetty."/>
         <uriParameter name="httpBindingRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" label="consumer,advanced" group="consumer (advanced)" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" label="producer" group="producer" description="The url of the HTTP endpoint to call."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="httpClientMinThreads" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="8" label="producer" group="producer" description="To set a value for minimum number of threads in HttpClient thread pool. This setting override any setting configured on component level. Notice that both a min and max size must be configured. If not set it default to min 8 threads used in Jettys thread pool."/>
         <uriParameter name="httpClientParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Configuration of Jetty&apos;s HttpClient. For example setting httpClient.idleTimeout=30000 sets the idle timeout to 30 seconds. And httpClient.timeout=30000 sets the request timeout to 30 seconds in case you want to timeout sooner if you have long running request/response calls."/>
         <uriParameter name="enableCORS" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the option is true Jetty server will setup the CrossOriginFilter which supports the CORS out of box."/>
         <uriParameter name="httpClient" type="object" javaType="org.eclipse.jetty.client.HttpClient" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets a shared HttpClient to use for all producers created by this endpoint. By default each producer will use a new http client and not share. Important: Make sure to handle the lifecycle of the shared client such as stopping the client when it is no longer in use. Camel will call the start method on the client to ensure its started when this endpoint creates a producer. This options should only be used in special circumstances."/>
         <uriParameter name="filtersRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Allows using a custom filters which is putted into a list and can be find in the Registry. Multiple values can be separated by comma."/>
         <uriParameter name="filterInitParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Configuration of the filter init parameters. These parameters will be applied to the filter list before starting the jetty server."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma."/>
         <uriParameter name="sendDateHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the option is true jetty server will send the date header to the client which sends the request. NOTE please make sure there is no any other camel-jetty endpoint is share the same port otherwise this option may not work as expected."/>
         <uriParameter name="continuationTimeout" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" defaultValue="30000" label="consumer" group="consumer" description="Allows to set a timeout in millis when using Jetty as consumer (server). By default Jetty uses 30000. You can use a value of = 0 to never expire. If a timeout occurs then the request will be expired and Jetty will return back a http error 503 to the client. This option is only in use when using Jetty with the Asynchronous Routing Engine."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="async" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Configure the consumer to work in async mode"/>
         <uriParameter name="responseBufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom buffer size on the javax.servlet.ServletResponse."/>
         <uriParameter name="handlers" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies a comma-delimited set of Handler instances to lookup in your Registry. These handlers are added to the Jetty servlet context (for example to add security). Important: You can not use different handlers with different Jetty endpoints using the same port number. The handlers is associated to the port number. If you need different handlers then use different port numbers."/>
         <uriParameter name="multipartFilterRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" label="consumer,advanced" group="consumer (advanced)" description="Allows using a custom multipart filter. Note: setting multipartFilterRef forces the value of enableMultipartFilter to true."/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="traceEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
      </uriParameters>
   </component>
   <component>
      <id>sip</id>
      <tags>
         <tag>mobile</tag>
      </tags>
      <title>SIP</title>
      <description>To send and receive messages using the SIP protocol (used in telco and mobile).</description>
      <syntax>sip:uri</syntax>
      <class>org.apache.camel.component.sip.SipComponent</class>
      <kind>component</kind>
      <scheme>sip</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sip-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="addressFactory" type="object" javaType="javax.sip.address.AddressFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AddressFactory"/>
         <uriParameter name="messageFactory" type="object" javaType="javax.sip.message.MessageFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom MessageFactory"/>
         <uriParameter name="contentTypeHeader" type="object" javaType="javax.sip.header.ContentTypeHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message content details. Must implement the type javax.sip.header.ContentTypeHeader"/>
         <uriParameter name="presenceAgent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="This setting is used to distinguish between a Presence Agent &amp; a consumer. This is due to the fact that the SIP Camel component ships with a basic Presence Agent (for testing purposes only). Consumers have to set this flag to true."/>
         <uriParameter name="fromPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="common" group="common" description="Port of the message originator. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="fromUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Username of the message originator. Mandatory setting unless a registry based custom FromHeader is specified."/>
         <uriParameter name="eventHeader" type="object" javaType="javax.sip.header.EventHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing event details. Must implement the type javax.sip.header.EventHeader"/>
         <uriParameter name="viaHeaders" type="array" javaType="java.util.List&lt;javax.sip.header.ViaHeader&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="List of custom Header objects of the type javax.sip.header.ViaHeader. Each ViaHeader containing a proxy address for request forwarding. (Note this header is automatically updated by each proxy when the request arrives at its listener)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="stackName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="NAME_NOT_SET" label="common" group="common" description="Name of the SIP Stack instance associated with an SIP Endpoint."/>
         <uriParameter name="receiveTimeoutMillis" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="common" group="common" description="Setting for specifying amount of time to wait for a Response and/or Acknowledgement can be received from another SIP stack"/>
         <uriParameter name="sipUri" type="object" javaType="javax.sip.address.SipURI" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipURI. If none configured then the SipUri fallback to use the options toUser toHost:toPort"/>
         <uriParameter name="implementationServerLogFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="logging" group="logging" description="Name of server log file to use for logging"/>
         <uriParameter name="toUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Username of the message receiver. Mandatory setting unless a registry based custom ToHeader is specified."/>
         <uriParameter name="listeningPoint" type="object" javaType="javax.sip.ListeningPoint" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom ListeningPoint implementation"/>
         <uriParameter name="msgExpiration" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="3600" label="common" group="common" description="The amount of time a message received at an endpoint is considered valid"/>
         <uriParameter name="eventHeaderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Setting for a String based event type."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="extensionHeader" type="object" javaType="javax.sip.header.ExtensionHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing user/application specific details. Must implement the type javax.sip.header.ExtensionHeader"/>
         <uriParameter name="expiresHeader" type="object" javaType="javax.sip.header.ExpiresHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message expiration details. Must implement the type javax.sip.header.ExpiresHeader"/>
         <uriParameter name="maxMessageSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1048576" label="advanced" group="advanced" description="Setting for maximum allowed Message size in bytes."/>
         <uriParameter name="useRouterForAllUris" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="proxy" group="proxy" description="This setting is used when requests are sent to the Presence Agent via a proxy."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text" label="common" group="common" description="Setting for contentType can be set to any valid MimeType."/>
         <uriParameter name="toHeader" type="object" javaType="javax.sip.header.ToHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message receiver settings. Must implement the type javax.sip.header.ToHeader"/>
         <uriParameter name="consumer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="This setting is used to determine whether the kind of header (FromHeaderToHeader etc) that needs to be created for this endpoint"/>
         <uriParameter name="contactHeader" type="object" javaType="javax.sip.header.ContactHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="An optional custom Header object containing verbose contact details (email phone number etc). Must implement the type javax.sip.header.ContactHeader"/>
         <uriParameter name="implementationDebugLogFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="logging" group="logging" description="Name of client debug log file to use for logging"/>
         <uriParameter name="eventId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Setting for a String based event Id. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="maxForwards" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="proxy" group="proxy" description="Number of maximum proxy forwards"/>
         <uriParameter name="maxForwardsHeader" type="object" javaType="javax.sip.header.MaxForwardsHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing details on maximum proxy forwards. This header places a limit on the viaHeaders possible. Must implement the type javax.sip.header.MaxForwardsHeader"/>
         <uriParameter name="cacheConnections" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Should connections be cached by the SipStack to reduce cost of connection creation. This is useful if the connection is used for long running conversations."/>
         <uriParameter name="sipFactory" type="object" javaType="javax.sip.SipFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipFactory to create the SipStack to be used"/>
         <uriParameter name="toPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="common" group="common" description="Portname of the message receiver. Mandatory setting unless a registry based ToHeader is specified"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="fromHeader" type="object" javaType="javax.sip.header.FromHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message originator settings. Must implement the type javax.sip.header.FromHeader"/>
         <uriParameter name="transport" type="string" javaType="java.lang.String" kind="parameter" choice="tcp,udp" deprecated="false" defaultValue="tcp" label="common" group="common" description="Setting for choice of transport protocol. Valid choices are tcp or udp."/>
         <uriParameter name="contentSubType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="plain" label="common" group="common" description="Setting for contentSubType can be set to any valid MimeSubType."/>
         <uriParameter name="uri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="common" description="URI of the SIP server to connect to (the username and password can be included such as: john:secretmyserver:9999)"/>
         <uriParameter name="headerFactory" type="object" javaType="javax.sip.header.HeaderFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFactory"/>
         <uriParameter name="sipStack" type="object" javaType="javax.sip.SipStack" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipStack"/>
         <uriParameter name="toHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Hostname of the message receiver. Mandatory setting unless a registry based ToHeader is specified"/>
         <uriParameter name="implementationTraceLevel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="0" label="logging" group="logging" description="Logging level for tracing"/>
         <uriParameter name="callIdHeader" type="object" javaType="javax.sip.header.CallIdHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing call details. Must implement the type javax.sip.header.CallIdHeader"/>
         <uriParameter name="fromHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Hostname of the message originator. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>stomp</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Stomp</title>
      <description>The stomp component is used for communicating with Stomp compliant message brokers.</description>
      <syntax>stomp:destination</syntax>
      <class>org.apache.camel.component.stomp.StompComponent</class>
      <kind>component</kind>
      <scheme>stomp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stomp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="brokerURL" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The URI of the Stomp broker to connect to"/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.stomp.StompConfiguration" kind="property" deprecated="false" description="To use the shared stomp configuration"/>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The virtual host"/>
         <componentProperty name="login" type="string" javaType="java.lang.String" kind="property" deprecated="false" label="security" required="false" description="The username"/>
         <componentProperty name="passcode" type="string" javaType="java.lang.String" kind="property" deprecated="false" label="security" required="false" description="The password"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="brokerURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="tcp://localhost:61613" required="true" group="common" description="The URI of the Stomp broker to connect to"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="destination" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the queue"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The virtual host name"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="login" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="passcode" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password"/>
      </uriParameters>
   </component>
   <component>
      <id>class</id>
      <tags>
         <tag>core</tag>
         <tag>java</tag>
      </tags>
      <title>Class</title>
      <description>The Class Component is for invoking Java Classes (Java beans) from Camel.</description>
      <syntax>class:beanName</syntax>
      <class>org.apache.camel.component.beanclass.ClassComponent</class>
      <kind>component</kind>
      <scheme>class</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="cache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled Camel will cache the result of the first Registry look-up. Cache can be enabled if the bean in the Registry is defined as a singleton scope."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="method" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of the method to invoke on the bean"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="beanName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Sets the name of the bean to invoke"/>
         <uriParameter name="multiParameterArray" type="boolean" javaType="boolean" kind="parameter" deprecated="true" defaultValue="false" label="advanced" group="advanced" description="How to treat the parameters which are passed from the message body; if it is true the message body should be an array of parameters. Note: This option is used internally by Camel and is not intended for end users to use."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used for configuring additional properties on the bean"/>
      </uriParameters>
   </component>
   <component>
      <id>cometds</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>CometD</title>
      <description>The cometd component is a transport for working with the Jetty implementation of the cometd/bayeux protocol.</description>
      <syntax>cometds:host:port/channelName</syntax>
      <class>org.apache.camel.component.cometd.CometdComponent</class>
      <kind>component</kind>
      <scheme>cometds</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cometd-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="extensions" type="array" javaType="java.util.List&lt;org.cometd.bayeux.server.BayeuxServer.Extension&gt;" kind="property" deprecated="false" description="To use a list of custom BayeuxServer.Extension that allows modifying incoming and outgoing requests."/>
         <componentProperty name="sslKeystore" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The path to the keystore."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="sslPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password when using SSL."/>
         <componentProperty name="sslKeyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password for the keystore when using SSL."/>
         <componentProperty name="securityPolicy" type="object" javaType="org.cometd.bayeux.server.SecurityPolicy" kind="property" deprecated="false" description="To use a custom configured SecurityPolicy to control authorization"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="jsonCommented" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If true the server will accept JSON wrapped in a comment and will generate JSON wrapped in a comment. This is a defence against Ajax Hijacking."/>
         <uriParameter name="maxInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="The max client side poll timeout in milliseconds. A client will be removed if a connection is not received in this time."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="240000" group="common" description="The server side poll timeout in milliseconds. This is how long the server will hold a reconnect request before responding."/>
         <uriParameter name="filterPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The filterPath will be used by the CrossOriginFilter if the crosssOriginFilterOn is true"/>
         <uriParameter name="baseResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The root directory for the web resources or classpath. Use the protocol file: or classpath: depending if you want that the component loads the resource from file system or classpath. Classpath is required for OSGI deployment where the resources are packaged in the jar"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="disconnectLocalSession" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether to disconnect local sessions after publishing a message to its channel. Disconnecting local session is needed as they are not swept by default by CometD and therefore you can run out of memory."/>
         <uriParameter name="allowedOrigins" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="*" group="common" description="The origins domain that support to cross if the crosssOriginFilterOn is true"/>
         <uriParameter name="crossOriginFilterOn" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true the server will support for cross-domain filtering"/>
         <uriParameter name="logLevel" type="string" javaType="int" kind="parameter" choice="0,1,2" deprecated="false" defaultValue="1" group="common" description="Logging level. 0=none 1=info 2=debug."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Host port number"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname"/>
         <uriParameter name="channelName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The channelName represents a topic that can be subscribed to by the Camel endpoints."/>
         <uriParameter name="interval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="The client side poll timeout in milliseconds. How long a client will wait between reconnects"/>
         <uriParameter name="multiFrameInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1500" group="common" description="The client side poll timeout if multiple connections are detected from the same browser."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="sessionHeadersEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to include the server session headers in the Camel message when creating a Camel Message for incoming requests."/>
      </uriParameters>
   </component>
   <component>
      <id>hbase</id>
      <tags>
         <tag>hadoop</tag>
      </tags>
      <title>HBase</title>
      <description>For reading/writing from/to an HBase store (Hadoop database).</description>
      <syntax>hbase:tableName</syntax>
      <class>org.apache.camel.component.hbase.HBaseComponent</class>
      <kind>component</kind>
      <scheme>hbase</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-hbase-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="poolMaxSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Maximum number of references to keep for each table in the HTable pool. The default value is 10."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.hadoop.conf.Configuration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="rowMapping" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="To map the key/values from the Map to a HBaseRow. The following keys is supported: rowId - The id of the row. This has limited use as the row usually changes per Exchange. rowType - The type to covert row id to. Supported operations: CamelHBaseScan. family - The column family. Supports a number suffix for referring to more than one columns. qualifier - The column qualifier. Supports a number suffix for referring to more than one columns. value - The value. Supports a number suffix for referring to more than one columns valueType - The value type. Supports a number suffix for referring to more than one columns. Supported operations: CamelHBaseGet and CamelHBaseScan."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="filters" type="array" javaType="java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;" kind="parameter" deprecated="false" group="common" description="A list of filters to use."/>
         <uriParameter name="removeHandler" type="object" javaType="org.apache.camel.component.hbase.HBaseRemoveHandler" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom HBaseRemoveHandler that is executed when a row is to be removed."/>
         <uriParameter name="mappingStrategyName" type="string" javaType="java.lang.String" kind="parameter" choice="header,body" deprecated="false" group="common" description="The strategy to use for mapping Camel messages to HBase columns. Supported values: header or body."/>
         <uriParameter name="remove" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If the option is true Camel HBase Consumer will remove the rows which it processes."/>
         <uriParameter name="tableName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the table"/>
         <uriParameter name="cellMappingStrategyFactory" type="object" javaType="org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory" kind="parameter" deprecated="false" group="common" description="To use a custom CellMappingStrategyFactory that is responsible for mapping cells."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="rowModel" type="object" javaType="org.apache.camel.component.hbase.model.HBaseRow" kind="parameter" deprecated="false" group="common" description="An instance of org.apache.camel.component.hbase.model.HBaseRow which describes how each row should be modeled"/>
         <uriParameter name="maxResults" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="producer" group="producer" description="The maximum number of rows to scan."/>
         <uriParameter name="userGroupInformation" type="object" javaType="org.apache.hadoop.security.UserGroupInformation" kind="parameter" deprecated="false" group="common" description="Defines privileges to communicate with HBase such as using kerberos."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited."/>
         <uriParameter name="mappingStrategyClassName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The class name of a custom mapping strategy implementation."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="CamelHBasePut,CamelHBaseGet,CamelHBaseScan,CamelHBaseDelete" deprecated="false" label="consumer" group="consumer" description="The HBase operation to perform"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>netty</id>
      <tags>
         <tag>networking</tag>
         <tag>tcp</tag>
         <tag>udp</tag>
      </tags>
      <title>Netty</title>
      <description>Socket level networking using TCP or UDP with the Netty 3.x library.</description>
      <syntax>netty:protocol:host:port</syntax>
      <class>org.apache.camel.component.netty.NettyComponent</class>
      <kind>component</kind>
      <scheme>netty</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-netty-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.netty.NettyConfiguration" kind="property" deprecated="false" description="To use the NettyConfiguration as configuration when creating endpoints."/>
         <componentProperty name="maximumPoolSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The core pool size for the ordered thread pool if its in use. The default value is 16."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer."/>
         <uriParameter name="enabledProtocols" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLSv1,TLSv1.1,TLSv1.2" label="security" group="security" description="Which protocols to enable when using SSL"/>
         <uriParameter name="maxChannelMemorySize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10485760" label="consumer,advanced" group="consumer (advanced)" description="The maximum total size of the queued events per channel when using orderedThreadPoolExecutor. Specify 0 to disable."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="keyStoreFormat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="JKS" label="security" group="security" description="Keystore format to be used for payload encryption. Defaults to JKS if not set"/>
         <uriParameter name="producerPoolMinIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects."/>
         <uriParameter name="ssl" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Setting to specify whether SSL encryption is applied to this endpoint"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="tcp,udp" deprecated="false" required="true" group="common" description="The protocol to use which can be tcp or udp."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="SunX509" label="security" group="security" description="Security provider to be used for payload encryption. Defaults to SunX509 if not set."/>
         <uriParameter name="delimiter" type="string" javaType="org.apache.camel.component.netty.TextLineDelimiter" kind="parameter" choice="LINE,NULL" deprecated="false" defaultValue="LINE" label="codec" group="codec" description="The delimiter to use for the textline codec. Possible values are LINE and NULL."/>
         <uriParameter name="bossPool" type="object" javaType="org.jboss.netty.channel.socket.nio.BossPool" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit org.jboss.netty.channel.socket.nio.BossPool as the boss thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own boss pool with 1 core thread."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The hostname. For the consumer the hostname is localhost or 0.0.0.0 For the producer the hostname is the remote host to connect to"/>
         <uriParameter name="connectTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="producer" group="producer" description="Time to wait for a socket connection to be available. Value is in millis."/>
         <uriParameter name="options" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used."/>
         <uriParameter name="textline" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="codec" group="codec" description="Only used for TCP. If no codec is specified you can use this flag to indicate a text line based codec; if not specified or the value is false then Object Serialization is assumed over TCP."/>
         <uriParameter name="producerPoolMinEvictableIdle" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300000" label="producer,advanced" group="producer (advanced)" description="Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to improve TCP protocol performance"/>
         <uriParameter name="udpConnectionlessSending" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="This option supports connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port."/>
         <uriParameter name="needClientAuth" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,security" group="security" description="Configures whether the server needs client authentication when using SSL."/>
         <uriParameter name="sslHandler" type="object" javaType="org.jboss.netty.handler.ssl.SslHandler" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a class that could be used to return an SSL Handler"/>
         <uriParameter name="encoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="keyStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption"/>
         <uriParameter name="decoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="reuseAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to facilitate socket multiplexing"/>
         <uriParameter name="decoder" type="object" javaType="org.jboss.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="A custom ChannelHandler class that can be used to perform special marshalling of inbound payloads. Must override org.jboss.netty.channel.ChannelUpStreamHandler."/>
         <uriParameter name="workerPool" type="object" javaType="org.jboss.netty.channel.socket.nio.WorkerPool" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit org.jboss.netty.channel.socket.nio.WorkerPool as the worker thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own worker pool with 2 x cpu count core threads."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="The encoding (a charset name) to use for the textline codec. If not provided Camel will use the JVM default Charset."/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to set endpoint as one-way or request-response"/>
         <uriParameter name="encoder" type="object" javaType="org.jboss.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="A custom ChannelHandler class that can be used to perform special marshalling of outbound payloads. Must override org.jboss.netty.channel.ChannelDownStreamHandler."/>
         <uriParameter name="workerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty"/>
         <uriParameter name="backlog" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="The host port number"/>
         <uriParameter name="networkInterface" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When using UDP then this option can be used to specify a network interface by its name such as eth0 to join a multicast group."/>
         <uriParameter name="allowDefaultCodec" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="codec" group="codec" description="The netty component installs a default codec if both encoder/deocder is null and textline is false. Setting allowDefaultCodec to false prevents the netty component from installing a default codec as the first element in the filter chain."/>
         <uriParameter name="passphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password setting to use in order to encrypt/decrypt payloads sent using SSH"/>
         <uriParameter name="clientMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the clientMode is true netty consumer will connect the address as a TCP client."/>
         <uriParameter name="nettyServerBootstrapFactory" type="object" javaType="org.apache.camel.component.netty.NettyServerBootstrapFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom NettyServerBootstrapFactory"/>
         <uriParameter name="decoderMaxLineLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1024" label="codec" group="codec" description="The max line length to use for the textline codec."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="broadcast" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Setting to choose Multicast over UDP"/>
         <uriParameter name="trustStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="bossCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty"/>
         <uriParameter name="sslClientCertHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range."/>
         <uriParameter name="disconnectOnNoReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="keyStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="autoAppendDelimiter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="codec" group="codec" description="Whether or not to auto append missing end delimiter when sending using the textline codec."/>
         <uriParameter name="serverPipelineFactory" type="object" javaType="org.apache.camel.component.netty.ServerPipelineFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom ServerPipelineFactory"/>
         <uriParameter name="producerPoolMaxIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of idle instances in the pool."/>
         <uriParameter name="maxTotalMemorySize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="209715200" label="consumer,advanced" group="consumer (advanced)" description="The maximum total size of the queued events for this pool when using orderedThreadPoolExecutor. Specify 0 to disable."/>
         <uriParameter name="producerPoolEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether producer pool is enabled or not. Important: Do not turn this off as the pooling is needed for handling concurrency and reliable request/reply."/>
         <uriParameter name="trustStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption"/>
         <uriParameter name="noReplyLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="useChannelBuffer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If the useChannelBuffer is true netty producer will turn the message body into ChannelBuffer before sending it out."/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty&apos;s ReadTimeoutHandler to trigger the timeout."/>
         <uriParameter name="clientPipelineFactory" type="object" javaType="org.apache.camel.component.netty.ClientPipelineFactory" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="To use a custom ClientPipelineFactory"/>
         <uriParameter name="receiveBufferSizePredictor" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Configures the buffer size predictor. See details at Jetty documentation and this mail thread."/>
         <uriParameter name="keepAlive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to ensure socket is not closed due to inactivity"/>
         <uriParameter name="producerPoolMaxActive" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit."/>
         <uriParameter name="sendBufferSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="lazyChannelCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started."/>
         <uriParameter name="channelGroup" type="object" javaType="org.jboss.netty.channel.group.ChannelGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit ChannelGroup."/>
         <uriParameter name="orderedThreadPoolExecutor" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to use ordered thread pool to ensure events are processed orderly on the same channel. See details at the netty javadoc of org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor for more details."/>
         <uriParameter name="bootstrapConfiguration" type="object" javaType="org.apache.camel.component.netty.NettyServerBootstrapConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes."/>
         <uriParameter name="serverClosedChannelExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="DEBUG" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server."/>
         <uriParameter name="serverExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an exception then its logged using this logging level."/>
      </uriParameters>
   </component>
   <component>
      <id>spring-integration</id>
      <tags>
         <tag>spring</tag>
         <tag>eventbus</tag>
      </tags>
      <title>Spring Integration</title>
      <description>Bridges Camel with Spring Integration.</description>
      <syntax>spring-integration:defaultChannel</syntax>
      <class>org.apache.camel.component.spring.integration.SpringIntegrationComponent</class>
      <kind>component</kind>
      <scheme>spring-integration</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-integration-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="inOut" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="The exchange pattern that the Spring integration endpoint should use. If inOut=true then a reply channel is expected either from the Spring Integration Message header or configured on the endpoint."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="outputChannel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The Spring integration output channel name that is used to send messages to Spring integration."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="defaultChannel" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The default channel name which is used by the Spring Integration Spring context. It will equal to the inputChannel name for the Spring Integration consumer and the outputChannel name for the Spring Integration provider."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="inputChannel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Spring integration input channel name that this endpoint wants to consume from Spring integration."/>
      </uriParameters>
   </component>
   <component>
      <id>netty4</id>
      <tags>
         <tag>networking</tag>
         <tag>tcp</tag>
         <tag>udp</tag>
      </tags>
      <title>Netty4</title>
      <description>Socket level networking using TCP or UDP with the Netty 4.x library.</description>
      <syntax>netty4:protocol:host:port</syntax>
      <class>org.apache.camel.component.netty4.NettyComponent</class>
      <kind>component</kind>
      <scheme>netty4</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-netty4-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.netty4.NettyConfiguration" kind="property" deprecated="false" description="To use the NettyConfiguration as configuration when creating endpoints."/>
         <componentProperty name="executorService" type="object" javaType="io.netty.util.concurrent.EventExecutorGroup" kind="property" deprecated="false" description="To use the given EventExecutorGroup"/>
         <componentProperty name="maximumPoolSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The thread pool size for the EventExecutorGroup if its in use. The default value is 16."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="usingExecutorService" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to use ordered thread pool to ensure events are processed orderly on the same channel."/>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer."/>
         <uriParameter name="enabledProtocols" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLSv1,TLSv1.1,TLSv1.2" label="security" group="security" description="Which protocols to enable when using SSL"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="keyStoreFormat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Keystore format to be used for payload encryption. Defaults to JKS if not set"/>
         <uriParameter name="producerPoolMinIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects."/>
         <uriParameter name="ssl" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Setting to specify whether SSL encryption is applied to this endpoint"/>
         <uriParameter name="bossGroup" type="object" javaType="io.netty.channel.EventLoopGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="tcp,udp" deprecated="false" required="true" group="common" description="The protocol to use which can be tcp or udp."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Security provider to be used for payload encryption. Defaults to SunX509 if not set."/>
         <uriParameter name="delimiter" type="string" javaType="org.apache.camel.component.netty4.TextLineDelimiter" kind="parameter" choice="LINE,NULL" deprecated="false" defaultValue="LINE" label="codec" group="codec" description="The delimiter to use for the textline codec. Possible values are LINE and NULL."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The hostname. For the consumer the hostname is localhost or 0.0.0.0 For the producer the hostname is the remote host to connect to"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="producer" group="producer" description="Time to wait for a socket connection to be available. Value is in millis."/>
         <uriParameter name="options" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used."/>
         <uriParameter name="textline" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="codec" group="codec" description="Only used for TCP. If no codec is specified you can use this flag to indicate a text line based codec; if not specified or the value is false then Object Serialization is assumed over TCP."/>
         <uriParameter name="workerGroup" type="object" javaType="io.netty.channel.EventLoopGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own boss pool with 1 core thread."/>
         <uriParameter name="producerPoolMinEvictableIdle" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300000" label="producer,advanced" group="producer (advanced)" description="Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to improve TCP protocol performance"/>
         <uriParameter name="udpConnectionlessSending" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="This option supports connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port."/>
         <uriParameter name="needClientAuth" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,security" group="security" description="Configures whether the server needs client authentication when using SSL."/>
         <uriParameter name="sslHandler" type="object" javaType="io.netty.handler.ssl.SslHandler" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a class that could be used to return an SSL Handler"/>
         <uriParameter name="encoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="keyStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption"/>
         <uriParameter name="decoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="reuseAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to facilitate socket multiplexing"/>
         <uriParameter name="decoder" type="object" javaType="io.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="A custom ChannelHandler class that can be used to perform special marshalling of inbound payloads."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="The encoding (a charset name) to use for the textline codec. If not provided Camel will use the JVM default Charset."/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to set endpoint as one-way or request-response"/>
         <uriParameter name="encoder" type="object" javaType="io.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="A custom ChannelHandler class that can be used to perform special marshalling of outbound payloads."/>
         <uriParameter name="workerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty"/>
         <uriParameter name="backlog" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="The host port number"/>
         <uriParameter name="networkInterface" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When using UDP then this option can be used to specify a network interface by its name such as eth0 to join a multicast group."/>
         <uriParameter name="allowDefaultCodec" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="codec" group="codec" description="The netty component installs a default codec if both encoder/deocder is null and textline is false. Setting allowDefaultCodec to false prevents the netty component from installing a default codec as the first element in the filter chain."/>
         <uriParameter name="passphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password setting to use in order to encrypt/decrypt payloads sent using SSH"/>
         <uriParameter name="clientMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the clientMode is true netty consumer will connect the address as a TCP client."/>
         <uriParameter name="nettyServerBootstrapFactory" type="object" javaType="org.apache.camel.component.netty4.NettyServerBootstrapFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom NettyServerBootstrapFactory"/>
         <uriParameter name="decoderMaxLineLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1024" label="codec" group="codec" description="The max line length to use for the textline codec."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="broadcast" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Setting to choose Multicast over UDP"/>
         <uriParameter name="trustStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="bossCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty"/>
         <uriParameter name="serverInitializerFactory" type="object" javaType="org.apache.camel.component.netty4.ServerInitializerFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom ServerInitializerFactory"/>
         <uriParameter name="sslClientCertHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range."/>
         <uriParameter name="disconnectOnNoReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back."/>
         <uriParameter name="useByteBuf" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If the useByteBuf is true netty producer will turn the message body into ByteBuf before sending it out."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="keyStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="autoAppendDelimiter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="codec" group="codec" description="Whether or not to auto append missing end delimiter when sending using the textline codec."/>
         <uriParameter name="reuseChannel" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="This option allows producers to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useable if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key link NettyConstantsNETTY_CHANNEL which allows you to obtain the channel during routing and use it as well."/>
         <uriParameter name="producerPoolMaxIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of idle instances in the pool."/>
         <uriParameter name="reconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Used only in clientMode in consumer the consumer will attempt to reconnect on disconnection if this is enabled"/>
         <uriParameter name="producerPoolEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether producer pool is enabled or not. Important: Do not turn this off as the pooling is needed for handling concurrency and reliable request/reply."/>
         <uriParameter name="trustStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption"/>
         <uriParameter name="noReplyLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty&apos;s ReadTimeoutHandler to trigger the timeout."/>
         <uriParameter name="receiveBufferSizePredictor" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Configures the buffer size predictor. See details at Jetty documentation and this mail thread."/>
         <uriParameter name="keepAlive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to ensure socket is not closed due to inactivity"/>
         <uriParameter name="producerPoolMaxActive" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit."/>
         <uriParameter name="clientInitializerFactory" type="object" javaType="org.apache.camel.component.netty4.ClientInitializerFactory" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="To use a custom ClientInitializerFactory"/>
         <uriParameter name="sendBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="reconnectInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="consumer" group="consumer" description="Used if reconnect and clientMode is enabled. The interval in milli seconds to attempt reconnection"/>
         <uriParameter name="lazyChannelCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started."/>
         <uriParameter name="allowSerializedHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP when transferExchange is true. When set to true serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="channelGroup" type="object" javaType="io.netty.channel.group.ChannelGroup" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a explicit ChannelGroup."/>
         <uriParameter name="bootstrapConfiguration" type="object" javaType="org.apache.camel.component.netty4.NettyServerBootstrapConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes."/>
         <uriParameter name="serverClosedChannelExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="DEBUG" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server."/>
         <uriParameter name="nativeTransport" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use native transport instead of NIO. Native transport takes advantage of the host operating system and is only supported on some platforms. You need to add the netty JAR for the host operating system you are using. See more details at: http://netty.io/wiki/native-transports.html"/>
         <uriParameter name="udpByteArrayCodec" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="For UDP only. If enabled the using byte array codec instead of Java serialization protocol."/>
         <uriParameter name="serverExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an exception then its logged using this logging level."/>
      </uriParameters>
   </component>
   <component>
      <id>sips</id>
      <tags>
         <tag>mobile</tag>
      </tags>
      <title>SIP</title>
      <description>To send and receive messages using the SIP protocol (used in telco and mobile).</description>
      <syntax>sips:uri</syntax>
      <class>org.apache.camel.component.sip.SipComponent</class>
      <kind>component</kind>
      <scheme>sips</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sip-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="addressFactory" type="object" javaType="javax.sip.address.AddressFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AddressFactory"/>
         <uriParameter name="messageFactory" type="object" javaType="javax.sip.message.MessageFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom MessageFactory"/>
         <uriParameter name="contentTypeHeader" type="object" javaType="javax.sip.header.ContentTypeHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message content details. Must implement the type javax.sip.header.ContentTypeHeader"/>
         <uriParameter name="presenceAgent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="This setting is used to distinguish between a Presence Agent &amp; a consumer. This is due to the fact that the SIP Camel component ships with a basic Presence Agent (for testing purposes only). Consumers have to set this flag to true."/>
         <uriParameter name="fromPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="common" group="common" description="Port of the message originator. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="fromUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Username of the message originator. Mandatory setting unless a registry based custom FromHeader is specified."/>
         <uriParameter name="eventHeader" type="object" javaType="javax.sip.header.EventHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing event details. Must implement the type javax.sip.header.EventHeader"/>
         <uriParameter name="viaHeaders" type="array" javaType="java.util.List&lt;javax.sip.header.ViaHeader&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="List of custom Header objects of the type javax.sip.header.ViaHeader. Each ViaHeader containing a proxy address for request forwarding. (Note this header is automatically updated by each proxy when the request arrives at its listener)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="stackName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="NAME_NOT_SET" label="common" group="common" description="Name of the SIP Stack instance associated with an SIP Endpoint."/>
         <uriParameter name="receiveTimeoutMillis" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="common" group="common" description="Setting for specifying amount of time to wait for a Response and/or Acknowledgement can be received from another SIP stack"/>
         <uriParameter name="sipUri" type="object" javaType="javax.sip.address.SipURI" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipURI. If none configured then the SipUri fallback to use the options toUser toHost:toPort"/>
         <uriParameter name="implementationServerLogFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="logging" group="logging" description="Name of server log file to use for logging"/>
         <uriParameter name="toUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Username of the message receiver. Mandatory setting unless a registry based custom ToHeader is specified."/>
         <uriParameter name="listeningPoint" type="object" javaType="javax.sip.ListeningPoint" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom ListeningPoint implementation"/>
         <uriParameter name="msgExpiration" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="3600" label="common" group="common" description="The amount of time a message received at an endpoint is considered valid"/>
         <uriParameter name="eventHeaderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Setting for a String based event type."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="extensionHeader" type="object" javaType="javax.sip.header.ExtensionHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing user/application specific details. Must implement the type javax.sip.header.ExtensionHeader"/>
         <uriParameter name="expiresHeader" type="object" javaType="javax.sip.header.ExpiresHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message expiration details. Must implement the type javax.sip.header.ExpiresHeader"/>
         <uriParameter name="maxMessageSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1048576" label="advanced" group="advanced" description="Setting for maximum allowed Message size in bytes."/>
         <uriParameter name="useRouterForAllUris" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="proxy" group="proxy" description="This setting is used when requests are sent to the Presence Agent via a proxy."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text" label="common" group="common" description="Setting for contentType can be set to any valid MimeType."/>
         <uriParameter name="toHeader" type="object" javaType="javax.sip.header.ToHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message receiver settings. Must implement the type javax.sip.header.ToHeader"/>
         <uriParameter name="consumer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="This setting is used to determine whether the kind of header (FromHeaderToHeader etc) that needs to be created for this endpoint"/>
         <uriParameter name="contactHeader" type="object" javaType="javax.sip.header.ContactHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="An optional custom Header object containing verbose contact details (email phone number etc). Must implement the type javax.sip.header.ContactHeader"/>
         <uriParameter name="implementationDebugLogFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="logging" group="logging" description="Name of client debug log file to use for logging"/>
         <uriParameter name="eventId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Setting for a String based event Id. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="maxForwards" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="proxy" group="proxy" description="Number of maximum proxy forwards"/>
         <uriParameter name="maxForwardsHeader" type="object" javaType="javax.sip.header.MaxForwardsHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing details on maximum proxy forwards. This header places a limit on the viaHeaders possible. Must implement the type javax.sip.header.MaxForwardsHeader"/>
         <uriParameter name="cacheConnections" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Should connections be cached by the SipStack to reduce cost of connection creation. This is useful if the connection is used for long running conversations."/>
         <uriParameter name="sipFactory" type="object" javaType="javax.sip.SipFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipFactory to create the SipStack to be used"/>
         <uriParameter name="toPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="common" group="common" description="Portname of the message receiver. Mandatory setting unless a registry based ToHeader is specified"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="fromHeader" type="object" javaType="javax.sip.header.FromHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing message originator settings. Must implement the type javax.sip.header.FromHeader"/>
         <uriParameter name="transport" type="string" javaType="java.lang.String" kind="parameter" choice="tcp,udp" deprecated="false" defaultValue="tcp" label="common" group="common" description="Setting for choice of transport protocol. Valid choices are tcp or udp."/>
         <uriParameter name="contentSubType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="plain" label="common" group="common" description="Setting for contentSubType can be set to any valid MimeSubType."/>
         <uriParameter name="uri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="common" description="URI of the SIP server to connect to (the username and password can be included such as: john:secretmyserver:9999)"/>
         <uriParameter name="headerFactory" type="object" javaType="javax.sip.header.HeaderFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFactory"/>
         <uriParameter name="sipStack" type="object" javaType="javax.sip.SipStack" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom SipStack"/>
         <uriParameter name="toHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Hostname of the message receiver. Mandatory setting unless a registry based ToHeader is specified"/>
         <uriParameter name="implementationTraceLevel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="0" label="logging" group="logging" description="Logging level for tracing"/>
         <uriParameter name="callIdHeader" type="object" javaType="javax.sip.header.CallIdHeader" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A custom Header object containing call details. Must implement the type javax.sip.header.CallIdHeader"/>
         <uriParameter name="fromHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Hostname of the message originator. Mandatory setting unless a registry based FromHeader is specified"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>pop3s</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>POP3S</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>pop3s:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>pop3s</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>javaspace</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>JavaSpace</title>
      <description>Sending and receiving messages through JavaSpace.</description>
      <syntax>javaspace:url</syntax>
      <class>org.apache.camel.component.javaspace.JavaSpaceComponent</class>
      <kind>component</kind>
      <scheme>javaspace</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-javaspace-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="spaceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="Specifies the JavaSpace name."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="transactionTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Specifies the transaction timeout in millis. By default there is no timeout."/>
         <uriParameter name="verb" type="string" javaType="java.lang.String" kind="parameter" choice="take,read" deprecated="false" defaultValue="take" label="consumer" group="consumer" description="Specifies the verb for getting JavaSpace entries."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="templateId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="If present this option specifies the Spring bean ID of the template to use for reading/taking entries."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Specifies the number of concurrent consumers getting entries from the JavaSpace."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The URL to the JavaSpace server"/>
         <uriParameter name="transactional" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true sending and receiving entries is performed within a transaction."/>
      </uriParameters>
   </component>
   <component>
      <id>pdf</id>
      <tags>
         <tag>pdf</tag>
         <tag>printing</tag>
      </tags>
      <title>PDF</title>
      <description>The pdf components provides the ability to create modify or extract content from PDF documents.</description>
      <syntax>pdf:operation</syntax>
      <class>org.apache.camel.component.pdf.PdfComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>pdf</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-pdf-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="marginRight" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="40" group="producer" description="Margin right in pixels"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="textProcessingFactory" type="string" javaType="org.apache.camel.component.pdf.TextProcessingFactory" kind="parameter" choice="autoFormatting,lineTermination" deprecated="false" defaultValue="lineTermination" group="producer" description="Text processing to use. autoFormatting: Text is getting sliced by words then max amount of words that fits in the line will be written into pdf document. With this strategy all words that doesn&apos;t fit in the line will be moved to the new line. lineTermination: Builds set of classes for line-termination writing strategy. Text getting sliced by line termination symbol and then it will be written regardless it fits in the line or not."/>
         <uriParameter name="pageSize" type="string" javaType="org.apache.pdfbox.pdmodel.common.PDRectangle" kind="parameter" choice="PAGE_SIZE_A0,PAGE_SIZE_A1,PAGE_SIZE_A2,PAGE_SIZE_A3,PAGE_SIZE_A4,PAGE_SIZE_A5,PAGE_SIZE_A6,PAGE_SIZE_LETTER" deprecated="false" defaultValue="PAGE_SIZE_A4" group="producer" description="Page size"/>
         <uriParameter name="fontSize" type="number" javaType="float" kind="parameter" deprecated="false" defaultValue="14" group="producer" description="Font size in pixels"/>
         <uriParameter name="marginBottom" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="20" group="producer" description="Margin bottom in pixels"/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.pdf.PdfOperation" kind="path" choice="create,append,extractText" deprecated="false" required="true" group="producer" description="Operation type"/>
         <uriParameter name="marginTop" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="20" group="producer" description="Margin top in pixels"/>
         <uriParameter name="font" type="object" javaType="org.apache.pdfbox.pdmodel.font.PDFont" kind="parameter" deprecated="false" defaultValue="Helvetica" group="producer" description="Font"/>
         <uriParameter name="marginLeft" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="20" group="producer" description="Margin left in pixels"/>
      </uriParameters>
   </component>
   <component>
      <id>atmosphere-websocket</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>Atmosphere Websocket</title>
      <description>To exchange data with external Websocket clients using Atmosphere.</description>
      <syntax>atmosphere-websocket:servicePath</syntax>
      <class>org.apache.camel.component.atmosphere.websocket.WebsocketComponent</class>
      <kind>component</kind>
      <extendsScheme>servlet</extendsScheme>
      <scheme>atmosphere-websocket</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-atmosphere-websocket-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <componentProperty name="attachmentMultipartBinding" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to automatic bind multipart/form-data as attachments on the Camel Exchange. This is turn off by default as this may require servet specific configuration to enable this when using Servlet's."/>
         <componentProperty name="servletName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Default name of servlet to use. The default name is CamelServlet."/>
         <componentProperty name="httpRegistry" type="object" javaType="org.apache.camel.component.servlet.HttpRegistry" kind="property" deprecated="false" description="To use a custom org.apache.camel.component.servlet.HttpRegistry."/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" description="To use the shared HttpConfiguration as base configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendToAll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to send to all (broadcast) or send to a single receiver."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="servletName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelServlet" label="consumer" group="consumer" description="Name of the servlet to use"/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="useStreaming" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="To enable streaming to send data as multiple text fragments."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="eagerCheckContentAvailable" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="common" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="async" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Configure the consumer to work in async mode"/>
         <uriParameter name="responseBufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom buffer size on the javax.servlet.ServletResponse."/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="servicePath" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of websocket endpoint"/>
         <uriParameter name="optionsEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="traceEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
      </uriParameters>
   </component>
   <component>
      <id>hdfs</id>
      <tags>
         <tag>hadoop</tag>
         <tag>file</tag>
      </tags>
      <title>HDFS</title>
      <description>For reading/writing from/to an HDFS filesystem using Hadoop 1.x.</description>
      <syntax>hdfs:hostName:port/path</syntax>
      <class>org.apache.camel.component.hdfs.HdfsComponent</class>
      <kind>component</kind>
      <scheme>hdfs</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-hdfs-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="jAASConfiguration" type="object" javaType="javax.security.auth.login.Configuration" kind="property" deprecated="false" description="To use the given configuration for security with JAAS."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="hostName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="HDFS host to use"/>
         <uriParameter name="checkIdleInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="500" label="advanced" group="advanced" description="How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is IDLE."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="pattern" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="*" label="consumer" group="consumer" description="The pattern used for scanning the directory"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="For the consumer how much to wait (milliseconds) before to start scanning the directory."/>
         <uriParameter name="compressionType" type="object" javaType="org.apache.hadoop.io.SequenceFile.CompressionType" kind="parameter" deprecated="false" defaultValue="NONE" label="advanced" group="advanced" description="The compression type to use (is default not in use)"/>
         <uriParameter name="fileSystemType" type="string" javaType="org.apache.camel.component.hdfs.HdfsFileSystemType" kind="parameter" choice="LOCAL,HDFS" deprecated="false" defaultValue="HDFS" group="common" description="Set to LOCAL to not use HDFS but local java.io.File instead."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The directory path to use"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="valueType" type="string" javaType="org.apache.camel.component.hdfs.WritableType" kind="parameter" choice="NULL,BOOLEAN,BYTE,INT,FLOAT,LONG,DOUBLE,TEXT,BYTES" deprecated="false" defaultValue="BYTES" group="common" description="The type for the key in case of sequence or map files"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="keyType" type="string" javaType="org.apache.camel.component.hdfs.WritableType" kind="parameter" choice="NULL,BOOLEAN,BYTE,INT,FLOAT,LONG,DOUBLE,TEXT,BYTES" deprecated="false" defaultValue="NULL" group="common" description="The type for the key in case of sequence or map files."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="overwrite" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether to overwrite existing files with the same name"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="owner" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped."/>
         <uriParameter name="replication" type="integer" javaType="short" kind="parameter" deprecated="false" defaultValue="3" label="advanced" group="advanced" description="The HDFS replication factor"/>
         <uriParameter name="connectOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to connect to the HDFS file system on starting the producer/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup and not block for up till 15 minutes."/>
         <uriParameter name="chunkSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" label="advanced" group="advanced" description="When reading a normal file this is split into chunks producing a message per chunk."/>
         <uriParameter name="openedSuffix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="opened" label="advanced" group="advanced" description="When a file is opened for reading/writing the file is renamed with this suffix to avoid to read it during the writing phase."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="blockSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="67108864" label="advanced" group="advanced" description="The size of the HDFS blocks"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer" group="consumer" description="The interval (milliseconds) between the directory scans."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="8020" group="common" description="HDFS port to use"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="splitStrategy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="In the current version of Hadoop opening a file in append mode is disabled since it&apos;s not very reliable. So for the moment it&apos;s only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:valueST:value... where ST can be: BYTES a new file is created and the old is closed when the number of written bytes is more than value MESSAGES a new file is created and the old is closed when the number of written messages is more than value IDLE a new file is created and the old is closed when no writing happened in the last value milliseconds"/>
         <uriParameter name="compressionCodec" type="string" javaType="org.apache.camel.component.hdfs.HdfsCompressionCodec" kind="parameter" choice="DEFAULT,GZIP,BZIP2" deprecated="false" defaultValue="DEFAULT" label="advanced" group="advanced" description="The compression codec to use"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="fileType" type="string" javaType="org.apache.camel.component.hdfs.HdfsFileType" kind="parameter" choice="NORMAL_FILE,SEQUENCE_FILE,MAP_FILE,BLOOMMAP_FILE,ARRAY_FILE" deprecated="false" defaultValue="NORMAL_FILE" group="common" description="The file type to use. For more details see Hadoop HDFS documentation about the various files types."/>
         <uriParameter name="append" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Append to existing file. Notice that not all HDFS file systems support the append option."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" label="advanced" group="advanced" description="The buffer size used by HDFS"/>
         <uriParameter name="readSuffix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="read" label="advanced" group="advanced" description="Once the file has been read is renamed with this suffix to avoid to read it again."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-cw</id>
      <tags>
         <tag>cloud</tag>
         <tag>monitoring</tag>
      </tags>
      <title>AWS CloudWatch</title>
      <description>The aws-cw component is used for sending metrics to an Amazon CloudWatch.</description>
      <syntax>aws-cw:namespace</syntax>
      <class>org.apache.camel.component.aws.cw.CwComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-cw</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="unit" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The metric unit"/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="namespace" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The metric namespace"/>
         <uriParameter name="amazonCwClient" type="object" javaType="com.amazonaws.services.cloudwatch.AmazonCloudWatch" kind="parameter" deprecated="false" group="producer" description="To use the AmazonCloudWatch as the client"/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The metric name"/>
         <uriParameter name="amazonCwEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-CW client wants to work with."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="value" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" group="producer" description="The metric value"/>
         <uriParameter name="timestamp" type="string" javaType="java.util.Date" kind="parameter" deprecated="false" group="producer" description="The metric timestamp"/>
      </uriParameters>
   </component>
   <component>
      <id>jbpm</id>
      <tags>
         <tag>process</tag>
      </tags>
      <title>JBPM</title>
      <description>The jbpm component provides integration with jBPM (Business Process Management).</description>
      <syntax>jbpm:connectionURL</syntax>
      <class>org.apache.camel.component.jbpm.JBPMComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>jbpm</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jbpm-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="contentId to use when retrieving attachments"/>
         <uriParameter name="language" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The language to use when filtering user tasks"/>
         <uriParameter name="workItemId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="the id of the work item"/>
         <uriParameter name="extraJaxbClasses" type="string" javaType="java.lang.Class[]" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To load additional classes when working with XML"/>
         <uriParameter name="timeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="A timeout value"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password for authentication"/>
         <uriParameter name="maxNumber" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="the maximum number of rules that should be fired"/>
         <uriParameter name="processId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="the id of the process that should be acted upon"/>
         <uriParameter name="deploymentId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="producer" description="The id of the deployment"/>
         <uriParameter name="connectionURL" type="string" javaType="java.net.URL" kind="path" deprecated="false" required="true" group="producer" description="The URL to the jBPM server."/>
         <uriParameter name="attachmentId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="attachId to use when retrieving attachments"/>
         <uriParameter name="event" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" group="producer" description="the data associated with this event when signalEvent operation is performed"/>
         <uriParameter name="value" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" group="producer" description="the value to assign to the global identifier"/>
         <uriParameter name="identifier" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="identifier the global identifier"/>
         <uriParameter name="processInstanceId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="the id of the process instance"/>
         <uriParameter name="targetUserId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The targetUserId used when delegating a task"/>
         <uriParameter name="eventType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="the type of event to use when signalEvent operation is performed"/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username for authentication"/>
         <uriParameter name="userId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="userId to use with task operations"/>
         <uriParameter name="task" type="object" javaType="org.kie.api.task.model.Task" kind="parameter" deprecated="false" group="producer" description="The task instance to use with task operations"/>
         <uriParameter name="entities" type="array" javaType="java.util.List&lt;org.kie.api.task.model.OrganizationalEntity&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The potentialOwners when nominateTask operation is performed"/>
         <uriParameter name="statuses" type="array" javaType="java.util.List&lt;org.kie.api.task.model.Status&gt;" kind="parameter" deprecated="false" label="filter" group="filter" description="The list of status to use when filtering tasks"/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="startProcess" label="producer" group="producer" description="The operation to perform"/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="the variables that should be set for various operations"/>
         <uriParameter name="taskId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="the id of the task"/>
      </uriParameters>
   </component>
   <component>
      <id>aws-swf</id>
      <tags>
         <tag>cloud</tag>
         <tag>workflow</tag>
      </tags>
      <title>AWS Simple Workflow</title>
      <description>The aws-swf component is used for managing workflows from Amazon Simple Workflow.</description>
      <syntax>aws-swf:type</syntax>
      <class>org.apache.camel.component.aws.swf.SWFComponent</class>
      <kind>component</kind>
      <scheme>aws-swf</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientConfigurationParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the ClientConfiguration using the key/values from the Map."/>
         <uriParameter name="activityTypeRegistrationOptions" type="object" javaType="com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions" kind="parameter" deprecated="false" label="consumer,activity" group="activity" description="Activity registration options"/>
         <uriParameter name="stateResultType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,workflow" group="workflow" description="The type of the result when a workflow state is queried."/>
         <uriParameter name="amazonSWClient" type="object" javaType="com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient" kind="parameter" deprecated="false" group="common" description="To use the given AmazonSimpleWorkflowClient as client"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="activitySchedulingOptions" type="object" javaType="com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions" kind="parameter" deprecated="false" label="producer,activity" group="activity" description="Activity scheduling options"/>
         <uriParameter name="activityThreadPoolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="consumer,activity" group="activity" description="Maximum number of threads in work pool for activity."/>
         <uriParameter name="type" type="string" javaType="java.lang.String" kind="path" choice="activity,workflow" deprecated="false" required="true" group="common" description="Activity or workflow"/>
         <uriParameter name="terminationDetails" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,workflow" group="workflow" description="Details for terminating a workflow."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="workflowTypeRegistrationOptions" type="object" javaType="com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions" kind="parameter" deprecated="false" label="consumer,workflow" group="workflow" description="Workflow registration options"/>
         <uriParameter name="startWorkflowOptionsParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the StartWorkflowOptions using the key/values from the Map."/>
         <uriParameter name="activityTypeExecutionOptions" type="object" javaType="com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions" kind="parameter" deprecated="false" label="consumer,activity" group="activity" description="Activity execution options"/>
         <uriParameter name="eventName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The workflow or activity event name to use."/>
         <uriParameter name="dataConverter" type="object" javaType="com.amazonaws.services.simpleworkflow.flow.DataConverter" kind="parameter" deprecated="false" group="common" description="An instance of com.amazonaws.services.simpleworkflow.flow.DataConverter to use for serializing/deserializing the data."/>
         <uriParameter name="taskStartToCloseTimeout" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="600" label="producer,workflow" group="workflow" description="Set the task start to close timeout."/>
         <uriParameter name="activityList" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,activity" group="activity" description="The list name to consume activities from."/>
         <uriParameter name="terminationReason" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,workflow" group="workflow" description="The reason for terminating a workflow."/>
         <uriParameter name="signalName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,workflow" group="workflow" description="The name of the signal to send to the workflow."/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Secret Key."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="version" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The workflow or activity event version to use."/>
         <uriParameter name="executionStartToCloseTimeout" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="3600" label="producer,workflow" group="workflow" description="Set the execution start to close timeout."/>
         <uriParameter name="sWClientParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AmazonSimpleWorkflowClient using the key/values from the Map."/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Access Key."/>
         <uriParameter name="domainName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The workflow domain to use."/>
         <uriParameter name="childPolicy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,workflow" group="workflow" description="The policy to use on child workflows when terminating a workflow."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="SIGNAL,CANCEL,TERMINATE,GET_STATE,START,DESCRIBE,GET_HISTORY" deprecated="false" defaultValue="START" label="producer,workflow" group="workflow" description="Workflow operation"/>
         <uriParameter name="workflowList" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,workflow" group="workflow" description="The list name to consume workflows from."/>
      </uriParameters>
   </component>
   <component>
      <id>binding</id>
      <tags>
         <tag>core</tag>
         <tag>transformation</tag>
      </tags>
      <title>Binding</title>
      <description>The binding component is used for as a of wrapping an Endpoint in a contract with a data format.</description>
      <syntax>binding:bindingName:delegateUri</syntax>
      <class>org.apache.camel.component.binding.BindingNameComponent</class>
      <kind>component</kind>
      <scheme>binding</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="delegateUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Uri of the delegate endpoint."/>
         <uriParameter name="bindingName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the binding to lookup in the Camel registry."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>disruptor</id>
      <tags>
         <tag>endpoint</tag>
      </tags>
      <title>Disruptor</title>
      <description>The disruptor component provides asynchronous SEDA behavior using LMAX Disruptor.</description>
      <syntax>disruptor:name</syntax>
      <class>org.apache.camel.component.disruptor.DisruptorComponent</class>
      <kind>component</kind>
      <scheme>disruptor</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-disruptor-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="defaultConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="To configure the default number of concurrent consumers"/>
         <componentProperty name="defaultWaitStrategy" type="string" javaType="org.apache.camel.component.disruptor.DisruptorWaitStrategy" kind="property" choice="Blocking,Sleeping,BusySpin,Yielding" deprecated="false" description="To configure the default value for DisruptorWaitStrategy The default value is Blocking."/>
         <componentProperty name="queueSize" type="integer" javaType="int" kind="property" deprecated="true" defaultValue="0" description="To configure the ring buffer size"/>
         <componentProperty name="defaultBlockWhenFull" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="To configure the default value for block when full The default value is true."/>
         <componentProperty name="defaultMultipleConsumers" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="To configure the default value for multiple consumers"/>
         <componentProperty name="defaultProducerType" type="string" javaType="org.apache.camel.component.disruptor.DisruptorProducerType" kind="property" choice="Single,Multi" deprecated="false" description="To configure the default value for DisruptorProducerType The default value is Multi."/>
         <componentProperty name="bufferSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="To configure the ring buffer size"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="waitForTaskToComplete" type="string" javaType="org.apache.camel.WaitForTaskToComplete" kind="parameter" choice="Never,IfReplyExpected,Always" deprecated="false" defaultValue="IfReplyExpected" label="producer" group="producer" description="Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based."/>
         <uriParameter name="blockWhenFull" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether a thread that sends messages to a full Disruptor will block until the ringbuffer&apos;s capacity is no longer exhausted. By default the calling thread will block and wait until the message can be accepted. By disabling this option an exception will be thrown stating that the queue is full."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent threads processing exchanges."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value."/>
         <uriParameter name="waitStrategy" type="string" javaType="org.apache.camel.component.disruptor.DisruptorWaitStrategy" kind="parameter" choice="Blocking,Sleeping,BusySpin,Yielding" deprecated="false" defaultValue="Blocking" label="consumer" group="consumer" description="Defines the strategy used by consumer threads to wait on new exchanges to be published. The options allowed are:Blocking Sleeping BusySpin and Yielding."/>
         <uriParameter name="producerType" type="string" javaType="org.apache.camel.component.disruptor.DisruptorProducerType" kind="parameter" choice="Single,Multi" deprecated="false" defaultValue="Multi" label="producer" group="producer" description="Defines the producers allowed on the Disruptor. The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only allowed when one concurrent producer (on one thread or otherwise synchronized) is active."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="size" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1024" group="common" description="The maximum capacity of the Disruptors ringbuffer Will be effectively increased to the nearest power of two. Notice: Mind if you use this option then its the first endpoint being created with the queue name that determines the size. To make sure all endpoints use same size then configure the size option on all of them or the first endpoint being created."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of queue"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="multipleConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether multiple consumers are allowed. If enabled you can use Disruptor for Publish-Subscribe messaging. That is you can send a message to the queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint."/>
      </uriParameters>
   </component>
   <component>
      <id>jing</id>
      <tags>
         <tag>validation</tag>
      </tags>
      <title>Jing</title>
      <description>Validates the payload of a message using RelaxNG Syntax using Jing library.</description>
      <syntax>jing:resourceUri</syntax>
      <class>org.apache.camel.component.validator.jing.JingComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>jing</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jing-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="URL to a local resource on the classpath or a full URL to a remote resource or resource on the file system which contains the schema to validate against."/>
         <uriParameter name="compactSyntax" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to validate using RelaxNG compact syntax or not. By default this is false for using RelaxNG XML Syntax (rng) And true is for using RelaxNG Compact Syntax (rnc)"/>
      </uriParameters>
   </component>
   <component>
      <id>snmp</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>SNMP</title>
      <description>The snmp component gives you the ability to poll SNMP capable devices or receiving traps.</description>
      <syntax>snmp:host:port</syntax>
      <class>org.apache.camel.component.snmp.SnmpComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>snmp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-snmp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="privacyPassphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The privacy passphrase. If not null privacyProtocol must also be not null. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of authenticationPassphrase is less than 8 bytes an IllegalArgumentException is thrown."/>
         <uriParameter name="securityName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the security name to be used with this target."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="authenticationPassphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The authentication passphrase. If not null authenticationProtocol must also be not null. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of authenticationPassphrase is less than 8 bytes an IllegalArgumentException is thrown."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.snmp.SnmpActionType" kind="parameter" choice="TRAP,POLL,GET_NEXT" deprecated="false" group="consumer" description="Which operation to perform such as poll trap etc."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1500" group="consumer" description="Sets the timeout value for the request in millis."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="securityLevel" type="string" javaType="int" kind="parameter" choice="1,2,3" deprecated="false" defaultValue="3" label="security" group="security" description="Sets the security level for this target. The supplied security level must be supported by the security model dependent information associated with the security name set for this target. The value 1 means: No authentication and no encryption. Anyone can create and read messages with this security level The value 2 means: Authentication and no encryption. Only the one with the right authentication key can create messages with this security level but anyone can read the contents of the message. The value 3 means: Authentication and encryption. Only the one with the right authentication key can create messages with this security level and only the one with the right encryption/decryption key can read the contents of the message."/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="parameter" choice="tcp,udp" deprecated="false" defaultValue="udp" group="consumer" description="Here you can select which protocol to use. You can use either udp or tcp."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="Hostname of the SNMP enabled device"/>
         <uriParameter name="snmpContextName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the context name field of this scoped PDU."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="oids" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Defines which values you are interested in. Please have a look at the Wikipedia to get a better understanding. You may provide a single OID or a coma separated list of OIDs. Example: oids=1.3.6.1.2.1.1.3.01.3.6.1.2.1.25.3.2.1.5.11.3.6.1.2.1.25.3.5.1.1.11.3.6.1.2.1.43.5.1.1.11.1"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="snmpCommunity" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="public" group="consumer" description="Sets the community octet string for the snmp request."/>
         <uriParameter name="snmpVersion" type="string" javaType="int" kind="parameter" choice="0,1,3" deprecated="false" defaultValue="0" group="consumer" description="Sets the snmp version for the request. The value 0 means SNMPv1 1 means SNMPv2c and the value 3 means SNMPv3"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="snmpContextEngineId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the context engine ID field of the scoped PDU."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="authenticationProtocol" type="string" javaType="java.lang.String" kind="parameter" choice="MD5,SHA1" deprecated="false" label="security" group="security" description="Authentication protocol to use if security level is set to enable authentication The possible values are: MD5 SHA1"/>
         <uriParameter name="privacyProtocol" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The privacy protocol ID to be associated with this user. If set to null this user only supports unencrypted messages."/>
         <uriParameter name="retries" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2" group="consumer" description="Defines how often a retry is made before canceling the request."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer" group="consumer" description="Sets update rate in seconds"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" required="true" group="consumer" description="Port number of the SNMP enabled device"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>influxdb</id>
      <tags>
         <tag>database</tag>
         <tag>ticks</tag>
      </tags>
      <title>InfluxDB</title>
      <description>The influxdb component allows you to interact with InfluxDB a time series database.</description>
      <syntax>influxdb:connectionBean</syntax>
      <class>org.apache.camel.component.influxdb.InfluxDbComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>influxdb</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-influxdb-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="connectionBean" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of org.influxdb.InfluxDB to use."/>
         <uriParameter name="databaseName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Setter for databaseName"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="retentionPolicy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="default" group="producer" description="Setter for retentionPolicy"/>
      </uriParameters>
   </component>
   <component>
      <id>twitter</id>
      <tags>
         <tag>api</tag>
         <tag>social</tag>
      </tags>
      <title>Twitter</title>
      <description>This component integrates with Twitter to send tweets or search for tweets and more.</description>
      <syntax>twitter:kind</syntax>
      <class>org.apache.camel.component.twitter.TwitterComponent</class>
      <kind>component</kind>
      <scheme>twitter</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-twitter-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="consumerSecret" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The consumer secret"/>
         <componentProperty name="httpProxyHost" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The http proxy host which can be used for the camel-twitter."/>
         <componentProperty name="httpProxyPort" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The http proxy port which can be used for the camel-twitter."/>
         <componentProperty name="accessToken" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The access token"/>
         <componentProperty name="consumerKey" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The consumer key"/>
         <componentProperty name="accessTokenSecret" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The access token secret"/>
         <componentProperty name="httpProxyUser" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The http proxy user which can be used for the camel-twitter."/>
         <componentProperty name="httpProxyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The http proxy password which can be used for the camel-twitter."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="keywords" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Can be used for search and streaming/filter. Multiple values can be separated with comma."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="latitude" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Used by the non-stream geography search to search by latitude. You need to configure all the following options: longitude latitude radius and distanceMetric."/>
         <uriParameter name="httpProxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.twitter.data.EndpointType" kind="parameter" choice="polling,direct,event" deprecated="false" defaultValue="direct" label="consumer" group="consumer" description="Endpoint type to use. Only streaming supports event type."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="consumerSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The consumer secret. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="numberOfPages" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="1" label="consumer,filter" group="filter" description="The number of pages result which you want camel-twitter to consume."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="userIds" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="To filter by user ids for streaming/filter. Multiple values can be separated by comma."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="distanceMetric" type="string" javaType="java.lang.String" kind="parameter" choice="km,mi" deprecated="false" defaultValue="km" label="consumer,advanced" group="consumer (advanced)" description="Used by the non-stream geography search to search by radius using the configured metrics. The unit can either be mi for miles or km for kilometers. You need to configure all the following options: longitude latitude radius and distanceMetric."/>
         <uriParameter name="consumerKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The consumer key. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="radius" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Used by the non-stream geography search to search by radius. You need to configure all the following options: longitude latitude radius and distanceMetric."/>
         <uriParameter name="lang" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="The lang string ISO_639-1 which will be used for searching"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="longitude" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Used by the non-stream geography search to search by longitude. You need to configure all the following options: longitude latitude radius and distanceMetric."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sinceId" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1" label="consumer,filter" group="filter" description="The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running."/>
         <uriParameter name="kind" type="string" javaType="java.lang.String" kind="path" choice="directmessage,search,streaming/filter,streaming/sample,streaming/user,timeline/home,timeline/mentions,timeline/retweetsofme,timeline/user" deprecated="false" required="true" group="common" description="What polling mode to use direct polling or event based. The event mode is only supported when the endpoint kind is event based."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="count" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Limiting number of results per page."/>
         <uriParameter name="httpProxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The access token. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="accessTokenSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The access secret. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="httpProxyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead."/>
         <uriParameter name="twitterStream" type="object" javaType="twitter4j.TwitterStream" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom instance of TwitterStream"/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="filterOld" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Filter out old tweets that has previously been polled. This state is stored in memory only and based on last tweet id."/>
         <uriParameter name="locations" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Bounding boxes created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as latlon. And multiple paris can be separated by semi colon."/>
         <uriParameter name="user" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username used for user timeline consumption direct message production etc."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="httpProxyUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead."/>
      </uriParameters>
   </component>
   <component>
      <id>elasticsearch</id>
      <tags>
         <tag>monitoring</tag>
         <tag>search</tag>
      </tags>
      <title>Elasticsearch</title>
      <description>The elasticsearch component is used for interfacing with ElasticSearch server.</description>
      <syntax>elasticsearch:clusterName</syntax>
      <class>org.apache.camel.component.elasticsearch.ElasticsearchComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>elasticsearch</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-elasticsearch-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="client" type="object" javaType="org.elasticsearch.client.Client" kind="property" deprecated="false" description="To use an existing configured Elasticsearch client instead of creating a client per endpoint."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="transportAddresses" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Comma separated list with ip:port formatted remote transport addresses to use. The ip and port options must be left blank for transportAddresses to be considered instead."/>
         <uriParameter name="indexType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The type of the index to act against"/>
         <uriParameter name="data" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Is the node going to be allowed to allocate data (shards) to it or not. This setting map to the node.data setting."/>
         <uriParameter name="port" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="9300" group="producer" description="The TransportClient remote port to use (defaults to 9300)"/>
         <uriParameter name="indexName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The name of the index to act against"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="clusterName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of cluster or use local for local mode"/>
         <uriParameter name="ip" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The TransportClient remote host ip to use"/>
         <uriParameter name="pathHome" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="${user.home}/.elasticsearch" group="producer" description="The path.home property of ElasticSearch configuration. You need to provide a valid path otherwise the default $user.home/.elasticsearch will be used."/>
         <uriParameter name="consistencyLevel" type="string" javaType="org.elasticsearch.action.WriteConsistencyLevel" kind="parameter" choice="DEFAULT,ONE,QUORUM,ALL" deprecated="false" defaultValue="DEFAULT" group="producer" description="The write consistency level to use with INDEX and BULK operations (can be any of ONE QUORUM ALL or DEFAULT)"/>
         <uriParameter name="clientTransportSniff" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Is the client allowed to sniff the rest of the cluster or not (default true). This setting map to the client.transport.sniff setting."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="INDEX,UPDATE,BULK,BULK_INDEX,GET_BY_ID,MULTIGET,DELETE,EXISTS,SEARCH,MULTISEARCH" deprecated="false" group="producer" description="What operation to perform"/>
      </uriParameters>
   </component>
   <component>
      <id>mqtt</id>
      <tags>
         <tag>messaging</tag>
         <tag>iot</tag>
      </tags>
      <title>MQTT</title>
      <description>Component for communicating with MQTT M2M message brokers using FuseSource MQTT Client.</description>
      <syntax>mqtt:name</syntax>
      <class>org.apache.camel.component.mqtt.MQTTComponent</class>
      <kind>component</kind>
      <scheme>mqtt</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mqtt-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Password to be used for authentication against the MQTT broker"/>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883"/>
         <componentProperty name="userName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Username to be used for authentication against the MQTT broker"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="publishTopicName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel/mqtt/test" group="common" description="The default Topic to publish messages on"/>
         <uriParameter name="connectWaitInSeconds" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" group="common" description="Delay in seconds the Component will wait for a connection to be established to the MQTT broker"/>
         <uriParameter name="mqttQosPropertyName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="MQTTQos" group="common" description="The property name to look for on an Exchange for an individual published message. If this is set (one of AtMostOnce AtLeastOnce or ExactlyOnce ) - then that QoS will be set on the message sent to the MQTT message broker."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="reconnectAttemptsMax" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="-1" group="common" description="The maximum number of reconnect attempts before an error is reported back to the client after a server connection had previously been established. Set to -1 to use unlimited attempts. Defaults to -1."/>
         <uriParameter name="maxWriteRate" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Sets the maximum bytes per second that this transport will send data at. This setting throttles writes so that the rate is not exceeded. Defaults to 0 which disables throttling."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="connectAttemptsMax" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="-1" group="common" description="The maximum number of reconnect attempts before an error is reported back to the client on the first attempt by the client to connect to a server. Set to -1 to use unlimited attempts. Defaults to -1."/>
         <uriParameter name="willTopic" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="If set the server will publish the client&apos;s Will message to the specified topics if the client has an unexpected disconnection."/>
         <uriParameter name="mqttRetainPropertyName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="MQTTRetain" group="common" description="The property name to look for on an Exchange for an individual published message. If this is set (expects a Boolean value) - then the retain property will be set on the message sent to the MQTT message broker."/>
         <uriParameter name="host" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" defaultValue="tcp://127.0.0.1:1883" group="common" description="The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883"/>
         <uriParameter name="subscribeTopicName" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" group="common" description="These are set on the Endpoint - together with properties inherited from MQTT"/>
         <uriParameter name="trafficClass" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="8" group="common" description="Sets traffic class or type-of-service octet in the IP header for packets sent from the transport. Defaults to 8 which means the traffic should be optimized for throughput."/>
         <uriParameter name="qualityOfService" type="string" javaType="java.lang.String" kind="parameter" choice="AtMostOnce,AtLeastOne,ExactlyOnce" deprecated="false" defaultValue="AtLeastOnce" group="common" description="Quality of service level to use for topics."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Use to set the client Id of the session. This is what an MQTT server uses to identify a session where setCleanSession(false); is being used. The id must be 23 characters or less. Defaults to auto generated id (based on your socket address port and timestamp)."/>
         <uriParameter name="keepAlive" type="integer" javaType="short" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Configures the Keep Alive timer in seconds. Defines the maximum time interval between messages received from a client. It enables the server to detect that the network connection to a client has dropped without having to wait for the long TCP/IP timeout."/>
         <uriParameter name="reconnectDelayMax" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="The maximum amount of time in ms to wait between reconnect attempts. Defaults to 30000."/>
         <uriParameter name="sendWaitInSeconds" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5" group="common" description="The maximum time the Component will wait for a receipt from the MQTT broker to acknowledge a published message before throwing an exception"/>
         <uriParameter name="disconnectWaitInSeconds" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5" group="common" description="The number of seconds the Component will wait for a valid disconnect on stop() from the MQTT broker"/>
         <uriParameter name="sendBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" group="common" description="Sets the size of the internal socket send buffer. Defaults to 65536 (64k)"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContext" type="object" javaType="javax.net.ssl.SSLContext" kind="parameter" deprecated="false" group="common" description="To configure security using SSLContext configuration"/>
         <uriParameter name="blockingExecutor" type="object" javaType="java.util.concurrent.Executor" kind="parameter" deprecated="false" group="common" description="SSL connections perform blocking operations against internal thread pool unless you call the setBlockingExecutor method to configure that executor they will use instead."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10" group="common" description="How long to wait in ms before the first reconnect attempt. Defaults to 10."/>
         <uriParameter name="cleanSession" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Set to false if you want the MQTT server to persist topic subscriptions and ack positions across client sessions. Defaults to true."/>
         <uriParameter name="version" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="3.1" group="common" description="Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1 protocol version."/>
         <uriParameter name="willRetain" type="string" javaType="org.fusesource.mqtt.client.QoS" kind="parameter" choice="AT_MOST_ONCE,AT_LEAST_ONCE,EXACTLY_ONCE" deprecated="false" group="common" description="Set to true if you want the Will to be published with the retain option."/>
         <uriParameter name="maxReadRate" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Sets the maximum bytes per second that this transport will receive data at. This setting throttles reads so that the rate is not exceeded. Defaults to 0 which disables throttling."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" group="common" description="Sets the size of the internal socket receive buffer. Defaults to 65536 (64k)"/>
         <uriParameter name="willQos" type="string" javaType="org.fusesource.mqtt.client.QoS" kind="parameter" choice="AtMostOnce,AtLeastOne,ExactlyOnce" deprecated="false" defaultValue="AtMostOnce" group="common" description="Sets the quality of service to use for the Will message. Defaults to AT_MOST_ONCE."/>
         <uriParameter name="localAddress" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" group="common" description="The local InetAddress and port to use"/>
         <uriParameter name="mqttTopicPropertyName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="MQTTTopicPropertyName" group="common" description="These a properties that are looked for in an Exchange - to publish to"/>
         <uriParameter name="reconnectBackOffMultiplier" type="number" javaType="double" kind="parameter" deprecated="false" defaultValue="2.0" group="common" description="The Exponential backoff be used between reconnect attempts. Set to 1 to disable exponential backoff. Defaults to 2."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="A logical name to use which is not the topic name."/>
         <uriParameter name="subscribeTopicNames" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="A comma-delimited list of Topics to subscribe to for messages. Note that each item of this list can contain MQTT wildcards ( and/or ) in order to subscribe to topics matching a certain pattern within a hierarchy. For example is a wildcard for all topics at a level within the hierarchy so if a broker has topics topics/one and topics/two then topics/ can be used to subscribe to both. A caveat to consider here is that if the broker adds topics/three the route would also begin to receive messages from that topic."/>
         <uriParameter name="byDefaultRetain" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="The default retain policy to be used on messages sent to the MQTT broker"/>
         <uriParameter name="willMessage" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The Will message to send. Defaults to a zero length message."/>
         <uriParameter name="dispatchQueue" type="object" javaType="org.fusesource.hawtdispatch.DispatchQueue" kind="parameter" deprecated="false" group="common" description="A HawtDispatch dispatch queue is used to synchronize access to the connection. If an explicit queue is not configured via the setDispatchQueue method then a new queue will be created for the connection. Setting an explicit queue might be handy if you want multiple connection to share the same queue for synchronization."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>slack</id>
      <tags>
         <tag>social</tag>
      </tags>
      <title>Slack</title>
      <description>The slack component allows you to send messages to Slack.</description>
      <syntax>slack:channel</syntax>
      <class>org.apache.camel.component.slack.SlackComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>slack</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-slack-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="webhookUrl" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The incoming webhook URL"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="iconEmoji" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Use a Slack emoji as an avatar"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="channel" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The channel name (syntax name) or slackuser (syntax userName) to send a message directly to an user."/>
         <uriParameter name="iconUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The avatar that the component will use when sending message to a channel or user."/>
         <uriParameter name="webhookUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The incoming webhook URL"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="This is the username that the bot will have when sending messages to a channel or user."/>
      </uriParameters>
   </component>
   <component>
      <id>context</id>
      <tags>
         <tag>endpoint</tag>
      </tags>
      <title>Camel Context</title>
      <description>The context component allows to send/receive messages between Camel routes in a black box way.</description>
      <syntax>context:contextId:localEndpointUrl</syntax>
      <class>org.apache.camel.component.context.QualifiedContextComponent</class>
      <kind>component</kind>
      <scheme>context</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-context-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="localEndpointUrl" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Can be a valid Camel URI evaluated within the black box CamelContext. Or it can be a logical name which is mapped to any local endpoints. For example if you locally have endpoints like direct:invoices and seda:purchaseOrders inside a CamelContext of id supplyChain then you can just use the URIs supplyChain:invoices or supplyChain:purchaseOrders to omit the physical endpoint kind and use pure logical URIs."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="contextId" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Is the ID you used to register the CamelContext into the Registry."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>weather</id>
      <tags>
         <tag>api</tag>
      </tags>
      <title>Weather</title>
      <description>Polls the weather information from Open Weather Map.</description>
      <syntax>weather:name</syntax>
      <class>org.apache.camel.component.weather.WeatherComponent</class>
      <kind>component</kind>
      <scheme>weather</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-weather-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="weatherApi" type="string" javaType="org.apache.camel.component.weather.WeatherApi" kind="parameter" choice="Current,Station,Hourly,Daily" deprecated="false" group="common" description="The API to be use (current forecast/3 hour forecast daily station)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="topLat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="For boxed queries this is the top latitude. Needs to be used in combination with rightLon and zoom."/>
         <uriParameter name="language" type="string" javaType="org.apache.camel.component.weather.WeatherLanguage" kind="parameter" choice="en,ru,it,es,sp,uk,ua,de,pt,ro,pl,fi,nl,fr,bg,sv,se,zh_tw,zh,zh_cn,tr,hr,ca" deprecated="false" defaultValue="en" group="common" description="Language of the response."/>
         <uriParameter name="lon" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="Longitude of location. You can use lat and lon options instead of location. For boxed queries this is the left longtitude."/>
         <uriParameter name="units" type="string" javaType="org.apache.camel.component.weather.WeatherUnits" kind="parameter" choice="IMPERIAL,METRIC" deprecated="false" group="common" description="The units for temperature measurement."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="mode" type="string" javaType="org.apache.camel.component.weather.WeatherMode" kind="parameter" choice="HTML,JSON,XML" deprecated="false" defaultValue="JSON" group="common" description="The output format of the weather data."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy port number"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="proxyAuthPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Password for proxy authentication"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpConnectionManager to manage connections"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="lat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="Latitude of location. You can use lat and lon options instead of location. For boxed queries this is the bottom latitude."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="proxyAuthDomain" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Domain for proxy NTLM authentication"/>
         <uriParameter name="zip" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="Zip-code e.g. 94040us"/>
         <uriParameter name="proxyAuthMethod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="period" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="If null the current weather will be returned else use values of 5 7 14 days. Only the numeric value for the forecast period is actually parsed so spelling capitalisation of the time period is up to you (its ignored)"/>
         <uriParameter name="headerName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="To store the weather result in this header instead of the message body. This is useable if you want to keep current message body as-is."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="cnt" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="filter" group="filter" description="Number of results to be found"/>
         <uriParameter name="rightLon" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="For boxed queries this is the right longtitude. Needs to be used in combination with topLat and zoom."/>
         <uriParameter name="zoom" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="filter" group="filter" description="For boxed queries this is the zoom. Needs to be used in combination with rightLon and topLat."/>
         <uriParameter name="proxyAuthUsername" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Username for proxy authentication"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy host name"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="proxyAuthHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="Optional host for proxy NTLM authentication"/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="appid" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="APPID ID used to authenticate the user connected to the API Server"/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name value is not used."/>
         <uriParameter name="ids" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="List of id&apos;s of city/stations. You can separate multiple ids by comma."/>
         <uriParameter name="location" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="filter" group="filter" description="If null Camel will try and determine your current location using the geolocation of your ip address else specify the citycountry. For well known city names Open Weather Map will determine the best fit but multiple results may be returned. Hence specifying and country as well will return more accurate data. If you specify current as the location then the component will try to get the current latitude and longitude and use that to get the weather details. You can use lat and lon options instead of location."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>https</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>HTTPS</title>
      <description>For calling out to external HTTP servers using Apache HTTP Client 3.x.</description>
      <syntax>https:httpUri</syntax>
      <class>org.apache.camel.component.http.HttpComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>https</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http.HttpClientConfigurer" kind="property" deprecated="false" description="To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used."/>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <componentProperty name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="property" deprecated="false" description="To use a custom HttpConnectionManager to manage connections"/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" description="To use the shared HttpConfiguration as base configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" label="producer" group="producer" description="The url of the HTTP endpoint to call."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="producer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="httpConnectionManagerOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpConnectionManager using the key/values from the Map."/>
         <uriParameter name="httpConnectionManager" type="object" javaType="org.apache.commons.httpclient.HttpConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpConnectionManager to manage connections"/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="producer" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="httpClientOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpClient using the key/values from the Map."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http.HttpClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
      </uriParameters>
   </component>
   <component>
      <id>ahc</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>AHC</title>
      <description>To call external HTTP services using Async Http Client.</description>
      <syntax>ahc:httpUri</syntax>
      <class>org.apache.camel.component.ahc.AhcComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>ahc</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ahc-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <componentProperty name="client" type="object" javaType="org.asynchttpclient.AsyncHttpClient" kind="property" deprecated="false" description="To use a custom AsyncHttpClient"/>
         <componentProperty name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="property" deprecated="false" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <componentProperty name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="property" deprecated="false" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientConfigOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClientConfig using the key/values from the Map."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Option to disable throwing the AhcOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" group="producer" description="The URI to use such as http://hostname:port/path"/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="producer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type (for example using Jetty or Servlet Camel components). On the producer side the exception will be deserialized and thrown as is instead of the AhcOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a org.apache.camel.util.jsse.SSLContextParameters in the Registry. This reference overrides any configured SSLContextParameters at the component level. See Using the JSSE Configuration Utility. Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.ahc.AhcBinding" kind="parameter" deprecated="false" group="producer" description="To use a custom AhcBinding which allows to control how to bind between AHC and Camel."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Define if the Connection Close header has to be added to HTTP Request. This parameter is false by default"/>
         <uriParameter name="clientConfig" type="object" javaType="org.asynchttpclient.AsyncHttpClientConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If the option is true then the Exchange.HTTP_URI header is ignored and use the endpoint&apos;s URI for request. You may also set the throwExceptionOnFailure to be false to let the AhcProducer send all the fault response back."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" group="producer" description="The initial in-memory buffer size used when transferring data between Camel and AHC Client."/>
      </uriParameters>
   </component>
   <component>
      <id>avro</id>
      <tags>
         <tag>messaging</tag>
         <tag>transformation</tag>
      </tags>
      <title>Avro</title>
      <description>Working with Apache Avro for data serialization.</description>
      <syntax>avro:transport:host:port/messageName</syntax>
      <class>org.apache.camel.component.avro.AvroComponent</class>
      <kind>component</kind>
      <scheme>avro</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-avro-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.avro.AvroConfiguration" kind="property" deprecated="false" description="To use a shared AvroConfiguration to configure options once"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="messageName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The name of the message to send."/>
         <uriParameter name="protocolClassName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Avro protocol to use defined by the FQN class name"/>
         <uriParameter name="reflectionProtocol" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected"/>
         <uriParameter name="protocolLocation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Avro protocol location"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="transport" type="string" javaType="org.apache.camel.component.avro.AvroTransport" kind="path" choice="http,netty" deprecated="false" required="true" group="common" description="Transport to use"/>
         <uriParameter name="protocol" type="object" javaType="org.apache.avro.Protocol" kind="parameter" deprecated="false" group="common" description="Avro protocol to use"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Port number to use"/>
         <uriParameter name="singleParameter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true consumer parameter won&apos;t be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname to use"/>
         <uriParameter name="uriAuthority" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Authority to use (username and password)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-ses</id>
      <tags>
         <tag>cloud</tag>
         <tag>mail</tag>
      </tags>
      <title>AWS Simple Email Service</title>
      <description>The aws-ses component is used for sending emails with Amazon&apos;s SES service.</description>
      <syntax>aws-ses:from</syntax>
      <class>org.apache.camel.component.aws.ses.SesComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-ses</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="returnPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The email address to which bounce notifications are to be forwarded override it using &apos;CamelAwsSesReturnPath&apos; header."/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The subject which is used if the message header &apos;CamelAwsSesSubject&apos; is not present."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="amazonSESEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-SES client wants to work with."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The sender&apos;s email address."/>
         <uriParameter name="to" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="producer" description="List of destination email address. Can be overriden with &apos;CamelAwsSesTo&apos; header."/>
         <uriParameter name="replyToAddresses" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="producer" description="List of reply-to email address(es) for the message override it using &apos;CamelAwsSesReplyToAddresses&apos; header."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="amazonSESClient" type="object" javaType="com.amazonaws.services.simpleemail.AmazonSimpleEmailService" kind="parameter" deprecated="false" group="producer" description="To use the AmazonSimpleEmailService as the client"/>
      </uriParameters>
   </component>
   <component>
      <id>gora</id>
      <tags>
         <tag>database</tag>
         <tag>hadoop</tag>
         <tag>nosql</tag>
      </tags>
      <title>Gora</title>
      <description>The gora component allows you to work with NoSQL databases using the Apache Gora framework.</description>
      <syntax>gora:name</syntax>
      <class>org.apache.camel.component.gora.GoraComponent</class>
      <kind>component</kind>
      <scheme>gora</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-gora-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="startKey" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Start Key"/>
         <uriParameter name="dataStoreClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The type of the dataStore"/>
         <uriParameter name="flushOnEveryOperation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Flush on every operation"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="hadoopConfiguration" type="object" javaType="org.apache.hadoop.conf.Configuration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Hadoop Configuration"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="keyClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The type class of the key"/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent consumers"/>
         <uriParameter name="timeRangeFrom" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The Time Range From"/>
         <uriParameter name="endKey" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The End Key"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeRangeTo" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The Time Range To"/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Instance name"/>
         <uriParameter name="keyRangeFrom" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Key Range From"/>
         <uriParameter name="limit" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The Limit"/>
         <uriParameter name="keyRangeTo" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Key Range To"/>
         <uriParameter name="startTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The Start Time"/>
         <uriParameter name="valueClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The type of the value"/>
         <uriParameter name="endTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The End Time"/>
         <uriParameter name="fields" type="object" javaType="com.google.common.base.Strings" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Fields"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timestamp" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The Timestamp"/>
      </uriParameters>
   </component>
   <component>
      <id>dns</id>
      <tags>
         <tag>networking</tag>
      </tags>
      <title>DNS</title>
      <description>To lookup domain information and run DNS queries using DNSJava.</description>
      <syntax>dns:dnsType</syntax>
      <class>org.apache.camel.component.dns.DnsComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>dns</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-dns-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="dnsType" type="string" javaType="org.apache.camel.component.dns.DnsType" kind="path" choice="dig,ip,lookup,wikipedia" deprecated="false" required="true" group="producer" description="The type of the lookup."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
      </uriParameters>
   </component>
   <component>
      <id>optaplanner</id>
      <tags>
         <tag>engine</tag>
         <tag>planning</tag>
      </tags>
      <title>OptaPlanner</title>
      <description>Solves the planning problem contained in a message with OptaPlanner.</description>
      <syntax>optaplanner:configFile</syntax>
      <class>org.apache.camel.component.optaplanner.OptaPlannerComponent</class>
      <kind>component</kind>
      <scheme>optaplanner</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-optaplanner-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="async" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies to perform operations in async mode"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="threadPoolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="producer" group="producer" description="Specifies the thread pool size to use when async is true"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="configFile" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Specifies the location to the solver file"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="solverId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="DEFAULT_SOLVER" label="common" group="common" description="Specifies the solverId to user for the solver instance key"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>jgroups</id>
      <tags>
         <tag>clustering</tag>
         <tag>messaging</tag>
      </tags>
      <title>JGroups</title>
      <description>The jgroups component provides exchange of messages between Camel and JGroups clusters.</description>
      <syntax>jgroups:clusterName</syntax>
      <class>org.apache.camel.component.jgroups.JGroupsComponent</class>
      <kind>component</kind>
      <scheme>jgroups</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jgroups-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="enableViewMessages" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If set to true the consumer endpoint will receive org.jgroups.View messages as well (not only org.jgroups.Message instances). By default only regular messages are consumed by the endpoint."/>
         <componentProperty name="channelProperties" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Specifies configuration properties of the JChannel used by the endpoint."/>
         <componentProperty name="channel" type="object" javaType="org.jgroups.Channel" kind="property" deprecated="false" description="Channel to use"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="enableViewMessages" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If set to true the consumer endpoint will receive org.jgroups.View messages as well (not only org.jgroups.Message instances). By default only regular messages are consumed by the endpoint."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="channelProperties" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specifies configuration properties of the JChannel used by the endpoint."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="clusterName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the JGroups cluster the component should connect to."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>guava-eventbus</id>
      <tags>
         <tag>eventbus</tag>
      </tags>
      <title>Guava EventBus</title>
      <description>The guava-eventbus component provides integration bridge between Camel and Google Guava EventBus.</description>
      <syntax>guava-eventbus:eventBusRef</syntax>
      <class>org.apache.camel.component.guava.eventbus.GuavaEventBusComponent</class>
      <kind>component</kind>
      <scheme>guava-eventbus</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-guava-eventbus-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="eventBus" type="object" javaType="com.google.common.eventbus.EventBus" kind="property" deprecated="false" description="To use the given Guava EventBus instance"/>
         <componentProperty name="listenerInterface" type="string" javaType="java.lang.Class&lt;?&gt;" kind="property" deprecated="false" description="The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="eventBusRef" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="To lookup the Guava EventBus from the registry with the given name"/>
         <uriParameter name="eventClass" type="string" javaType="java.lang.Class&lt;?&gt;" kind="parameter" deprecated="false" group="common" description="If used on the consumer side of the route will filter events received from the EventBus to the instances of the class and superclasses of eventClass. Null value of this option is equal to setting it to the java.lang.Object i.e. the consumer will capture all messages incoming to the event bus. This option cannot be used together with listenerInterface option."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="listenerInterface" type="string" javaType="java.lang.Class&lt;?&gt;" kind="parameter" deprecated="false" group="common" description="The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option."/>
      </uriParameters>
   </component>
   <component>
      <id>servicenow</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>management</tag>
      </tags>
      <title>ServiceNow</title>
      <description>The servicenow component is used to integrate Camel with ServiceNow cloud services.</description>
      <syntax>servicenow:instanceName</syntax>
      <class>org.apache.camel.component.servicenow.ServiceNowComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>servicenow</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-servicenow-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="ServiceNow account password"/>
         <componentProperty name="apiUrl" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The ServiceNow REST API url"/>
         <componentProperty name="oauthClientId" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="OAuth2 ClientID"/>
         <componentProperty name="oauthTokenUrl" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="OAuth token Url"/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.servicenow.ServiceNowConfiguration" kind="property" deprecated="false" description="The ServiceNow default configuration"/>
         <componentProperty name="oauthClientSecret" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="OAuth2 ClientSecret"/>
         <componentProperty name="userName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="ServiceNow user account name"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="favorites" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return only scorecards that are favorites of the querying user."/>
         <uriParameter name="suppressPaginationHeader" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this value to true to remove the Link header from the response. The Link header allows you to request additional pages of data when the number of records matching your query exceeds the query limit"/>
         <uriParameter name="oauthClientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="OAuth2 ClientID"/>
         <uriParameter name="instanceName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The ServiceNow instance name"/>
         <uriParameter name="requestModels" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Defines the request model"/>
         <uriParameter name="httpClientPolicy" type="object" javaType="org.apache.cxf.transports.http.configuration.HTTPClientPolicy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure http-client"/>
         <uriParameter name="release" type="string" javaType="org.apache.camel.component.servicenow.ServiceNowRelease" kind="parameter" choice="FUJI,GENEVA,HELSINKI" deprecated="false" defaultValue="HELSINKI" group="producer" description="The ServiceNow release to target default to Helsinki See https://docs.servicenow.com"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters. See http://camel.apache.org/camel-configuration-utilities.html"/>
         <uriParameter name="mapper" type="object" javaType="com.fasterxml.jackson.databind.ObjectMapper" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets Jackson&apos;s ObjectMapper to use for request/reply"/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy port number"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="ServiceNow account password MUST be provided"/>
         <uriParameter name="apiVersion" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The ServiceNow REST API version default latest"/>
         <uriParameter name="apiUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The ServiceNow REST API url"/>
         <uriParameter name="proxyUserName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy,security" group="security" description="Username for proxy authentication"/>
         <uriParameter name="excludeReferenceLink" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="True to exclude Table API links for reference fields (default: false)"/>
         <uriParameter name="includeAvailableBreakdowns" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return all available breakdowns for an indicator. If a value is not specified this parameter defaults to false and returns no breakdowns."/>
         <uriParameter name="includeAggregates" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to always return all available aggregates for an indicator including when an aggregate has already been applied. If a value is not specified this parameter defaults to false and returns no aggregates."/>
         <uriParameter name="includeScoreNotes" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return all notes associated with the score. The note element contains the note text as well as the author and timestamp when the note was added."/>
         <uriParameter name="sortBy" type="string" javaType="java.lang.String" kind="parameter" choice="value,change,changeperc,gap,gapperc,duedate,name,order,default,group,indicator_group,frequency,target,date,trend,bullet,direction" deprecated="false" group="producer" description="Specify the value to use when sorting results. By default queries sort records by value."/>
         <uriParameter name="sortDir" type="string" javaType="java.lang.String" kind="parameter" choice="asc,desc" deprecated="false" group="producer" description="Specify the sort direction ascending or descending. By default queries sort records in descending order. Use sysparm_sortdir=asc to sort in ascending order."/>
         <uriParameter name="key" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return only scorecards for key indicators."/>
         <uriParameter name="table" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The default table can be overridden by header CamelServiceNowTable"/>
         <uriParameter name="models" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Defines both request and response models"/>
         <uriParameter name="oauthTokenUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="OAuth token Url"/>
         <uriParameter name="resource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The default resource can be overridden by header CamelServiceNowResource"/>
         <uriParameter name="display" type="string" javaType="java.lang.String" kind="parameter" choice="false,true,all" deprecated="false" defaultValue="true" group="producer" description="Set this parameter to true to return only scorecards where the indicator Display field is selected. Set this parameter to all to return scorecards with any Display field value. This parameter is true by default."/>
         <uriParameter name="inputDisplayValue" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="True to set raw value of input fields (default: false)"/>
         <uriParameter name="proxyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy,security" group="security" description="Password for proxy authentication"/>
         <uriParameter name="oauthClientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="OAuth2 ClientSecret"/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="ServiceNow user account name MUST be provided"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="The proxy host name"/>
         <uriParameter name="target" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return only scorecards that have a target."/>
         <uriParameter name="displayValue" type="string" javaType="java.lang.String" kind="parameter" choice="false,true,all" deprecated="false" defaultValue="false" group="producer" description="Return the display value (true) actual value (false) or both (all) for reference fields (default: false)"/>
         <uriParameter name="includeAvailableAggregates" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return all available aggregates for an indicator when no aggregate has been applied. If a value is not specified this parameter defaults to false and returns no aggregates."/>
         <uriParameter name="proxyAuthorizationPolicy" type="object" javaType="org.apache.cxf.configuration.security.ProxyAuthorizationPolicy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure proxy authentication"/>
         <uriParameter name="includeScores" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Set this parameter to true to return all scores for a scorecard. If a value is not specified this parameter defaults to false and returns only the most recent score value."/>
         <uriParameter name="perPage" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10" group="producer" description="Enter the maximum number of scorecards each query can return. By default this value is 10 and the maximum is 100."/>
         <uriParameter name="responseModels" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Defines the response model"/>
         <uriParameter name="suppressAutoSysField" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="True to suppress auto generation of system fields (default: false)"/>
         <uriParameter name="topLevelOnly" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Gets only those categories whose parent is a catalog."/>
      </uriParameters>
   </component>
   <component>
      <id>kafka</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Kafka</title>
      <description>The kafka component allows messages to be sent to (or consumed from) Apache Kafka brokers.</description>
      <syntax>kafka:brokers</syntax>
      <class>org.apache.camel.component.kafka.KafkaComponent</class>
      <kind>component</kind>
      <scheme>kafka</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-kafka-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="workerPool" type="object" javaType="java.util.concurrent.ExecutorService" kind="property" deprecated="false" description="To use a shared custom worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing. If using this option then you must handle the lifecycle of the thread pool to shut the pool down when no longer needed."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="consumerRequestTimeoutMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="40000" label="consumer" group="consumer" description="The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted."/>
         <uriParameter name="kerberosInitCmd" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="/usr/bin/kinit" label="common,security" group="security" description="Kerberos kinit command path. Default is /usr/bin/kinit"/>
         <uriParameter name="workerPoolMaxSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="20" label="producer" group="producer" description="Maximum number of threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing."/>
         <uriParameter name="reconnectBackoffMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="50" label="producer" group="producer" description="The amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all requests sent by the consumer to the broker."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="groupId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="A string that uniquely identifies the group of consumer processes to which this consumer belongs. By setting the same group id multiple processes indicate that they are all part of the same consumer group."/>
         <uriParameter name="queueBufferingMaxMessages" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10000" label="producer" group="producer" description="The maximum number of unsent messages that can be queued up the producer when using async mode before either the producer must be blocked or data must be dropped."/>
         <uriParameter name="kerberosRenewJitter" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" defaultValue="0.05" label="common,security" group="security" description="Percentage of random jitter added to the renewal time."/>
         <uriParameter name="consumersCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="The number of consumers that connect to kafka server"/>
         <uriParameter name="sslProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common,security" group="security" description="The name of the security provider used for SSL connections. Default value is the default security provider of the JVM."/>
         <uriParameter name="receiveBufferBytes" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="32768" label="producer" group="producer" description="The size of the TCP receive buffer (SO_RCVBUF) to use when reading data."/>
         <uriParameter name="serializerClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The serializer class for messages. The default encoder takes a byte and returns the same byte. The default class is kafka.serializer.DefaultEncoder"/>
         <uriParameter name="valueDeserializer" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="org.apache.kafka.common.serialization.StringDeserializer" label="consumer" group="consumer" description="Deserializer class for value that implements the Deserializer interface."/>
         <uriParameter name="saslKerberosServiceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common,security" group="security" description="The Kerberos principal name that Kafka runs as. This can be defined either in Kafka&apos;s JAAS config or in Kafka&apos;s config."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="metricReporters" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="A list of classes to use as metrics reporters. Implementing the MetricReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics."/>
         <uriParameter name="sslTruststoreType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="JKS" label="common,security" group="security" description="The file format of the trust store file. Default value is JKS."/>
         <uriParameter name="sendBufferBytes" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="131072" label="producer" group="producer" description="Socket write buffer size"/>
         <uriParameter name="heartbeatIntervalMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="3000" label="consumer" group="consumer" description="The expected time between heartbeats to the consumer coordinator when using Kafka&apos;s group management facilities. Heartbeats are used to ensure that the consumer&apos;s session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true then KafkaProducer will ignore the KafkaConstants.TOPIC header setting of the inbound message."/>
         <uriParameter name="consumerStreams" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="consumer" group="consumer" description="Number of concurrent consumers on the consumer"/>
         <uriParameter name="consumerId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Generated automatically if not set."/>
         <uriParameter name="sslKeystoreType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="JKS" label="common,security" group="security" description="The file format of the key store file. This is optional for client. Default value is JKS"/>
         <uriParameter name="keySerializerClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The serializer class for keys (defaults to the same as for messages if nothing is given)."/>
         <uriParameter name="saslMechanism" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="GSSAPI" label="common,security" group="security" description="The Simple Authentication and Security Layer (SASL) Mechanism used. For the valid values see http://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml"/>
         <uriParameter name="requestRequiredAcks" type="string" javaType="java.lang.String" kind="parameter" choice="-1,0,1,all" deprecated="false" defaultValue="1" label="producer" group="producer" description="The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are common: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case and the retries configuration will not take effect (as the client won&apos;t generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee."/>
         <uriParameter name="workerPool" type="object" javaType="java.util.concurrent.ExecutorService" kind="parameter" deprecated="false" label="producer" group="producer" description="To use a custom worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing."/>
         <uriParameter name="fetchWaitMaxMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="500" label="consumer" group="consumer" description="The maximum amount of time the server will block before answering the fetch request if there isn&apos;t sufficient data to immediately satisfy fetch.min.bytes"/>
         <uriParameter name="retries" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries will potentially change the ordering of records because if two records are sent to a single partition and the first fails and is retried but the second succeeds then the second record may appear first."/>
         <uriParameter name="sslKeystorePassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,security" group="security" description="The store password for the key store file.This is optional for client and only needed if ssl.keystore.location is configured."/>
         <uriParameter name="sslEndpointAlgorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common,security" group="security" description="The endpoint identification algorithm to validate server hostname using server certificate."/>
         <uriParameter name="maxPollRecords" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="2147483647" label="consumer" group="consumer" description="A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy."/>
         <uriParameter name="topic" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="Name of the topic to use."/>
         <uriParameter name="sslProtocol" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLS" label="common,security" group="security" description="The SSL protocol used to generate the SSLContext. Default setting is TLS which is fine for most cases. Allowed values in recent JVMs are TLS TLSv1.1 and TLSv1.2. SSL SSLv2 and SSLv3 may be supported in older JVMs but their usage is discouraged due to known security vulnerabilities."/>
         <uriParameter name="keyDeserializer" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="org.apache.kafka.common.serialization.StringDeserializer" label="consumer" group="consumer" description="Deserializer class for key that implements the Deserializer interface."/>
         <uriParameter name="sslKeymanagerAlgorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="SunX509" label="common,security" group="security" description="The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine."/>
         <uriParameter name="pollTimeoutMs" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" defaultValue="5000" label="consumer" group="consumer" description="The timeout used when polling the KafkaConsumer."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="maxBlockMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="60000" label="producer" group="producer" description="The configuration controls how long sending to kafka will block. These methods can be blocked for multiple reasons. For e.g: buffer full metadata unavailable.This configuration imposes maximum limit on the total time spent in fetching metadata serialization of key and value partitioning and allocation of buffer memory when doing a send(). In case of partitionsFor() this configuration imposes a maximum time threshold on waiting for metadata"/>
         <uriParameter name="kerberosBeforeReloginMinTime" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="60000" label="common,security" group="security" description="Login thread sleep time between refresh attempts."/>
         <uriParameter name="bufferMemorySize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="33554432" label="producer" group="producer" description="The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will either block or throw an exception based on the preference specified by block.on.buffer.full.This setting should correspond roughly to the total memory the producer will use but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests."/>
         <uriParameter name="producerBatchSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="16384" label="producer" group="producer" description="The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size.Requests sent to brokers will contain multiple batches one for each partition with data available to be sent.A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records."/>
         <uriParameter name="retryBackoffMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="100" label="producer" group="producer" description="Before each retry the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time this property specifies the amount of time that the producer waits before refreshing the metadata."/>
         <uriParameter name="brokers" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="This is for bootstrapping and the producer will only use it for getting metadata (topics partitions and replicas). The socket connections for sending the actual data will be established based on the broker information returned in the metadata. The format is host1:port1host2:port2 and the list can be a subset of brokers or a VIP pointing to a subset of brokers. This option is known as metadata.broker.list in the Kafka documentation."/>
         <uriParameter name="metadataMaxAgeMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="300000" label="producer" group="producer" description="The period of time in milliseconds after which we force a refresh of metadata even if we haven&apos;t seen any partition leadership changes to proactively discover any new brokers or partitions."/>
         <uriParameter name="sslCipherSuites" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common,security" group="security" description="A list of cipher suites. This is a named combination of authentication encryption MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol.By default all the available cipher suites are supported."/>
         <uriParameter name="metricsSampleWindowMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The number of samples maintained to compute metrics."/>
         <uriParameter name="fetchMinBytes" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="1024" label="consumer" group="consumer" description="The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request."/>
         <uriParameter name="sslKeyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,security" group="security" description="The password of the private key in the key store file. This is optional for client."/>
         <uriParameter name="noOfMetricsSample" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="2" label="producer" group="producer" description="The number of samples maintained to compute metrics."/>
         <uriParameter name="connectionMaxIdleMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="540000" label="producer" group="producer" description="Close idle connections after the number of milliseconds specified by this config."/>
         <uriParameter name="maxPartitionFetchBytes" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="1048576" label="consumer" group="consumer" description="The maximum amount of data per-partition the server will return. The maximum total memory used for a request will be partitions max.partition.fetch.bytes. This size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch. If that happens the consumer can get stuck trying to fetch a large message on a certain partition."/>
         <uriParameter name="lingerMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delaythat is rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle&apos;s algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting however if we have fewer than this many bytes accumulated for this partition we will &apos;linger&apos; for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5 for example would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absense of load."/>
         <uriParameter name="kerberosRenewWindowFactor" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" defaultValue="0.8" label="common,security" group="security" description="Login thread will sleep until the specified window factor of time from last refresh to ticket&apos;s expiry has been reached at which time it will try to renew the ticket."/>
         <uriParameter name="securityProtocol" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="PLAINTEXT" label="common,security" group="security" description="Protocol used to communicate with brokers. Currently only PLAINTEXT and SSL are supported."/>
         <uriParameter name="autoCommitIntervalMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="5000" label="consumer" group="consumer" description="The frequency in ms that the consumer offsets are committed to zookeeper."/>
         <uriParameter name="sslTruststorePassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,security" group="security" description="The password for the trust store file."/>
         <uriParameter name="partitioner" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="org.apache.kafka.clients.producer.internals.DefaultPartitioner" group="common" description="The partitioner class for partitioning messages amongst sub-topics. The default partitioner is based on the hash of the key."/>
         <uriParameter name="kerberosPrincipalToLocalRules" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="DEFAULT" label="common,security" group="security" description="A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default principal names of the form username/hostnameREALM are mapped to username. For more details on the format please see security authorization and acls. Multiple values can be separated by comma"/>
         <uriParameter name="sslEnabledProtocols" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLSv1.2,TLSv1.1,TLSv1" label="common,security" group="security" description="The list of protocols enabled for SSL connections. TLSv1.2 TLSv1.1 and TLSv1 are enabled by default."/>
         <uriParameter name="sessionTimeoutMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="30000" label="consumer" group="consumer" description="The timeout used to detect failures when using Kafka&apos;s group management facilities."/>
         <uriParameter name="sslKeystoreLocation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,security" group="security" description="The location of the key store file. This is optional for client and can be used for two-way authentication for client."/>
         <uriParameter name="sslTruststoreLocation" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,security" group="security" description="The location of the trust store file."/>
         <uriParameter name="maxInFlightRequest" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="5" label="producer" group="producer" description="The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends there is a risk of message re-ordering due to retries (i.e. if retries are enabled)."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The client id is a user-specified string sent in each request to help trace calls. It should logically identify the application making the request."/>
         <uriParameter name="maxRequestSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="1048576" label="producer" group="producer" description="The maximum size of a request. This is also effectively a cap on the maximum record size. Note that the server has its own cap on record size which may be different from this. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="recordMetadata" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether the producer should store the RecordMetadata results from sending to Kafka. The results are stored in a List containing the RecordMetadata metadata&apos;s. The list is stored on a header with the key link KafkaConstantsKAFKA_RECORDMETA"/>
         <uriParameter name="sslTrustmanagerAlgorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="PKIX" label="common,security" group="security" description="The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine."/>
         <uriParameter name="autoOffsetReset" type="string" javaType="java.lang.String" kind="parameter" choice="latest,earliest,none" deprecated="false" defaultValue="latest" label="consumer" group="consumer" description="What to do when there is no initial offset in ZooKeeper or if an offset is out of range: smallest : automatically reset the offset to the smallest offset largest : automatically reset the offset to the largest offset fail: throw exception to the consumer"/>
         <uriParameter name="requestTimeoutMs" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client."/>
         <uriParameter name="compressionCodec" type="string" javaType="java.lang.String" kind="parameter" choice="none,gzip,snappy,lz4" deprecated="false" defaultValue="none" label="producer" group="producer" description="This parameter allows you to specify the compression codec for all data generated by this producer. Valid values are none gzip and snappy."/>
         <uriParameter name="workerPoolCoreSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10" label="producer" group="producer" description="Number of core threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing."/>
         <uriParameter name="seekToBeginning" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the option is true then KafkaConsumer will read from beginning on startup."/>
         <uriParameter name="autoCommitEnable" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If true periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin."/>
         <uriParameter name="checkCrcs" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead so it may be disabled in cases seeking extreme performance."/>
         <uriParameter name="partitionAssignor" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="org.apache.kafka.clients.consumer.RangeAssignor" label="consumer" group="consumer" description="The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used"/>
      </uriParameters>
   </component>
   <component>
      <id>cxfrs</id>
      <tags>
         <tag>rest</tag>
      </tags>
      <title>CXF-RS</title>
      <description>The cxfrs component is used for JAX-RS REST services using Apache CXF.</description>
      <syntax>cxfrs:beanId:address</syntax>
      <class>org.apache.camel.component.cxf.jaxrs.CxfRsComponent</class>
      <kind>component</kind>
      <scheme>cxfrs</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cxf-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bindingStyle" type="string" javaType="org.apache.camel.component.cxf.jaxrs.BindingStyle" kind="parameter" choice="SimpleConsumer,Default,Custom" deprecated="false" defaultValue="Default" label="consumer" group="consumer" description="Sets how requests and responses will be mapped to/from Camel. Two values are possible: SimpleConsumer: This binding style processes request parameters multiparts etc. and maps them to IN headers IN attachments and to the message body. It aims to eliminate low-level processing of org.apache.cxf.message.MessageContentsList. It also also adds more flexibility and simplicity to the response mapping. Only available for consumers. Default: The default style. For consumers this passes on a MessageContentsList to the route requiring low-level processing in the route. This is the traditional binding style which simply dumps the org.apache.cxf.message.MessageContentsList coming in from the CXF stack onto the IN message body. The user is then responsible for processing it according to the contract defined by the JAX-RS method signature. Custom: allows you to specify a custom binding through the binding option."/>
         <uriParameter name="bus" type="object" javaType="org.apache.cxf.Bus" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured CXF Bus."/>
         <uriParameter name="resourceClasses" type="array" javaType="java.util.List&lt;java.lang.Class&lt;?&gt;&gt;" kind="parameter" deprecated="false" group="common" description="The resource classes which you want to export as REST service. Multiple classes can be separated by comma."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="hostnameVerifier" type="object" javaType="javax.net.ssl.HostnameVerifier" kind="parameter" deprecated="false" label="producer" group="producer" description="The hostname verifier to be used. Use the notation to reference a HostnameVerifier from the registry."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="producer" group="producer" description="The Camel SSL setting reference. Use the notation to reference the SSL Context."/>
         <uriParameter name="httpClientAPI" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="If it is true the CxfRsProducer will use the HttpClientAPI to invoke the service. If it is false the CxfRsProducer will use the ProxyClientAPI to invoke the service"/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.cxf.jaxrs.CxfRsBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom CxfBinding to control the binding between Camel Message and CXF Message."/>
         <uriParameter name="schemaLocations" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="Sets the locations of the schema(s) which can be used to validate the incoming XML or JAXB-driven JSON."/>
         <uriParameter name="defaultBus" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Will set the default bus when CXF endpoint create a bus by itself"/>
         <uriParameter name="features" type="array" javaType="java.util.List&lt;org.apache.cxf.feature.Feature&gt;" kind="parameter" deprecated="false" group="common" description="Set the feature list to the CxfRs endpoint."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="cxfRsEndpointConfigurer" type="object" javaType="org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="This option could apply the implementation of org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which supports to configure the CXF endpoint in programmatic way. User can configure the CXF server and client by implementing configureServer/Client method of CxfEndpointConfigurer."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="loggingSizeLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="To limit the total size of number of bytes the logger will output when logging feature has been enabled."/>
         <uriParameter name="beanId" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="To lookup an existing configured CxfRsEndpoint. Must used bean: as prefix."/>
         <uriParameter name="ignoreDeleteMethodMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="This option is used to tell CxfRsProducer to ignore the message body of the DELETE method when using HTTP API."/>
         <uriParameter name="performInvocation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="When the option is true Camel will perform the invocation of the resource class instance and put the response object into the exchange for further processing."/>
         <uriParameter name="address" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The service publish address."/>
         <uriParameter name="skipFaultLogging" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="This option controls whether the PhaseInterceptorChain skips logging the Fault that it catches."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="This option tells the CxfRsProducer to inspect return codes and will generate an Exception if the return code is larger than 207."/>
         <uriParameter name="propagateContexts" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="When the option is true JAXRS UriInfo HttpHeaders Request and SecurityContext contexts will be available to custom CXFRS processors as typed Camel exchange properties. These contexts can be used to analyze the current requests using JAX-RS API."/>
         <uriParameter name="continuationTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="This option is used to set the CXF continuation timeout which could be used in CxfConsumer by default when the CXF server is using Jetty or Servlet transport."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="loggingFeatureEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="This option enables CXF Logging Feature which writes inbound and outbound REST messages to log."/>
         <uriParameter name="modelRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="This option is used to specify the model file which is useful for the resource class without annotation. When using this option then the service class can be omitted to emulate document-only endpoints"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="providers" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can specify a string with a list of providers to lookup in the registy separated by comma."/>
         <uriParameter name="maxClientCacheSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="producer,advanced" group="producer (advanced)" description="This option allows you to configure the maximum size of the cache. The implementation caches CXF clients or ClientFactoryBean in CxfProvider and CxfRsProvider."/>
      </uriParameters>
   </component>
   <component>
      <id>cmis</id>
      <tags>
         <tag>cms</tag>
         <tag>database</tag>
      </tags>
      <title>CMIS</title>
      <description>The cmis component uses the Apache Chemistry client API and allows you to add/read nodes to/from a CMIS compliant content repositories.</description>
      <syntax>cmis:url</syntax>
      <class>org.apache.camel.component.cmis.CMISComponent</class>
      <kind>component</kind>
      <scheme>cmis</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cmis-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="queryMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If true will execute the cmis query from the message body and return result otherwise will create a node in the cmis repository"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="the cmis url"/>
      </uriParameters>
   </component>
   <component>
      <id>browse</id>
      <tags>
         <tag>core</tag>
         <tag>monitoring</tag>
      </tags>
      <title>Browse</title>
      <description>The browse component is used for viewsing the messages received on endpoints that supports BrowsableEndpoint.</description>
      <syntax>browse:name</syntax>
      <class>org.apache.camel.component.browse.BrowseComponent</class>
      <kind>component</kind>
      <scheme>browse</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="A name which can be any string to uniquely identify the endpoint"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>pgevent</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>PostgresSQL Event</title>
      <description>The pgevent component allows for producing/consuming PostgreSQL events related to the LISTEN/NOTIFY commands.</description>
      <syntax>pgevent:host:port/database/channel</syntax>
      <class>org.apache.camel.component.pgevent.PgEventComponent</class>
      <kind>component</kind>
      <scheme>pgevent</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-pgevent-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="database" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The database name"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" defaultValue="5432" group="common" description="To connect using hostname and port to the database."/>
         <uriParameter name="pass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password for login"/>
         <uriParameter name="datasource" type="object" javaType="javax.sql.DataSource" kind="parameter" deprecated="false" group="common" description="To connect using the given javax.sql.DataSource instead of using hostname and port."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="localhost" group="common" description="To connect using hostname and port to the database."/>
         <uriParameter name="channel" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The channel name"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="user" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="postgres" group="common" description="Username for login"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>nats</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>Nats</title>
      <description>The nats component allows you produce and consume messages from NATS.</description>
      <syntax>nats:servers</syntax>
      <class>org.apache.camel.component.nats.NatsComponent</class>
      <kind>component</kind>
      <scheme>nats</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-nats-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="pingInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4000" group="common" description="Ping interval to be aware if connection is still alive (in milliseconds)"/>
         <uriParameter name="noRandomizeServers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not randomizing the order of servers for the connection attempts"/>
         <uriParameter name="replySubject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="the subject to which subscribers should send response"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="maxMessages" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Stop receiving messages from a topic we are subscribing to after maxMessages"/>
         <uriParameter name="poolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="consumer" group="consumer" description="Consumer pool size"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ssl" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not using SSL"/>
         <uriParameter name="verbose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not running in verbose mode"/>
         <uriParameter name="servers" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="URLs to one or more NAT servers. Use comma to separate URLs when specifying multiple servers."/>
         <uriParameter name="reconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether or not using reconnection feature"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="queueName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The Queue name if we are using nats for a queue configuration"/>
         <uriParameter name="maxReconnectAttempts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="3" group="common" description="Max reconnection attempts"/>
         <uriParameter name="topic" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The name of topic we want to use"/>
         <uriParameter name="pedantic" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not running in pedantic mode (this affects performace)"/>
         <uriParameter name="reconnectTimeWait" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2000" group="common" description="Waiting time before attempts reconnection (in milliseconds)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>log</id>
      <tags>
         <tag>core</tag>
         <tag>monitoring</tag>
      </tags>
      <title>Log</title>
      <description>The log component logs message exchanges to the underlying logging mechanism.</description>
      <syntax>log:loggerName</syntax>
      <class>org.apache.camel.component.log.LogComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>log</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="exchangeFormatter" type="object" javaType="org.apache.camel.spi.ExchangeFormatter" kind="property" deprecated="false" description="Sets a custom ExchangeFormatter to convert the Exchange to a String suitable for logging. If not specified we default to DefaultExchangeFormatter."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="showProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Show the exchange properties."/>
         <uriParameter name="showStreams" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Whether Camel should show stream bodies or not (eg such as java.io.InputStream). Beware if you enable this option then you may not be able later to access the message body as the stream have already been read by this logger. To remedy this you will have to use Stream Caching."/>
         <uriParameter name="showHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Show the message headers."/>
         <uriParameter name="showException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="If the exchange has an exception show the exception message (no stacktrace)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="showExchangeId" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Show the unique exchange ID."/>
         <uriParameter name="groupActiveOnly" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If true will hide stats when no new messages have been received for a time interval if false show stats regardless of message traffic."/>
         <uriParameter name="showFiles" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="If enabled Camel will output files"/>
         <uriParameter name="showAll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Quick option for turning all options on. (multiline maxChars has to be manually set if to be used)"/>
         <uriParameter name="maxChars" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="formatting" group="formatting" description="Limits the number of characters logged per line."/>
         <uriParameter name="loggerName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The logger name to use"/>
         <uriParameter name="level" type="string" javaType="java.lang.String" kind="parameter" choice="ERROR,WARN,INFO,DEBUG,TRACE,OFF" deprecated="false" defaultValue="INFO" group="producer" description="Logging level to use. The default value is INFO."/>
         <uriParameter name="showOut" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="If the exchange has an out message show the out message."/>
         <uriParameter name="groupDelay" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="Set the initial delay for stats (in millis)"/>
         <uriParameter name="showExchangePattern" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="formatting" group="formatting" description="Shows the Message Exchange Pattern (or MEP for short)."/>
         <uriParameter name="showBodyType" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="formatting" group="formatting" description="Show the body Java type."/>
         <uriParameter name="showFuture" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="If enabled Camel will on Future objects wait for it to complete to obtain the payload to be logged."/>
         <uriParameter name="showCaughtException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="f the exchange has a caught exception show the exception message (no stack trace). A caught exception is stored as a property on the exchange (using the key link org.apache.camel.ExchangeEXCEPTION_CAUGHT and for instance a doCatch can catch exceptions."/>
         <uriParameter name="showStackTrace" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="Show the stack trace if an exchange has an exception. Only effective if one of showAll showException or showCaughtException are enabled."/>
         <uriParameter name="skipBodyLineSeparator" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="formatting" group="formatting" description="Whether to skip line separators when logging the message body. This allows to log the message body in one line setting this option to false will preserve any line separators from the body which then will log the body as is."/>
         <uriParameter name="marker" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="An optional Marker name to use."/>
         <uriParameter name="multiline" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="formatting" group="formatting" description="If enabled then each information is outputted on a newline."/>
         <uriParameter name="groupSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="An integer that specifies a group size for throughput logging."/>
         <uriParameter name="showBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="formatting" group="formatting" description="Show the message body."/>
         <uriParameter name="style" type="string" javaType="org.apache.camel.processor.DefaultExchangeFormatter.OutputStyle" kind="parameter" choice="Default,Tab,Fixed" deprecated="false" defaultValue="Default" label="formatting" group="formatting" description="Sets the outputs style to use."/>
         <uriParameter name="groupInterval" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="If specified will group message stats by this time interval (in millis)"/>
      </uriParameters>
   </component>
   <component>
      <id>nagios</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>Nagios</title>
      <description>To send passive checks to Nagios using JSendNSCA.</description>
      <syntax>nagios:host:port</syntax>
      <class>org.apache.camel.component.nagios.NagiosComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>nagios</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-nagios-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.nagios.NagiosConfiguration" kind="property" deprecated="false" description="To use a shared NagiosConfiguration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Password to be authenticated when sending checks to Nagios."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="producer" description="The port number of the host."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="This is the address of the Nagios host where checks should be send."/>
         <uriParameter name="sendSync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether or not to use synchronous when sending a passive check. Setting it to false will allow Camel to continue routing the message and the passive check message will be send asynchronously."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5000" group="producer" description="Connection timeout in millis."/>
         <uriParameter name="encryptionMethod" type="string" javaType="org.apache.camel.component.nagios.NagiosEncryptionMethod" kind="parameter" choice="No,Xor,TripleDes" deprecated="false" group="producer" description="To specify an encryption method."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5000" group="producer" description="Sending timeout in millis."/>
      </uriParameters>
   </component>
   <component>
      <id>openshift</id>
      <tags>
         <tag>cloud</tag>
         <tag>paas</tag>
      </tags>
      <title>OpenShift</title>
      <description>To manage your Openshift 2.x applications.</description>
      <syntax>openshift:clientId</syntax>
      <class>org.apache.camel.component.openshift.OpenShiftComponent</class>
      <kind>component</kind>
      <scheme>openshift</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-openshift-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="server" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Url to the openshift server. If not specified then the default value from the local openshift configuration file /.openshift/express.conf is used. And if that fails as well then openshift.redhat.com is used."/>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password for login to openshift server."/>
         <componentProperty name="domain" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Domain name. If not specified then the default domain is used."/>
         <componentProperty name="username" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The username to login to openshift server."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="server" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Url to the openshift server. If not specified then the default value from the local openshift configuration file /.openshift/express.conf is used. And if that fails as well then openshift.redhat.com is used."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="mode" type="string" javaType="java.lang.String" kind="parameter" choice="pojo,json" deprecated="false" label="producer" group="producer" description="Whether to output the message body as a pojo or json. For pojo the message is a List type."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The password for login to openshift server."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The client id"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="application" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The application name to start stop restart or get the state."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="domain" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Domain name. If not specified then the default domain is used."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="list,start,stop,restart,state,getStandaloneCartridge,getEmbeddedCartridges,addEmbeddedCartridge,removeEmbeddedCartridge,scaleUp,scaleDown,getGitUrl,getDeploymentType,setDeploymentType,getAllEnvironmentVariables,addEnvironmentVariable,addMultipleEnvironmentVariables,updateEnvironmentVariable,getEnvironmentVariableValue,removeEnvironmentVariable,getGearProfile,addAlias,removeAlias,getAliases" deprecated="false" label="producer" group="producer" description="The operation to perform which can be: list start stop restart and state. The list operation returns information about all the applications in json format. The state operation returns the state such as: started stopped etc. The other operations does not return any value."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The username to login to openshift server."/>
      </uriParameters>
   </component>
   <component>
      <id>direct</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>Direct</title>
      <description>The direct component provides direct synchronous call to another endpoint from the same CamelContext.</description>
      <syntax>direct:name</syntax>
      <class>org.apache.camel.component.direct.DirectComponent</class>
      <kind>component</kind>
      <scheme>direct</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="block" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active."/>
         <componentProperty name="timeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="30000" required="false" description="The timeout value to use if block is enabled."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of direct endpoint"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="failIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should fail by throwing an exception when sending to a DIRECT endpoint with no active consumers."/>
         <uriParameter name="block" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The timeout value to use if block is enabled."/>
      </uriParameters>
   </component>
   <component>
      <id>cometd</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>CometD</title>
      <description>The cometd component is a transport for working with the Jetty implementation of the cometd/bayeux protocol.</description>
      <syntax>cometd:host:port/channelName</syntax>
      <class>org.apache.camel.component.cometd.CometdComponent</class>
      <kind>component</kind>
      <scheme>cometd</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cometd-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="extensions" type="array" javaType="java.util.List&lt;org.cometd.bayeux.server.BayeuxServer.Extension&gt;" kind="property" deprecated="false" description="To use a list of custom BayeuxServer.Extension that allows modifying incoming and outgoing requests."/>
         <componentProperty name="sslKeystore" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The path to the keystore."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="sslPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password when using SSL."/>
         <componentProperty name="sslKeyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password for the keystore when using SSL."/>
         <componentProperty name="securityPolicy" type="object" javaType="org.cometd.bayeux.server.SecurityPolicy" kind="property" deprecated="false" description="To use a custom configured SecurityPolicy to control authorization"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="jsonCommented" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If true the server will accept JSON wrapped in a comment and will generate JSON wrapped in a comment. This is a defence against Ajax Hijacking."/>
         <uriParameter name="maxInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="The max client side poll timeout in milliseconds. A client will be removed if a connection is not received in this time."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="240000" group="common" description="The server side poll timeout in milliseconds. This is how long the server will hold a reconnect request before responding."/>
         <uriParameter name="filterPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The filterPath will be used by the CrossOriginFilter if the crosssOriginFilterOn is true"/>
         <uriParameter name="baseResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The root directory for the web resources or classpath. Use the protocol file: or classpath: depending if you want that the component loads the resource from file system or classpath. Classpath is required for OSGI deployment where the resources are packaged in the jar"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="disconnectLocalSession" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether to disconnect local sessions after publishing a message to its channel. Disconnecting local session is needed as they are not swept by default by CometD and therefore you can run out of memory."/>
         <uriParameter name="allowedOrigins" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="*" group="common" description="The origins domain that support to cross if the crosssOriginFilterOn is true"/>
         <uriParameter name="crossOriginFilterOn" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true the server will support for cross-domain filtering"/>
         <uriParameter name="logLevel" type="string" javaType="int" kind="parameter" choice="0,1,2" deprecated="false" defaultValue="1" group="common" description="Logging level. 0=none 1=info 2=debug."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Host port number"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname"/>
         <uriParameter name="channelName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The channelName represents a topic that can be subscribed to by the Camel endpoints."/>
         <uriParameter name="interval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="The client side poll timeout in milliseconds. How long a client will wait between reconnects"/>
         <uriParameter name="multiFrameInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1500" group="common" description="The client side poll timeout if multiple connections are detected from the same browser."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="sessionHeadersEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to include the server session headers in the Camel message when creating a Camel Message for incoming requests."/>
      </uriParameters>
   </component>
   <component>
      <id>spring-event</id>
      <tags>
         <tag>spring</tag>
         <tag>eventbus</tag>
      </tags>
      <title>Spring Event</title>
      <description>The spring-event component allows to listen for Spring Application Events.</description>
      <syntax>spring-event:name</syntax>
      <class>org.apache.camel.component.event.EventComponent</class>
      <kind>component</kind>
      <scheme>spring-event</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="applicationContext" type="object" javaType="org.springframework.context.ApplicationContext" kind="property" deprecated="false" description="The Spring ApplicationContext"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Name of endpoint"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>mllp</id>
      <tags>
         <tag>mllp</tag>
      </tags>
      <title>MLLP</title>
      <description>The MLLP component is designed to handle the MLLP protocol and provide the functionality required by Healthcare providers to communicate with other systems using the MLLP protocol.</description>
      <syntax>mllp:hostname:port</syntax>
      <class>org.apache.camel.component.mllp.MllpComponent</class>
      <kind>component</kind>
      <scheme>mllp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mllp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="autoAck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Enable/Disable the automatic generation of a MLLP Acknowledgement MLLP Consumers only"/>
         <uriParameter name="keepAlive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Enable/disable the SO_KEEPALIVE socket option."/>
         <uriParameter name="hl7Headers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Enable/Disable the automatic generation of message headers from the HL7 Message MLLP Consumers only"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendBufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the SO_SNDBUF option to the specified value (in bytes)"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="reuseAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Enable/disable the SO_REUSEADDR socket option."/>
         <uriParameter name="bindRetryInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5000" label="timeout" group="timeout" description="TCP Server Only - The number of milliseconds to wait between bind attempts"/>
         <uriParameter name="maxReceiveTimeouts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="timeout" group="timeout" description="The maximum number of timeouts (specified by receiveTimeout) allowed before the TCP Connection will be reset."/>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname or IP for connection for the TCP connection. The default value is null which means any local IP address"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="backlog" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5" label="advanced" group="advanced" description="The maximum queue length for incoming connection indications (a request to connect) is set to the backlog parameter. If a connection indication arrives when the queue is full the connection is refused."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the SO_RCVBUF option to the specified value (in bytes)"/>
         <uriParameter name="bindTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="timeout" group="timeout" description="TCP Server Only - The number of milliseconds to retry binding to a server port"/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Port number for the TCP connection"/>
         <uriParameter name="receiveTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="timeout" group="timeout" description="The SO_TIMEOUT value (in milliseconds) used when waiting for the start of an MLLP frame"/>
         <uriParameter name="readTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="500" label="timeout" group="timeout" description="The SO_TIMEOUT value (in milliseconds) used after the start of an MLLP frame has been received"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="timeout" group="timeout" description="Timeout (in milliseconds) for establishing for a TCP connection TCP Client only"/>
         <uriParameter name="acceptTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60000" label="timeout" group="timeout" description="Timeout (in milliseconds) while waiting for a TCP connection TCP Server Only"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Enable/disable the TCP_NODELAY socket option."/>
         <uriParameter name="charsetName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="Set the CamelCharsetName property on the exchange"/>
      </uriParameters>
   </component>
   <component>
      <id>ehcache</id>
      <tags>
         <tag>cache</tag>
         <tag>datagrid</tag>
         <tag>clustering</tag>
      </tags>
      <title>Ehcache</title>
      <description>The ehcache component enables you to perform caching operations using Ehcache as cache implementation.</description>
      <syntax>ehcache:cacheName</syntax>
      <class>org.apache.camel.component.ehcache.EhcacheComponent</class>
      <kind>component</kind>
      <scheme>ehcache</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ehcache-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="cacheName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="the cache name"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>yammer</id>
      <tags>
         <tag>social</tag>
      </tags>
      <title>Yammer</title>
      <description>The yammer component allows you to interact with the Yammer enterprise social network.</description>
      <syntax>yammer:function</syntax>
      <class>org.apache.camel.component.yammer.YammerComponent</class>
      <kind>component</kind>
      <scheme>yammer</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-yammer-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="consumerSecret" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The consumer secret"/>
         <componentProperty name="consumerKey" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The consumer key"/>
         <componentProperty name="accessToken" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The access token"/>
         <componentProperty name="config" type="object" javaType="org.apache.camel.component.yammer.YammerConfiguration" kind="property" deprecated="false" description="To use a shared yammer configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="newerThan" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages. If you&apos;re looking at messages and the most recent message returned is 3516 you can make a request with the parameter newerThan=3516 to ensure that you do not get duplicate copies of messages already on your page."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="consumerSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The consumer secret"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="function" type="string" javaType="org.apache.camel.component.yammer.YammerFunctionType" kind="path" choice="MESSAGES,MY_FEED,ALGO,FOLLOWING,SENT,PRIVATE,RECEIVED,USERS,CURRENT,RELATIONSHIPS" deprecated="false" required="true" group="common" description="The function to use"/>
         <uriParameter name="limit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Return only the specified number of messages. Works for threaded=true and threaded=extended."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="consumerKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The consumer key"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="useJson" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Set to true if you want to use raw JSON rather than converting to POJOs."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="common" description="The access token"/>
         <uriParameter name="userId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The user id"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="consumer" group="consumer" description="Delay between polling in millis"/>
         <uriParameter name="olderThan" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Returns messages older than the message ID specified as a numeric string. This is useful for paginating messages. For example if you&apos;re currently viewing 20 messages and the oldest is number 2912 you could append olderThan=2912 to your request to get the 20 messages prior to those you&apos;re seeing."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="threaded" type="string" javaType="java.lang.String" kind="parameter" choice="true,extended" deprecated="false" label="consumer" group="consumer" description="threaded=true will only return the first message in each thread. This parameter is intended for apps which display message threads collapsed. threaded=extended will return the thread starter messages in order of most recently active as well as the two most recent messages as they are viewed in the default view on the Yammer web interface."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>file</id>
      <tags>
         <tag>core</tag>
         <tag>file</tag>
      </tags>
      <title>File</title>
      <description>The file component is used for reading or writing files.</description>
      <syntax>file:directoryName</syntax>
      <class>org.apache.camel.component.file.FileComponent</class>
      <kind>component</kind>
      <scheme>file</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="renameUsingCopy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Perform rename operations using a copy and delete strategy. This is primarily used in environments where the regular rename operation is unreliable (e.g. across different file systems or networks). This option takes precedence over the copyAndDeleteOnRenameFail parameter that will automatically fall back to the copy and delete strategy but only after additional delays."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Use Expression such as File Language to dynamically set the filename. For consumers it&apos;s used as a filename filter. For producers it&apos;s used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today&apos;s file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards."/>
         <uriParameter name="antInclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="moveExisting" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="flatten" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Flatten is used to flatten the file name path to strip any leading paths so it&apos;s just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths."/>
         <uriParameter name="idempotent" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,filter" group="filter" description="Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerDeleteTargetFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation."/>
         <uriParameter name="readLockRemoveOnRollback" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false then the file name entry is confirmed (as if the file did a commit)."/>
         <uriParameter name="readLockRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="exclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to exclude files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards."/>
         <uriParameter name="sortBy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool. This option allows you to share a thread pool among multiple consumers."/>
         <uriParameter name="directoryName" type="string" javaType="java.io.File" kind="path" deprecated="false" required="true" group="common" description="The starting directory"/>
         <uriParameter name="readLockDeleteOrphanLockFiles" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether or not read lock with marker files should upon startup delete any orphan read lock files which may have been left on the file system if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file this could also be due another node is concurrently reading files from the same shared directory."/>
         <uriParameter name="probeContentType" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to enable probing of the content type. If enable then the consumer uses link FilesprobeContentType(java.nio.file.Path) to determine the content-type of the file and store that as a header with key link ExchangeFILE_CONTENT_TYPE on the Message."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="processStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileProcessStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply."/>
         <uriParameter name="readLock" type="string" javaType="java.lang.String" kind="parameter" choice="none,markerFile,fileLock,rename,changed,idempotent" deprecated="false" label="consumer,lock" group="lock" description="Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering such as Hazelcast Component or Infinispan."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="inProgressRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used."/>
         <uriParameter name="readLockLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,lock" group="lock" description="Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock rename."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="readLockMinLength" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1" label="consumer,lock" group="lock" description="This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. The default value is 500. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="readLockMarkerFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application."/>
         <uriParameter name="readLockTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="consumer,lock" group="lock" description="Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerMaxMessagesPerPoll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="charset" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well."/>
         <uriParameter name="idempotentKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size"/>
         <uriParameter name="exclusiveReadLockStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,lock" group="lock" description="Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation."/>
         <uriParameter name="readLockCheckInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,lock" group="lock" description="Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="sorter" type="object" javaType="java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;T&gt;&gt;" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Pluggable sorter as a java.util.Comparator class."/>
         <uriParameter name="fileExist" type="string" javaType="org.apache.camel.component.file.GenericFileExist" kind="parameter" choice="Override,Append,Fail,Ignore,Move,TryRename" deprecated="false" defaultValue="Override" label="producer" group="producer" description="What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers."/>
         <uriParameter name="copyAndDeleteOnRenameFail" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Whether to fallback and do a copy and delete file in case the file could not be renamed directly. This option is not available for the FTP component."/>
         <uriParameter name="localWorkDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory."/>
         <uriParameter name="startingDirectoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn&apos;t exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn&apos;t exist."/>
         <uriParameter name="directoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Similar to startingDirectoryMustExist but this applies during polling recursive sub directories."/>
         <uriParameter name="autoCreate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Automatically create missing directories in the file&apos;s pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file will be deleted after it is processed successfully."/>
         <uriParameter name="readLockMinAge" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,lock" group="lock" description="This option applied only for readLock=change. This option allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age."/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If a directory will look for files in all the sub-directories as well."/>
         <uriParameter name="extendedAttributes" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To define which file attributes of interest. Like posix:permissionsposix:ownerbasic:lastAccessTime it supports basic wildcard like posix: basic:lastAccessTime"/>
         <uriParameter name="antExclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format."/>
         <uriParameter name="keepLastModified" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="Allow to plugin a custom org.apache.camel.spi.ScheduledPollConsumerScheduler to use as the scheduler for firing when the polling consumer runs. The default implementation uses the ScheduledExecutorService and there is a Quartz2 and Spring based which supports CRON expressions. Notice: If using a custom scheduler then the options for initialDelay useFixedDelay timeUnit and scheduledExecutorService may not be in use. Use the text quartz2 to refer to use the Quartz2 scheduler; and use the text spring to use the Spring based; and use the text myScheduler to refer to a custom scheduler by its id in the Registry. See Quartz2 page for an example."/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="doneFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Producer: If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="chmod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Specify the file permissions which is sent by the producer the chmod value must be between 000 and 777; If there is a leading digit like in 0755 we will ignore it."/>
         <uriParameter name="onCompletionExceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore."/>
         <uriParameter name="tempPrefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of &apos;Cannot write null body to file.&apos; will be thrown. If the fileExist option is set to &apos;Override&apos; then the file will be truncated and if set to append the file will remain unchanged."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="minDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory."/>
         <uriParameter name="include" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to include files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="moveFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again."/>
         <uriParameter name="preMove" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order."/>
         <uriParameter name="move" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="filter" type="object" javaType="org.apache.camel.component.file.GenericFileFilter&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method."/>
         <uriParameter name="maxDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="consumer,filter" group="filter" description="The maximum depth to traverse when recursively processing a directory."/>
         <uriParameter name="filterFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the file based on Simple language. For example to filter on file size you can use $file:size 5000"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel. In other words the error occurred while the polling was gathering information for instance access to a file network failed so Camel cannot access it to scan for files. The default implementation will log the caused exception at WARN level and ignore it."/>
         <uriParameter name="tempFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language."/>
         <uriParameter name="forceWrites" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to force syncing writes to the file system. You can turn this off if you do not want this level of guarantee for example if writing to logs / audit logs etc; this would yield better performance."/>
         <uriParameter name="antFilterCaseSensitive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Sets case sensitive flag on ant fiter"/>
         <uriParameter name="shuffle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,sort" group="sort" description="To shuffle the list of files (sort in random order)"/>
         <uriParameter name="chmodDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Specify the directory permissions used when the producer creates missing directories the chmod value must be between 000 and 777; If there is a leading digit like in 0755 we will ignore it."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="131072" label="advanced" group="advanced" description="Write buffer sized in bytes."/>
         <uriParameter name="filterDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the directory based on Simple language. For example to filter on current date you can use a simple date pattern such as $date:now:yyyMMdd"/>
      </uriParameters>
   </component>
   <component>
      <id>stream</id>
      <tags>
         <tag>file</tag>
         <tag>system</tag>
      </tags>
      <title>Stream</title>
      <description>The stream: component provides access to the system-in system-out and system-err streams as well as allowing streaming of file and URL.</description>
      <syntax>stream:kind</syntax>
      <class>org.apache.camel.component.stream.StreamComponent</class>
      <kind>component</kind>
      <scheme>stream</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stream-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="groupLines" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="To group X number of lines in the consumer. For example to group 10 lines and therefore only spit out an Exchange with 10 lines instead of 1 Exchange per line."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="When using the stream:file URI format this option specifies the filename to stream to/from."/>
         <uriParameter name="kind" type="string" javaType="java.lang.String" kind="path" choice="in,out,err,header,file,url" deprecated="false" required="true" group="common" description="Kind of stream to use such as System.in or System.out."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="closeOnDone" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="This option is used in combination with Splitter and streaming to the same file. The idea is to keep the stream open and only close when the Splitter is done to improve performance. Mind this requires that you only stream to the same file and not 2 or more files."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="You can configure the encoding (is a charset name) to use text-based streams (for example message body is a String object). If not provided Camel uses the JVM default Charset."/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="When using the stream:url URI format this option specifies the URL to stream to/from. The input/output stream will be opened using the JDK URLConnection facility."/>
         <uriParameter name="initialPromptDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="2000" label="consumer" group="consumer" description="Initial delay in milliseconds before showing the message prompt. This delay occurs only once. Can be used during system startup to avoid message prompts being written while other logging is done to the system out."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="scanStream" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="To be used for continuously reading a stream such as the unix tail command."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Initial delay in milliseconds before producing the stream."/>
         <uriParameter name="promptDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Optional delay in milliseconds before showing the message prompt."/>
         <uriParameter name="groupStrategy" type="object" javaType="org.apache.camel.component.stream.GroupStrategy" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Allows to use a custom GroupStrategy to control how to group lines."/>
         <uriParameter name="promptMessage" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Message prompt to use when reading from stream:in; for example you could set this to Enter a command:"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="retry" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Will retry opening the file if it&apos;s overwritten somewhat like tail --retry"/>
         <uriParameter name="scanStreamDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Delay in milliseconds between read attempts when using scanStream."/>
         <uriParameter name="autoCloseCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Number of messages to process before closing stream on Producer side. Never close stream by default (only when Producer is stopped). If more messages are sent the stream is reopened for another autoCloseCount batch."/>
      </uriParameters>
   </component>
   <component>
      <id>http4s</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>HTTP4S</title>
      <description>For calling out to external HTTP servers using Apache HTTP Client 4.x.</description>
      <syntax>http4s:httpUri</syntax>
      <class>null</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>http4s</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http4-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientBuilder" type="object" javaType="org.apache.http.impl.client.HttpClientBuilder" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Provide access to the http client request parameters used on new RequestConfig instances used by producers or consumers of this endpoint."/>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" label="producer" group="producer" description="The url of the HTTP endpoint to call."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="producer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="clearExpiredCookies" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether to clear expired cookies before sending the HTTP request. This ensures the cookies store does not keep growing by adding new cookies which is newer removed when they are expired."/>
         <uriParameter name="httpClient" type="object" javaType="org.apache.http.client.HttpClient" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Gets the HttpClient to be used by org.apache.camel.component.http4.HttpProducer"/>
         <uriParameter name="httpContext" type="object" javaType="org.apache.http.protocol.HttpContext" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpContext instance"/>
         <uriParameter name="authenticationPreemptive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true camel-http4 sends preemptive basic authentication to the server."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="producer" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="httpClientOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpClient using the key/values from the Map."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="useSystemProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="To use System Properties as fallback for configuration"/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http4.HttpClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="clientConnectionManager" type="object" javaType="org.apache.http.conn.HttpClientConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpClientConnectionManager to manage connections"/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
         <uriParameter name="cookieStore" type="object" javaType="org.apache.http.client.CookieStore" kind="parameter" deprecated="false" label="producer" group="producer" description="To use a custom org.apache.http.client.CookieStore. By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn&apos;t be stored as we are just bridging (eg acting as a proxy)."/>
      </uriParameters>
   </component>
   <component>
      <id>solrs</id>
      <tags>
         <tag>monitoring</tag>
         <tag>search</tag>
      </tags>
      <title>Solr</title>
      <description>The solr component allows you to interface with an Apache Lucene Solr server.</description>
      <syntax>solrs:url</syntax>
      <class>org.apache.camel.component.solr.SolrComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>solrs</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-solr-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="defaultMaxConnectionsPerHost" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxConnectionsPerHost on the underlying HttpConnectionManager"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="maxTotalConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="maxTotalConnection on the underlying HttpConnectionManager"/>
         <uriParameter name="streamingThreadCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2" group="producer" description="Set the number of threads for the StreamingUpdateSolrServer"/>
         <uriParameter name="collection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the collection name which the solrCloud server could use"/>
         <uriParameter name="zkHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="solrCloud" group="solrCloud" description="Set the ZooKeeper host information which the solrCloud could use such as zkhost=localhost:8123."/>
         <uriParameter name="soTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Read timeout on the underlying HttpConnectionManager. This is desirable for queries but probably not for indexing"/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Hostname and port for the solr server"/>
         <uriParameter name="maxRetries" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="Maximum number of retries to attempt in the event of transient errors"/>
         <uriParameter name="allowCompression" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Server side must support gzip or deflate for this to have any effect"/>
         <uriParameter name="requestHandler" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Set the request handler to be used"/>
         <uriParameter name="followRedirects" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="indicates whether redirects are used to get to the Solr server"/>
         <uriParameter name="streamingQueueSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" group="producer" description="Set the queue size for the StreamingUpdateSolrServer"/>
         <uriParameter name="connectionTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="connectionTimeout on the underlying HttpConnectionManager"/>
      </uriParameters>
   </component>
   <component>
      <id>http4</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>HTTP4</title>
      <description>For calling out to external HTTP servers using Apache HTTP Client 4.x.</description>
      <syntax>http4:httpUri</syntax>
      <class>org.apache.camel.component.http4.HttpComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>http4</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http4-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="httpContext" type="object" javaType="org.apache.http.protocol.HttpContext" kind="property" deprecated="false" description="To use a custom org.apache.http.protocol.HttpContext when executing requests."/>
         <componentProperty name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="property" deprecated="false" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters. Important: Only one instance of org.apache.camel.util.jsse.SSLContextParameters is supported per HttpComponent. If you need to use 2 or more different instances you need to define a new HttpComponent per instance you need."/>
         <componentProperty name="maxTotalConnections" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The maximum number of connections."/>
         <componentProperty name="connectionsPerRoute" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The maximum number of connections per route."/>
         <componentProperty name="httpConfiguration" type="object" javaType="org.apache.camel.http.common.HttpConfiguration" kind="property" deprecated="false" description="To use the shared HttpConfiguration as base configuration."/>
         <componentProperty name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http4.HttpClientConfigurer" kind="property" deprecated="false" description="To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used."/>
         <componentProperty name="allowJavaSerializedObject" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="clientConnectionManager" type="object" javaType="org.apache.http.conn.HttpClientConnectionManager" kind="property" deprecated="false" description="To use a custom HttpClientConnectionManager to manage connections"/>
         <componentProperty name="x509HostnameVerifier" type="object" javaType="org.apache.http.conn.ssl.X509HostnameVerifier" kind="property" deprecated="false" description="To use a custom X509HostnameVerifier such as org.apache.http.conn.ssl.StrictHostnameVerifier or org.apache.http.conn.ssl.AllowAllHostnameVerifier."/>
         <componentProperty name="connectionTimeToLive" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="The time for connection to live the time unit is millisecond the default value is always keep alive."/>
         <componentProperty name="cookieStore" type="object" javaType="org.apache.http.client.CookieStore" kind="property" deprecated="false" description="To use a custom org.apache.http.client.CookieStore. By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn't be stored as we are just bridging (eg acting as a proxy)."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clientBuilder" type="object" javaType="org.apache.http.impl.client.HttpClientBuilder" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Provide access to the http client request parameters used on new RequestConfig instances used by producers or consumers of this endpoint."/>
         <uriParameter name="authMethodPriority" type="string" javaType="java.lang.String" kind="parameter" choice="Basic,Digest,NTLM" deprecated="false" label="producer" group="producer" description="Authentication method for proxy either as Basic Digest or NTLM."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="ignoreResponseBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true The http producer won&apos;t read response body and cache the input stream"/>
         <uriParameter name="mapHttpMessageBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping."/>
         <uriParameter name="proxyPort" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The proxy port number"/>
         <uriParameter name="httpUri" type="string" javaType="java.net.URI" kind="path" deprecated="false" required="true" label="producer" group="producer" description="The url of the HTTP endpoint to call."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="producer" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="copyHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."/>
         <uriParameter name="clearExpiredCookies" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether to clear expired cookies before sending the HTTP request. This ensures the cookies store does not keep growing by adding new cookies which is newer removed when they are expired."/>
         <uriParameter name="httpClient" type="object" javaType="org.apache.http.client.HttpClient" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Gets the HttpClient to be used by org.apache.camel.component.http4.HttpProducer"/>
         <uriParameter name="httpContext" type="object" javaType="org.apache.http.protocol.HttpContext" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpContext instance"/>
         <uriParameter name="authenticationPreemptive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If this option is true camel-http4 sends preemptive basic authentication to the server."/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="httpBinding" type="object" javaType="org.apache.camel.http.common.HttpBinding" kind="parameter" deprecated="false" group="producer" description="To use a custom HttpBinding to control the mapping between Camel message and HttpClient."/>
         <uriParameter name="chunked" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"/>
         <uriParameter name="httpClientOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To configure the HttpClient using the key/values from the Map."/>
         <uriParameter name="connectionClose" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."/>
         <uriParameter name="useSystemProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="To use System Properties as fallback for configuration"/>
         <uriParameter name="mapHttpMessageFormUrlEncodedBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer" group="producer" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included."/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The proxy host name"/>
         <uriParameter name="preserveHostHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL&apos;s for a proxied service"/>
         <uriParameter name="httpClientConfigurer" type="object" javaType="org.apache.camel.component.http4.HttpClientConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc"/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body."/>
         <uriParameter name="clientConnectionManager" type="object" javaType="org.apache.http.conn.HttpClientConnectionManager" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HttpClientConnectionManager to manage connections"/>
         <uriParameter name="mapHttpMessageHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping."/>
         <uriParameter name="urlRewrite" type="object" javaType="org.apache.camel.http.common.UrlRewrite" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html"/>
         <uriParameter name="cookieStore" type="object" javaType="org.apache.http.client.CookieStore" kind="parameter" deprecated="false" label="producer" group="producer" description="To use a custom org.apache.http.client.CookieStore. By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn&apos;t be stored as we are just bridging (eg acting as a proxy)."/>
      </uriParameters>
   </component>
   <component>
      <id>smpps</id>
      <tags>
         <tag>mobile</tag>
      </tags>
      <title>SMPP</title>
      <description>To send and receive SMS using a SMSC (Short Message Service Center).</description>
      <syntax>smpps:host:port</syntax>
      <class>org.apache.camel.component.smpp.SmppComponent</class>
      <kind>component</kind>
      <scheme>smpps</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-smpp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.smpp.SmppConfiguration" kind="property" deprecated="false" description="To use the shared SmppConfiguration as configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="serviceType" type="string" javaType="java.lang.String" kind="parameter" choice="CMT,CPT,VMN,VMA,WAP,USSD" deprecated="false" defaultValue="CMT" label="producer" group="producer" description="The service type parameter can be used to indicate the SMS Application service associated with the message. The following generic service_types are defined: CMT: Cellular Messaging CPT: Cellular Paging VMN: Voice Mail Notification VMA: Voice Mail Alerting WAP: Wireless Application Protocol USSD: Unstructured Supplementary Services Data"/>
         <uriParameter name="lazySessionCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Sessions can be lazily created to avoid exceptions if the SMSC is not available when the Camel producer is started. Camel will check the in message headers &apos;CamelSmppSystemId&apos; and &apos;CamelSmppPassword&apos; of the first exchange. If they are present Camel will use these data to connect to the SMSC."/>
         <uriParameter name="initialReconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="common" group="common" description="Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC after the connection was lost."/>
         <uriParameter name="destAddrTon" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME destination address parameters. Only for SubmitSm SubmitMulti CancelSm and DataSm. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="httpProxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If you need to tunnel SMPP through a HTTP proxy set this attribute to the hostname or ip address of your HTTP proxy."/>
         <uriParameter name="numberingPlanIndicator" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the numeric plan indicator (NPI) to be used in the SME. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="alphabet" type="string" javaType="byte" kind="parameter" choice="0,4,8" deprecated="false" defaultValue="0" label="codec" group="codec" description="Defines encoding of data according the SMPP 3.4 specification section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2 Alphabet"/>
         <uriParameter name="destAddrNpi" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME destination address parameters. Only for SubmitSm SubmitMulti CancelSm and DataSm. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for connecting to SMSC server."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="localhost" group="common" description="Hostname for the SMSC server to use."/>
         <uriParameter name="systemType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="cp" label="common" group="common" description="This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters)."/>
         <uriParameter name="sourceAddr" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="1616" label="producer" group="producer" description="Defines the address of SME (Short Message Entity) which originated this message."/>
         <uriParameter name="sourceAddrNpi" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="systemId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="smppclient" label="security" group="security" description="The system id (username) for connecting to SMSC server."/>
         <uriParameter name="addressRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification. The SmppConsumer will receive messages only from SMSC&apos;s which target an address (MSISDN or IP address) within this range."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sessionStateListener" type="object" javaType="org.jsmpp.session.SessionStateListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed."/>
         <uriParameter name="usingSSL" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Whether using SSL with the smpps protocol"/>
         <uriParameter name="registeredDelivery" type="string" javaType="byte" kind="parameter" choice="0,1,2" deprecated="false" defaultValue="0" label="producer" group="producer" description="Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined: 0: No SMSC delivery receipt requested. 1: SMSC delivery receipt requested where final delivery outcome is success or failure. 2: SMSC delivery receipt requested where the final delivery outcome is delivery failure."/>
         <uriParameter name="httpProxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="3128" label="proxy" group="proxy" description="If you need to tunnel SMPP through a HTTP proxy set this attribute to the port of your HTTP proxy."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="common" group="common" description="Defines the interval in milliseconds between the reconnect attempts if the connection to the SMSC was lost and the previous was not succeed."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="ISO-8859-1" label="codec" group="codec" description="Defines the encoding scheme of the short message user data. Only for SubmitSm ReplaceSm and SubmitMulti."/>
         <uriParameter name="httpProxyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If your HTTP proxy requires basic authentication set this attribute to the password required for your HTTP proxy."/>
         <uriParameter name="transactionTimer" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Defines the maximum period of inactivity allowed after a transaction after which an SMPP entity may assume that the session is no longer active. This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME)."/>
         <uriParameter name="splittingPolicy" type="string" javaType="org.apache.camel.component.smpp.SmppSplittingPolicy" kind="parameter" choice="ALLOW,REJECT,TRUNCATE" deprecated="false" defaultValue="ALLOW" group="common" description="You can specify a policy for handling long messages: ALLOW - the default long messages are split to 140 bytes per message TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC. Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered. REJECT - if a message would need to be split it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long."/>
         <uriParameter name="protocolId" type="integer" javaType="byte" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The protocol id"/>
         <uriParameter name="proxyHeaders" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" label="proxy" group="proxy" description="These headers will be passed to the proxy server while establishing the connection."/>
         <uriParameter name="httpProxyUsername" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If your HTTP proxy requires basic authentication set this attribute to the username required for your HTTP proxy."/>
         <uriParameter name="typeOfNumber" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" defaultValue="2775" group="common" description="Port number for the SMSC server to use."/>
         <uriParameter name="dataCoding" type="integer" javaType="byte" kind="parameter" deprecated="false" defaultValue="0" label="codec" group="codec" description="Defines the data coding according the SMPP 3.4 specification section 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2 (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990)"/>
         <uriParameter name="enquireLinkTimer" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="5000" label="advanced" group="advanced" description="Defines the interval in milliseconds between the confidence checks. The confidence check is used to test the communication path between an ESME and an SMSC."/>
         <uriParameter name="destAddr" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="1717" label="producer" group="producer" description="Defines the destination SME address. For mobile terminated messages this is the directory number of the recipient MS. Only for SubmitSm SubmitMulti CancelSm and DataSm."/>
         <uriParameter name="replaceIfPresentFlag" type="string" javaType="byte" kind="parameter" choice="0,1" deprecated="false" defaultValue="0" label="producer" group="producer" description="Used to request the SMSC to replace a previously submitted message that is still pending delivery. The SMSC will replace an existing message provided that the source address destination address and service type match the same fields in the new message. The following replace if present flag values are defined: 0: Don&apos;t replace 1: Replace"/>
         <uriParameter name="priorityFlag" type="string" javaType="byte" kind="parameter" choice="0,1,2,3" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows the originating SME to assign a priority level to the short message. Only for SubmitSm and SubmitMulti. Four Priority Levels are supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level 2 priority 3: Level 3 (highest) priority"/>
         <uriParameter name="maxReconnect" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="common" group="common" description="Defines the maximum number of attempts to reconnect to the SMSC if SMSC returns a negative bind response"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="sourceAddrTon" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME originator address parameters. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
      </uriParameters>
   </component>
   <component>
      <id>ftps</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>FTPS</title>
      <description>The ftps (FTP secure SSL/TLS) component is used for uploading or downloading files from FTP servers.</description>
      <syntax>ftps:host:port/directoryName</syntax>
      <class>org.apache.camel.component.file.remote.FtpsComponent</class>
      <kind>component</kind>
      <extendsScheme>file</extendsScheme>
      <scheme>ftps</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ftp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop then you need to stop the consumer/route instead."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Use Expression such as File Language to dynamically set the filename. For consumers it&apos;s used as a filename filter. For producers it&apos;s used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today&apos;s file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="idempotent" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,filter" group="filter" description="Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use for login"/>
         <uriParameter name="sortBy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="directoryName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The starting directory"/>
         <uriParameter name="readLockDeleteOrphanLockFiles" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether or not read lock with marker files should upon startup delete any orphan read lock files which may have been left on the file system if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file this could also be due another node is concurrently reading files from the same shared directory."/>
         <uriParameter name="disableSecureDataChannelDefaults" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Use this option to disable default options when using secure data channel. This allows you to be in full control what the execPbsz and execProt setting should be used. Default is false"/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="ftpClientKeyStoreParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="security" group="security" description="Set the key store parameters"/>
         <uriParameter name="inProgressRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used."/>
         <uriParameter name="soTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="300000" label="advanced" group="advanced" description="Sets the so timeout Used only by FTPClient"/>
         <uriParameter name="execProt" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The exec protection level PROT command. C - Clear S - Safe(SSL protocol only) E - Confidential(SSL protocol only) P - Private"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="passiveMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Sets passive mode connections. Default is active mode connections."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="binary" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Specifies the file transfer mode BINARY or ASCII. Default is ASCII (false)."/>
         <uriParameter name="readLockTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="consumer,lock" group="lock" description="Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="charset" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well."/>
         <uriParameter name="disconnectOnBatchComplete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server."/>
         <uriParameter name="ftpClientParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used by FtpComponent to provide additional parameters for the FTPClient"/>
         <uriParameter name="idempotentKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size"/>
         <uriParameter name="sorter" type="object" javaType="java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;T&gt;&gt;" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Pluggable sorter as a java.util.Comparator class."/>
         <uriParameter name="maximumReconnectAttempts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Specifies the maximum reconnect attempts Camel performs when it tries to connect to the remote FTP server. Use 0 to disable this behavior."/>
         <uriParameter name="stepwise" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Sets whether we should stepwise change directories while traversing file structures when downloading files or as well when uploading a file to a directory. You can disable this if you for example are in a situation where you cannot change directory on the FTP server due security reasons."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="Gets the JSSE configuration that overrides any settings in link FtpsEndpointftpClientKeyStoreParameters link ftpClientTrustStoreParameters and link FtpsConfigurationgetSecurityProtocol()."/>
         <uriParameter name="directoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Similar to startingDirectoryMustExist but this applies during polling recursive sub directories."/>
         <uriParameter name="autoCreate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Automatically create missing directories in the file&apos;s pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to."/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If a directory will look for files in all the sub-directories as well."/>
         <uriParameter name="antExclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format."/>
         <uriParameter name="keepLastModified" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers."/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="tempPrefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files."/>
         <uriParameter name="sendNoop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid which allows to silently re-connect to be able to upload the file. However if this causes problems you can turn this option off."/>
         <uriParameter name="ftpClientConfig" type="object" javaType="org.apache.commons.net.ftp.FTPClientConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom instance of FTPClientConfig to configure the FTP client the endpoint should use."/>
         <uriParameter name="minDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory."/>
         <uriParameter name="activePortRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the client side port range in active mode. The syntax is: minPort-maxPort Both port numbers are inclusive eg 10000-19999 to include all 1xxxx ports."/>
         <uriParameter name="include" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to include files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true."/>
         <uriParameter name="streamDownload" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets the download method to use when not using a local working directory. If set to true the remote files are streamed to the route as they are read. When set to false the remote files are loaded into memory before being sent into the route."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Delay in millis Camel will wait before performing a reconnect attempt."/>
         <uriParameter name="filter" type="object" javaType="org.apache.camel.component.file.GenericFileFilter&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method."/>
         <uriParameter name="maxDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="consumer,filter" group="filter" description="The maximum depth to traverse when recursively processing a directory."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="32768" label="consumer,advanced" group="consumer (advanced)" description="The receive (download) buffer size Used only by FTPClient"/>
         <uriParameter name="filterFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the file based on Simple language. For example to filter on file size you can use $file:size 5000"/>
         <uriParameter name="isImplicit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Set the security mode(Implicit/Explicit). true - Implicit Mode / False - Explicit Mode"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="shuffle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,sort" group="sort" description="To shuffle the list of files (sort in random order)"/>
         <uriParameter name="antInclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format."/>
         <uriParameter name="moveExisting" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base."/>
         <uriParameter name="throwExceptionOnConnectFailed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Should an exception be thrown if connection failed (exhausted) By default exception is not thrown and a WARN is logged. You can use this to enable exception being thrown and handle the thrown exception from the org.apache.camel.spi.PollingConsumerPollStrategy rollback method."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="flatten" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Flatten is used to flatten the file name path to strip any leading paths so it&apos;s just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths."/>
         <uriParameter name="download" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the FTP consumer should download the file. If this option is set to false then the message body will be null but the consumer will still trigger a Camel Exchange that has details about the file such as file name file size etc. It&apos;s just that the file will not be downloaded."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerDeleteTargetFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation."/>
         <uriParameter name="readLockRemoveOnRollback" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false then the file name entry is confirmed (as if the file did a commit)."/>
         <uriParameter name="siteCommand" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets optional site command(s) to be executed after successful login. Multiple site commands can be separated using a new line character (\n)."/>
         <uriParameter name="readLockRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname of the FTP server"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="exclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to exclude files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards."/>
         <uriParameter name="fastExistsCheck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common,advanced" group="common (advanced)" description="If set this option to be true camel-ftp will use the list file directly to check if the file exists. Since some FTP server may not support to list the file directly if the option is false camel-ftp will use the old way to list the directory and check if the file exists. This option also influences readLock=changed to control whether it performs a fast check to update file information or not. This can be used to speed up the process if the FTP server has a lot of files."/>
         <uriParameter name="ftpClientTrustStoreParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="security" group="security" description="Set the trust store parameters"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="processStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileProcessStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply."/>
         <uriParameter name="readLock" type="string" javaType="java.lang.String" kind="parameter" choice="none,markerFile,fileLock,rename,changed,idempotent" deprecated="false" label="consumer,lock" group="lock" description="Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering such as Hazelcast Component or Infinispan."/>
         <uriParameter name="separator" type="object" javaType="org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator" kind="parameter" deprecated="false" defaultValue="UNIX" group="common" description="Sets the path separator to be used. UNIX = Uses unix style path separator Windows = Uses windows style path separator Auto = (is default) Use existing path separator in file name"/>
         <uriParameter name="readLockLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,lock" group="lock" description="Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock rename."/>
         <uriParameter name="readLockMinLength" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1" label="consumer,lock" group="lock" description="This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files."/>
         <uriParameter name="ftpClient" type="object" javaType="org.apache.commons.net.ftp.FTPClient" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom instance of FTPClient"/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="Port of the FTP server"/>
         <uriParameter name="readLockMarkerFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="execPbsz" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" label="security" group="security" description="When using secure data channel you can set the exec protection buffer size"/>
         <uriParameter name="eagerMaxMessagesPerPoll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="exclusiveReadLockStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,lock" group="lock" description="Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation."/>
         <uriParameter name="readLockCheckInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,lock" group="lock" description="Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="fileExist" type="string" javaType="org.apache.camel.component.file.GenericFileExist" kind="parameter" choice="Override,Append,Fail,Ignore,Move,TryRename" deprecated="false" defaultValue="Override" label="producer" group="producer" description="What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers."/>
         <uriParameter name="localWorkDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory."/>
         <uriParameter name="startingDirectoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn&apos;t exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn&apos;t exist."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file will be deleted after it is processed successfully."/>
         <uriParameter name="readLockMinAge" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,lock" group="lock" description="This option applied only for readLock=change. This option allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="Sets the data timeout for waiting for reply Used only by FTPClient"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="securityProtocol" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLS" label="security" group="security" description="Set the underlying security protocol."/>
         <uriParameter name="doneFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Producer: If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="onCompletionExceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of &apos;Cannot write null body to file.&apos; will be thrown. If the fileExist option is set to &apos;Override&apos; then the file will be truncated and if set to append the file will remain unchanged."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="moveFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again."/>
         <uriParameter name="preMove" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order."/>
         <uriParameter name="move" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="useList" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command and therefore you can set this option to false."/>
         <uriParameter name="ftpClientConfigParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used by FtpComponent to provide additional parameters for the FTPClientConfig"/>
         <uriParameter name="tempFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language."/>
         <uriParameter name="ignoreFileNotFoundOrPermissionError" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to ignore when trying to download a file which does not exist or due to permission error. By default when a file does not exists or insufficient permission then an exception is thrown. Setting this option to true allows to ignore that instead."/>
         <uriParameter name="antFilterCaseSensitive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Sets case sensitive flag on ant fiter"/>
         <uriParameter name="account" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Account to use for login"/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="131072" label="advanced" group="advanced" description="Write buffer sized in bytes."/>
         <uriParameter name="filterDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the directory based on Simple language. For example to filter on current date you can use a simple date pattern such as $date:now:yyyMMdd"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use for login"/>
      </uriParameters>
   </component>
   <component>
      <id>hdfs2</id>
      <tags>
         <tag>hadoop</tag>
         <tag>file</tag>
      </tags>
      <title>HDFS2</title>
      <description>For reading/writing from/to an HDFS filesystem using Hadoop 2.x.</description>
      <syntax>hdfs2:hostName:port/path</syntax>
      <class>org.apache.camel.component.hdfs2.HdfsComponent</class>
      <kind>component</kind>
      <scheme>hdfs2</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-hdfs2-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="jAASConfiguration" type="object" javaType="javax.security.auth.login.Configuration" kind="property" deprecated="false" description="To use the given configuration for security with JAAS."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="hostName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="HDFS host to use"/>
         <uriParameter name="checkIdleInterval" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="500" label="advanced" group="advanced" description="How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is IDLE."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="pattern" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="*" label="consumer" group="consumer" description="The pattern used for scanning the directory"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="consumer" group="consumer" description="For the consumer how much to wait (milliseconds) before to start scanning the directory."/>
         <uriParameter name="compressionType" type="object" javaType="org.apache.hadoop.io.SequenceFile.CompressionType" kind="parameter" deprecated="false" defaultValue="NONE" label="advanced" group="advanced" description="The compression type to use (is default not in use)"/>
         <uriParameter name="fileSystemType" type="string" javaType="org.apache.camel.component.hdfs2.HdfsFileSystemType" kind="parameter" choice="LOCAL,HDFS" deprecated="false" defaultValue="HDFS" group="common" description="Set to LOCAL to not use HDFS but local java.io.File instead."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The directory path to use"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="valueType" type="string" javaType="org.apache.camel.component.hdfs2.WritableType" kind="parameter" choice="NULL,BOOLEAN,BYTE,INT,FLOAT,LONG,DOUBLE,TEXT,BYTES" deprecated="false" defaultValue="BYTES" group="common" description="The type for the key in case of sequence or map files"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="keyType" type="string" javaType="org.apache.camel.component.hdfs2.WritableType" kind="parameter" choice="NULL,BOOLEAN,BYTE,INT,FLOAT,LONG,DOUBLE,TEXT,BYTES" deprecated="false" defaultValue="NULL" group="common" description="The type for the key in case of sequence or map files."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="overwrite" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Whether to overwrite existing files with the same name"/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="owner" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped."/>
         <uriParameter name="replication" type="integer" javaType="short" kind="parameter" deprecated="false" defaultValue="3" label="advanced" group="advanced" description="The HDFS replication factor"/>
         <uriParameter name="connectOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to connect to the HDFS file system on starting the producer/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup and not block for up till 15 minutes."/>
         <uriParameter name="chunkSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" label="advanced" group="advanced" description="When reading a normal file this is split into chunks producing a message per chunk."/>
         <uriParameter name="openedSuffix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="opened" label="advanced" group="advanced" description="When a file is opened for reading/writing the file is renamed with this suffix to avoid to read it during the writing phase."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="blockSize" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="67108864" label="advanced" group="advanced" description="The size of the HDFS blocks"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer" group="consumer" description="The interval (milliseconds) between the directory scans."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="8020" group="common" description="HDFS port to use"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="splitStrategy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="In the current version of Hadoop opening a file in append mode is disabled since it&apos;s not very reliable. So for the moment it&apos;s only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:valueST:value... where ST can be: BYTES a new file is created and the old is closed when the number of written bytes is more than value MESSAGES a new file is created and the old is closed when the number of written messages is more than value IDLE a new file is created and the old is closed when no writing happened in the last value milliseconds"/>
         <uriParameter name="compressionCodec" type="string" javaType="org.apache.camel.component.hdfs2.HdfsCompressionCodec" kind="parameter" choice="DEFAULT,GZIP,BZIP2" deprecated="false" defaultValue="DEFAULT" label="advanced" group="advanced" description="The compression codec to use"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="fileType" type="string" javaType="org.apache.camel.component.hdfs2.HdfsFileType" kind="parameter" choice="NORMAL_FILE,SEQUENCE_FILE,MAP_FILE,BLOOMMAP_FILE,ARRAY_FILE" deprecated="false" defaultValue="NORMAL_FILE" group="common" description="The file type to use. For more details see Hadoop HDFS documentation about the various files types."/>
         <uriParameter name="append" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Append to existing file. Notice that not all HDFS file systems support the append option."/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="4096" label="advanced" group="advanced" description="The buffer size used by HDFS"/>
         <uriParameter name="readSuffix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="read" label="advanced" group="advanced" description="Once the file has been read is renamed with this suffix to avoid to read it again."/>
      </uriParameters>
   </component>
   <component>
      <id>netty4-http</id>
      <tags>
         <tag>http</tag>
      </tags>
      <title>Netty4 HTTP</title>
      <description>Netty HTTP server and client using the Netty 4.x library.</description>
      <syntax>netty4-http:protocol:host:port/path</syntax>
      <class>org.apache.camel.component.netty4.http.NettyHttpComponent</class>
      <kind>component</kind>
      <extendsScheme>netty4</extendsScheme>
      <scheme>netty4-http</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-netty4-http-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="nettyHttpBinding" type="object" javaType="org.apache.camel.component.netty4.http.NettyHttpBinding" kind="property" deprecated="false" description="To use a custom org.apache.camel.component.netty4.http.NettyHttpBinding for binding to/from Netty and Camel Message API."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.netty4.NettyConfiguration" kind="property" deprecated="false" description="To use the NettyConfiguration as configuration when creating endpoints."/>
         <componentProperty name="executorService" type="object" javaType="io.netty.util.concurrent.EventExecutorGroup" kind="property" deprecated="false" description="To use the given EventExecutorGroup"/>
         <componentProperty name="maximumPoolSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The thread pool size for the EventExecutorGroup if its in use. The default value is 16."/>
         <componentProperty name="securityConfiguration" type="object" javaType="org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration" kind="property" deprecated="false" description="Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration for configuring secure web resources."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="usingExecutorService" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to use ordered thread pool to ensure events are processed orderly on the same channel."/>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer."/>
         <uriParameter name="enabledProtocols" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="TLSv1,TLSv1.1,TLSv1.2" label="security" group="security" description="Which protocols to enable when using SSL"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="nettySharedHttpServer" type="object" javaType="org.apache.camel.component.netty4.http.NettySharedHttpServer" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a shared Netty HTTP server. See Netty HTTP Server Example for more details."/>
         <uriParameter name="keyStoreFormat" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Keystore format to be used for payload encryption. Defaults to JKS if not set"/>
         <uriParameter name="producerPoolMinIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects."/>
         <uriParameter name="ssl" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Setting to specify whether SSL encryption is applied to this endpoint"/>
         <uriParameter name="bossGroup" type="object" javaType="io.netty.channel.EventLoopGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Resource path"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="http,https" deprecated="false" required="true" group="common" description="The protocol to use which is either http or https"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Security provider to be used for payload encryption. Defaults to SunX509 if not set."/>
         <uriParameter name="useRelativePath" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Sets whether to use a relative path in HTTP requests."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The local hostname such as localhost or 0.0.0.0 when being a consumer. The remote HTTP server hostname when using producer."/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="producer" group="producer" description="Time to wait for a socket connection to be available. Value is in millis."/>
         <uriParameter name="options" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used."/>
         <uriParameter name="workerGroup" type="object" javaType="io.netty.channel.EventLoopGroup" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers. By default each consumer has their own boss pool with 1 core thread."/>
         <uriParameter name="producerPoolMinEvictableIdle" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="300000" label="producer,advanced" group="producer (advanced)" description="Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor."/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If the option is true the producer will ignore the Exchange.HTTP_URI header and use the endpoint&apos;s URI for request. You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back. The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange)."/>
         <uriParameter name="tcpNoDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to improve TCP protocol performance"/>
         <uriParameter name="needClientAuth" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,security" group="security" description="Configures whether the server needs client authentication when using SSL."/>
         <uriParameter name="sslHandler" type="object" javaType="io.netty.handler.ssl.SslHandler" kind="parameter" deprecated="false" label="security" group="security" description="Reference to a class that could be used to return an SSL Handler"/>
         <uriParameter name="throwExceptionOnFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code."/>
         <uriParameter name="encoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="keyStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption"/>
         <uriParameter name="decoders" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup."/>
         <uriParameter name="reuseAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to facilitate socket multiplexing"/>
         <uriParameter name="decoder" type="object" javaType="io.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="To use a single decoder. This options is deprecated use encoders instead."/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to set endpoint as one-way or request-response"/>
         <uriParameter name="encoder" type="object" javaType="io.netty.channel.ChannelHandler" kind="parameter" deprecated="true" label="codec" group="codec" description="To use a single encoder. This options is deprecated use encoders instead."/>
         <uriParameter name="securityOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,security" group="security" description="To configure NettyHttpSecurityConfiguration using key/value pairs from the map"/>
         <uriParameter name="workerCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty"/>
         <uriParameter name="backlog" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting."/>
         <uriParameter name="disableStreamCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Determines whether or not the raw input stream from Netty HttpRequestgetContent() or HttpResponsetgetContent() is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache. By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. Mind that if you enable this option then you cannot read the Netty stream multiple times out of the box and you would need manually to reset the reader index on the Netty raw stream. Also Netty will auto-close the Netty stream when the Netty HTTP server/HTTP client is done processing which means that if the asynchronous routing engine is in use then any asynchronous thread that may continue routing the org.apache.camel.Exchange may not be able to read the Netty stream because Netty has closed it."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The host port number"/>
         <uriParameter name="passphrase" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password setting to use in order to encrypt/decrypt payloads sent using SSH"/>
         <uriParameter name="compression" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers."/>
         <uriParameter name="nettyServerBootstrapFactory" type="object" javaType="org.apache.camel.component.netty4.NettyServerBootstrapFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom NettyServerBootstrapFactory"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="securityConfiguration" type="object" javaType="org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration" kind="parameter" deprecated="false" label="consumer,security" group="security" description="Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration for configuring secure web resources."/>
         <uriParameter name="trustStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="bossCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer,advanced" group="consumer (advanced)" description="When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty"/>
         <uriParameter name="serverInitializerFactory" type="object" javaType="org.apache.camel.component.netty4.ServerInitializerFactory" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom ServerInitializerFactory"/>
         <uriParameter name="sslClientCertHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range."/>
         <uriParameter name="configuration" type="object" javaType="org.apache.camel.component.netty4.http.NettyHttpConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyHttpConfiguration for configuring this endpoint."/>
         <uriParameter name="disconnectOnNoReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="keyStoreResource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Client side certificate keystore to be used for encryption. Is loaded by default from classpath but you can prefix with classpath: file: or http: to load the resource from different systems."/>
         <uriParameter name="maxHeaderSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="8192" label="consumer,advanced" group="consumer (advanced)" description="The maximum length of all headers. If the sum of the length of each header exceeds this value a io.netty.handler.codec.TooLongFrameException will be raised."/>
         <uriParameter name="reuseChannel" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="This option allows producers to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useable if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key link NettyConstantsNETTY_CHANNEL which allows you to obtain the channel during routing and use it as well."/>
         <uriParameter name="producerPoolMaxIdle" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of idle instances in the pool."/>
         <uriParameter name="producerPoolEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether producer pool is enabled or not. Important: Do not turn this off as the pooling is needed for handling concurrency and reliable request/reply."/>
         <uriParameter name="trustStoreFile" type="string" javaType="java.io.File" kind="parameter" deprecated="false" label="security" group="security" description="Server side certificate keystore to be used for encryption"/>
         <uriParameter name="chunkedMaxContentLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1048576" label="consumer,advanced" group="consumer (advanced)" description="Value in bytes the max content length per chunked frame received on the Netty HTTP server."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="noReplyLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back."/>
         <uriParameter name="urlDecodeHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="If this option is enabled then during binding from Netty to Camel Message then the header values will be URL decoded (eg 20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding and therefore if you implement a custom org.apache.camel.component.netty4.http.NettyHttpBinding then you would need to decode the headers accordingly to this option."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="mapHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If this option is enabled then during binding from Netty to Camel Message then the headers will be mapped as well (eg added as header to the Camel Message as well). You can turn off this option to disable this. The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with the method getHttpRequest() that returns the Netty HTTP request io.netty.handler.codec.http.HttpRequest instance."/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty&apos;s ReadTimeoutHandler to trigger the timeout."/>
         <uriParameter name="receiveBufferSizePredictor" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Configures the buffer size predictor. See details at Jetty documentation and this mail thread."/>
         <uriParameter name="keepAlive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to ensure socket is not closed due to inactivity"/>
         <uriParameter name="producerPoolMaxActive" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer,advanced" group="producer (advanced)" description="Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit."/>
         <uriParameter name="nettyHttpBinding" type="object" javaType="org.apache.camel.component.netty4.http.NettyHttpBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.component.netty4.http.NettyHttpBinding for binding to/from Netty and Camel Message API."/>
         <uriParameter name="httpMethodRestrict" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To disable HTTP methods on the Netty HTTP consumer. You can specify multiple separated by comma."/>
         <uriParameter name="matchOnUriPrefix" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found."/>
         <uriParameter name="clientInitializerFactory" type="object" javaType="org.apache.camel.component.netty4.ClientInitializerFactory" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="To use a custom ClientInitializerFactory"/>
         <uriParameter name="sendBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="lazyChannelCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started."/>
         <uriParameter name="allowSerializedHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP when transferExchange is true. When set to true serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="channelGroup" type="object" javaType="io.netty.channel.group.ChannelGroup" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a explicit ChannelGroup."/>
         <uriParameter name="okStatusCodeRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="200-299" label="producer,advanced" group="producer (advanced)" description="The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included. The default range is 200-299"/>
         <uriParameter name="send503whenSuspended" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether to send back HTTP status code 503 when the consumer has been suspended. If the option is false then the Netty Acceptor is unbound when the consumer is suspended so clients cannot connect anymore."/>
         <uriParameter name="bootstrapConfiguration" type="object" javaType="org.apache.camel.component.netty4.NettyServerBootstrapConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="65536" label="advanced" group="advanced" description="The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes."/>
         <uriParameter name="serverClosedChannelExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="DEBUG" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server."/>
         <uriParameter name="nativeTransport" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use native transport instead of NIO. Native transport takes advantage of the host operating system and is only supported on some platforms. You need to add the netty JAR for the host operating system you are using. See more details at: http://netty.io/wiki/native-transports.html"/>
         <uriParameter name="serverExceptionCaughtLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If the server (NettyConsumer) catches an exception then its logged using this logging level."/>
         <uriParameter name="traceEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether to enable HTTP TRACE for this Netty HTTP consumer. By default TRACE is turned off."/>
      </uriParameters>
   </component>
   <component>
      <id>disruptor-vm</id>
      <tags>
         <tag>endpoint</tag>
      </tags>
      <title>Disruptor VM</title>
      <description>The disruptor component provides asynchronous SEDA behavior using LMAX Disruptor.</description>
      <syntax>disruptor-vm:name</syntax>
      <class>org.apache.camel.component.disruptor.vm.DisruptorVmComponent</class>
      <kind>component</kind>
      <scheme>disruptor-vm</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-disruptor-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="defaultConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="To configure the default number of concurrent consumers"/>
         <componentProperty name="defaultWaitStrategy" type="string" javaType="org.apache.camel.component.disruptor.DisruptorWaitStrategy" kind="property" choice="Blocking,Sleeping,BusySpin,Yielding" deprecated="false" description="To configure the default value for DisruptorWaitStrategy The default value is Blocking."/>
         <componentProperty name="queueSize" type="integer" javaType="int" kind="property" deprecated="true" defaultValue="0" description="To configure the ring buffer size"/>
         <componentProperty name="defaultBlockWhenFull" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="To configure the default value for block when full The default value is true."/>
         <componentProperty name="defaultMultipleConsumers" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="To configure the default value for multiple consumers"/>
         <componentProperty name="defaultProducerType" type="string" javaType="org.apache.camel.component.disruptor.DisruptorProducerType" kind="property" choice="Single,Multi" deprecated="false" description="To configure the default value for DisruptorProducerType The default value is Multi."/>
         <componentProperty name="bufferSize" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="To configure the ring buffer size"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="waitForTaskToComplete" type="string" javaType="org.apache.camel.WaitForTaskToComplete" kind="parameter" choice="Never,IfReplyExpected,Always" deprecated="false" defaultValue="IfReplyExpected" label="producer" group="producer" description="Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based."/>
         <uriParameter name="blockWhenFull" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether a thread that sends messages to a full Disruptor will block until the ringbuffer&apos;s capacity is no longer exhausted. By default the calling thread will block and wait until the message can be accepted. By disabling this option an exception will be thrown stating that the queue is full."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent threads processing exchanges."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value."/>
         <uriParameter name="waitStrategy" type="string" javaType="org.apache.camel.component.disruptor.DisruptorWaitStrategy" kind="parameter" choice="Blocking,Sleeping,BusySpin,Yielding" deprecated="false" defaultValue="Blocking" label="consumer" group="consumer" description="Defines the strategy used by consumer threads to wait on new exchanges to be published. The options allowed are:Blocking Sleeping BusySpin and Yielding."/>
         <uriParameter name="producerType" type="string" javaType="org.apache.camel.component.disruptor.DisruptorProducerType" kind="parameter" choice="Single,Multi" deprecated="false" defaultValue="Multi" label="producer" group="producer" description="Defines the producers allowed on the Disruptor. The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only allowed when one concurrent producer (on one thread or otherwise synchronized) is active."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="size" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1024" group="common" description="The maximum capacity of the Disruptors ringbuffer Will be effectively increased to the nearest power of two. Notice: Mind if you use this option then its the first endpoint being created with the queue name that determines the size. To make sure all endpoints use same size then configure the size option on all of them or the first endpoint being created."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of queue"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="multipleConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Specifies whether multiple consumers are allowed. If enabled you can use Disruptor for Publish-Subscribe messaging. That is you can send a message to the queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint."/>
      </uriParameters>
   </component>
   <component>
      <id>ftp</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>FTP</title>
      <description>The ftp component is used for uploading or downloading files from FTP servers.</description>
      <syntax>ftp:host:port/directoryName</syntax>
      <class>org.apache.camel.component.file.remote.FtpComponent</class>
      <kind>component</kind>
      <extendsScheme>file</extendsScheme>
      <scheme>ftp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ftp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop then you need to stop the consumer/route instead."/>
         <uriParameter name="fileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Use Expression such as File Language to dynamically set the filename. For consumers it&apos;s used as a filename filter. For producers it&apos;s used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today&apos;s file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="idempotent" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,filter" group="filter" description="Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use for login"/>
         <uriParameter name="sortBy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="directoryName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="The starting directory"/>
         <uriParameter name="readLockDeleteOrphanLockFiles" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether or not read lock with marker files should upon startup delete any orphan read lock files which may have been left on the file system if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file this could also be due another node is concurrently reading files from the same shared directory."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="inProgressRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used."/>
         <uriParameter name="soTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="300000" label="advanced" group="advanced" description="Sets the so timeout Used only by FTPClient"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="passiveMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Sets passive mode connections. Default is active mode connections."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="binary" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Specifies the file transfer mode BINARY or ASCII. Default is ASCII (false)."/>
         <uriParameter name="readLockTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" label="consumer,lock" group="lock" description="Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="charset" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well."/>
         <uriParameter name="disconnectOnBatchComplete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server."/>
         <uriParameter name="ftpClientParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used by FtpComponent to provide additional parameters for the FTPClient"/>
         <uriParameter name="idempotentKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size"/>
         <uriParameter name="sorter" type="object" javaType="java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;T&gt;&gt;" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Pluggable sorter as a java.util.Comparator class."/>
         <uriParameter name="maximumReconnectAttempts" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Specifies the maximum reconnect attempts Camel performs when it tries to connect to the remote FTP server. Use 0 to disable this behavior."/>
         <uriParameter name="stepwise" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Sets whether we should stepwise change directories while traversing file structures when downloading files or as well when uploading a file to a directory. You can disable this if you for example are in a situation where you cannot change directory on the FTP server due security reasons."/>
         <uriParameter name="directoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Similar to startingDirectoryMustExist but this applies during polling recursive sub directories."/>
         <uriParameter name="autoCreate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Automatically create missing directories in the file&apos;s pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to."/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If a directory will look for files in all the sub-directories as well."/>
         <uriParameter name="antExclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format."/>
         <uriParameter name="keepLastModified" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers."/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="tempPrefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files."/>
         <uriParameter name="sendNoop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid which allows to silently re-connect to be able to upload the file. However if this causes problems you can turn this option off."/>
         <uriParameter name="ftpClientConfig" type="object" javaType="org.apache.commons.net.ftp.FTPClientConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom instance of FTPClientConfig to configure the FTP client the endpoint should use."/>
         <uriParameter name="minDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory."/>
         <uriParameter name="activePortRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the client side port range in active mode. The syntax is: minPort-maxPort Both port numbers are inclusive eg 10000-19999 to include all 1xxxx ports."/>
         <uriParameter name="include" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to include files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true."/>
         <uriParameter name="streamDownload" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets the download method to use when not using a local working directory. If set to true the remote files are streamed to the route as they are read. When set to false the remote files are loaded into memory before being sent into the route."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Delay in millis Camel will wait before performing a reconnect attempt."/>
         <uriParameter name="filter" type="object" javaType="org.apache.camel.component.file.GenericFileFilter&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method."/>
         <uriParameter name="maxDepth" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="consumer,filter" group="filter" description="The maximum depth to traverse when recursively processing a directory."/>
         <uriParameter name="receiveBufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="32768" label="consumer,advanced" group="consumer (advanced)" description="The receive (download) buffer size Used only by FTPClient"/>
         <uriParameter name="filterFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the file based on Simple language. For example to filter on file size you can use $file:size 5000"/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="shuffle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,sort" group="sort" description="To shuffle the list of files (sort in random order)"/>
         <uriParameter name="antInclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format."/>
         <uriParameter name="moveExisting" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base."/>
         <uriParameter name="throwExceptionOnConnectFailed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Should an exception be thrown if connection failed (exhausted) By default exception is not thrown and a WARN is logged. You can use this to enable exception being thrown and handle the thrown exception from the org.apache.camel.spi.PollingConsumerPollStrategy rollback method."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="flatten" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Flatten is used to flatten the file name path to strip any leading paths so it&apos;s just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths."/>
         <uriParameter name="download" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the FTP consumer should download the file. If this option is set to false then the message body will be null but the consumer will still trigger a Camel Exchange that has details about the file such as file name file size etc. It&apos;s just that the file will not be downloaded."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerDeleteTargetFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation."/>
         <uriParameter name="readLockRemoveOnRollback" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false then the file name entry is confirmed (as if the file did a commit)."/>
         <uriParameter name="siteCommand" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets optional site command(s) to be executed after successful login. Multiple site commands can be separated using a new line character (\n)."/>
         <uriParameter name="readLockRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,lock" group="lock" description="This option applied only for readLock=idempotent. This option allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname of the FTP server"/>
         <uriParameter name="connectTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="exclude" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Is used to exclude files if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris"/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,filter" group="filter" description="To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards."/>
         <uriParameter name="fastExistsCheck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common,advanced" group="common (advanced)" description="If set this option to be true camel-ftp will use the list file directly to check if the file exists. Since some FTP server may not support to list the file directly if the option is false camel-ftp will use the old way to list the directory and check if the file exists. This option also influences readLock=changed to control whether it performs a fast check to update file information or not. This can be used to speed up the process if the FTP server has a lot of files."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="processStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileProcessStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply."/>
         <uriParameter name="readLock" type="string" javaType="java.lang.String" kind="parameter" choice="none,markerFile,fileLock,rename,changed,idempotent" deprecated="false" label="consumer,lock" group="lock" description="Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering such as Hazelcast Component or Infinispan."/>
         <uriParameter name="separator" type="object" javaType="org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator" kind="parameter" deprecated="false" defaultValue="UNIX" group="common" description="Sets the path separator to be used. UNIX = Uses unix style path separator Windows = Uses windows style path separator Auto = (is default) Use existing path separator in file name"/>
         <uriParameter name="readLockLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,lock" group="lock" description="Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock rename."/>
         <uriParameter name="readLockMinLength" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1" label="consumer,lock" group="lock" description="This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files."/>
         <uriParameter name="ftpClient" type="object" javaType="org.apache.commons.net.ftp.FTPClient" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom instance of FTPClient"/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="Port of the FTP server"/>
         <uriParameter name="readLockMarkerFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,lock" group="lock" description="Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="eagerMaxMessagesPerPoll" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="exclusiveReadLockStrategy" type="object" javaType="org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;T&gt;" kind="parameter" deprecated="false" label="consumer,lock" group="lock" description="Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation."/>
         <uriParameter name="readLockCheckInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,lock" group="lock" description="Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit."/>
         <uriParameter name="fileExist" type="string" javaType="org.apache.camel.component.file.GenericFileExist" kind="parameter" choice="Override,Append,Fail,Ignore,Move,TryRename" deprecated="false" defaultValue="Override" label="producer" group="producer" description="What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers."/>
         <uriParameter name="localWorkDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory."/>
         <uriParameter name="startingDirectoryMustExist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn&apos;t exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn&apos;t exist."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the file will be deleted after it is processed successfully."/>
         <uriParameter name="readLockMinAge" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,lock" group="lock" description="This option applied only for readLock=change. This option allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="Sets the data timeout for waiting for reply Used only by FTPClient"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="doneFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Producer: If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="onCompletionExceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of &apos;Cannot write null body to file.&apos; will be thrown. If the fileExist option is set to &apos;Override&apos; then the file will be truncated and if set to append the file will remain unchanged."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="moveFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again."/>
         <uriParameter name="preMove" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order."/>
         <uriParameter name="move" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="useList" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command and therefore you can set this option to false."/>
         <uriParameter name="ftpClientConfigParameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used by FtpComponent to provide additional parameters for the FTPClientConfig"/>
         <uriParameter name="tempFileName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language."/>
         <uriParameter name="ignoreFileNotFoundOrPermissionError" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether to ignore when trying to download a file which does not exist or due to permission error. By default when a file does not exists or insufficient permission then an exception is thrown. Setting this option to true allows to ignore that instead."/>
         <uriParameter name="antFilterCaseSensitive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="Sets case sensitive flag on ant fiter"/>
         <uriParameter name="account" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Account to use for login"/>
         <uriParameter name="bufferSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="131072" label="advanced" group="advanced" description="Write buffer sized in bytes."/>
         <uriParameter name="filterDirectory" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Filters the directory based on Simple language. For example to filter on current date you can use a simple date pattern such as $date:now:yyyMMdd"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use for login"/>
      </uriParameters>
   </component>
   <component>
      <id>amqp</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>AMQP</title>
      <description>Messaging with AMQP protocol using Apache QPid Client.</description>
      <syntax>amqp:destinationType:destinationName</syntax>
      <class>org.apache.camel.component.amqp.AMQPComponent</class>
      <kind>component</kind>
      <extendsScheme>jms</extendsScheme>
      <scheme>amqp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-amqp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="includeSentJMSMessageID" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination."/>
         <componentProperty name="asyncConsumer" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions)."/>
         <componentProperty name="mapJmsMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details."/>
         <componentProperty name="requestTimeoutCheckerInterval" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout."/>
         <componentProperty name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <componentProperty name="cacheLevel" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the cache level by ID for the underlying JMS resources. See cacheLevelName option for more details."/>
         <componentProperty name="errorHandlerLogStackTrace" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Allows to control whether stacktraces should be logged or not by the default errorHandler."/>
         <componentProperty name="eagerLoadingOfProperties" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties"/>
         <componentProperty name="timeToLive" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="When sending messages specifies the time-to-live of the message (in milliseconds)."/>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
         <componentProperty name="replyToMaxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <componentProperty name="deliveryMode" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Specifies the delivery mode to be used. Possible values are Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2."/>
         <componentProperty name="transferException" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer."/>
         <componentProperty name="exceptionListener" type="object" javaType="javax.jms.ExceptionListener" kind="property" deprecated="false" description="Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."/>
         <componentProperty name="asyncStartListener" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry."/>
         <componentProperty name="transactionManager" type="object" javaType="org.springframework.transaction.PlatformTransactionManager" kind="property" deprecated="false" description="The Spring transaction manager to use."/>
         <componentProperty name="waitForProvisionCorrelationToBeUpdatedThreadSleepingTime" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Interval in millis to sleep each time while waiting for provisional correlation id to be updated."/>
         <componentProperty name="alwaysCopyMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)"/>
         <componentProperty name="replyToConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <componentProperty name="maxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <componentProperty name="taskExecutor" type="object" javaType="org.springframework.core.task.TaskExecutor" kind="property" deprecated="false" description="Allows you to specify a custom task executor for consuming messages."/>
         <componentProperty name="deliveryPersistent" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether persistent delivery is used by default."/>
         <componentProperty name="priority" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect."/>
         <componentProperty name="concurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <componentProperty name="acceptMessagesWhileStopping" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option."/>
         <componentProperty name="acknowledgementMode" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The JMS acknowledgement mode defined as an Integer. Allows you to set vendor-specific extensions to the acknowledgment mode. For the regular modes it is preferable to use the acknowledgementModeName instead."/>
         <componentProperty name="jmsOperations" type="object" javaType="org.springframework.jms.core.JmsOperations" kind="property" deprecated="false" description="Allows you to use your own implementation of the org.springframework.jms.core.JmsOperations interface. Camel uses JmsTemplate as default. Can be used for testing purpose but not used much as stated in the spring API docs."/>
         <componentProperty name="acknowledgementModeName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE"/>
         <componentProperty name="exposeListenerSession" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the listener session should be exposed when consuming messages."/>
         <componentProperty name="receiveTimeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="The timeout for receiving messages (in milliseconds)."/>
         <componentProperty name="applicationContext" type="object" javaType="org.springframework.context.ApplicationContext" kind="property" deprecated="false" description="Sets the Spring ApplicationContext to use"/>
         <componentProperty name="subscriptionDurable" type="boolean" javaType="boolean" kind="property" deprecated="true" defaultValue="false" description="Deprecated: Enabled by default if you specify a durableSubscriptionName and a clientId."/>
         <componentProperty name="destinationResolver" type="object" javaType="org.springframework.jms.support.destination.DestinationResolver" kind="property" deprecated="false" description="A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example to lookup the real destination in a JNDI registry)."/>
         <componentProperty name="errorHandlerLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="property" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" description="Allows to configure the default errorHandler logging level for logging uncaught exceptions."/>
         <componentProperty name="errorHandler" type="object" javaType="org.springframework.util.ErrorHandler" kind="property" deprecated="false" description="Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler."/>
         <componentProperty name="allowReplyManagerQuickStop" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfigurationisAcceptMessagesWhileStopping is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag."/>
         <componentProperty name="idleConsumerLimit" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specify the limit for the number of consumers that are allowed to be idle at any given time."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.jms.JmsConfiguration" kind="property" deprecated="false" description="To use a shared JMS configuration"/>
         <componentProperty name="explicitQosEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers."/>
         <componentProperty name="messageConverter" type="object" javaType="org.springframework.jms.support.converter.MessageConverter" kind="property" deprecated="false" description="To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message."/>
         <componentProperty name="maxMessagesPerTask" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required."/>
         <componentProperty name="transacted" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to use transacted mode"/>
         <componentProperty name="transactionName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The name of the transaction to use."/>
         <componentProperty name="autoStartup" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the consumer container should auto-startup."/>
         <componentProperty name="messageTimestampEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether timestamps should be enabled by default on sending messages."/>
         <componentProperty name="replyOnTimeoutToMaxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS."/>
         <componentProperty name="jmsKeyFormatStrategy" type="object" javaType="org.apache.camel.component.jms.JmsKeyFormatStrategy" kind="property" deprecated="false" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="lazyCreateTransactionManager" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true."/>
         <componentProperty name="waitForProvisionCorrelationToBeUpdatedCounter" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled."/>
         <componentProperty name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.jms.MessageCreatedStrategy" kind="property" deprecated="false" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <componentProperty name="asyncStopListener" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to stop the JmsConsumer message listener asynchronously when stopping a route."/>
         <componentProperty name="transferExchange" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body Out body Fault body In headers Out headers Fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side so Camel knows the payloads is an Exchange and not a regular payload."/>
         <componentProperty name="requestTimeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option."/>
         <componentProperty name="allowNullBody" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
         <componentProperty name="clientId" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead."/>
         <componentProperty name="recoveryInterval" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds."/>
         <componentProperty name="replyToCacheLevelName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION."/>
         <componentProperty name="messageIdEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="When sending specifies whether message IDs should be added."/>
         <componentProperty name="pubSubNoLocal" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to inhibit the delivery of messages published by its own connection."/>
         <componentProperty name="queueBrowseStrategy" type="object" javaType="org.apache.camel.component.jms.QueueBrowseStrategy" kind="property" deprecated="false" description="To use a custom QueueBrowseStrategy when browsing queues"/>
         <componentProperty name="forceSendOriginalMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received."/>
         <componentProperty name="preserveMessageQos" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header."/>
         <componentProperty name="replyToType" type="string" javaType="org.apache.camel.component.jms.ReplyToType" kind="property" choice="Temporary,Shared,Exclusive" deprecated="false" description="Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary Shared or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details and especially the notes about the implications if running in a clustered environment and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive."/>
         <componentProperty name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="property" deprecated="false" description="Sets the default connection factory to be use"/>
         <componentProperty name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well."/>
         <componentProperty name="useMessageIDAsCorrelationID" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages."/>
         <componentProperty name="transactionTimeout" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The timeout value of the transaction (in seconds) if using transacted mode."/>
         <componentProperty name="durableSubscriptionName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well."/>
         <componentProperty name="defaultTaskExecutorType" type="string" javaType="org.apache.camel.component.jms.DefaultTaskExecutorType" kind="property" choice="ThreadPool,SimpleAsync" deprecated="false" description="Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer for both consumer endpoints and the ReplyTo consumer of producer endpoints. Possible values: SimpleAsync (uses Spring's SimpleAsyncTaskExecutor) or ThreadPool (uses Spring's ThreadPoolTaskExecutor with optimal values - cached threadpool-like). If not set it defaults to the previous behaviour which uses a cached thread pool for consumer endpoints and SimpleAsync for reply consumers. The use of ThreadPool is recommended to reduce thread trash in elastic configurations with dynamically increasing and decreasing concurrent consumers."/>
         <componentProperty name="cacheLevelName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the cache level by name for the underlying JMS resources. Possible values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION. The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information."/>
         <componentProperty name="transferFault" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on link org.apache.camel.MessageisFault() will be send back in the response as a JMS header with the key link JmsConstantsJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws."/>
         <componentProperty name="idleTaskExecutionLimit" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring."/>
         <componentProperty name="username" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="includeSentJMSMessageID" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination."/>
         <uriParameter name="asyncConsumer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions)."/>
         <uriParameter name="mapJmsMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc."/>
         <uriParameter name="messageListenerContainerFactory" type="object" javaType="org.apache.camel.component.jms.MessageListenerContainerFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Registry ID of the MessageListenerContainerFactory used to determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages. Setting this will automatically set consumerType to Custom."/>
         <uriParameter name="requestTimeoutCheckerInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="advanced" group="advanced" description="Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <uriParameter name="errorHandlerLogStackTrace" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Allows to control whether stacktraces should be logged or not by the default errorHandler."/>
         <uriParameter name="eagerLoadingOfProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties"/>
         <uriParameter name="timeToLive" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="When sending messages specifies the time-to-live of the message (in milliseconds)."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="replyToMaxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <uriParameter name="deliveryMode" type="string" javaType="java.lang.Integer" kind="parameter" choice="1,2" deprecated="false" label="producer" group="producer" description="Specifies the delivery mode to be used. Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer."/>
         <uriParameter name="exceptionListener" type="object" javaType="javax.jms.ExceptionListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."/>
         <uriParameter name="destinationType" type="string" javaType="java.lang.String" kind="path" choice="queue,topic,temp:queue,temp:topic" deprecated="false" defaultValue="queue" group="common" description="The kind of destination to use"/>
         <uriParameter name="asyncStartListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry."/>
         <uriParameter name="waitForProvisionCorrelationToBeUpdatedThreadSleepingTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="100" label="advanced" group="advanced" description="Interval in millis to sleep each time while waiting for provisional correlation id to be updated."/>
         <uriParameter name="transactionManager" type="object" javaType="org.springframework.transaction.PlatformTransactionManager" kind="parameter" deprecated="false" label="transaction,advanced" group="transaction (advanced)" description="The Spring transaction manager to use."/>
         <uriParameter name="alwaysCopyMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)"/>
         <uriParameter name="replyToConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="producer" group="producer" description="Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <uriParameter name="replyToDestinationSelectorName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets the JMS Selector using the fixed name to be used so you can filter out your own replies from the others when using a shared queue (that is if you are not using a temporary reply queue)."/>
         <uriParameter name="maxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <uriParameter name="disableTimeToLive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Use this option to force disabling time to live. For example when you do request/reply over JMS then Camel will by default use the requestTimeout value as time to live on the message being sent. The problem is that the sender and receiver systems have to have their clocks synchronized so they are in sync. This is not always so easy to archive. So you can use disableTimeToLive=true to not set a time to live value on the sent message. Then the message will not expire on the receiver system. See below in section About time to live for more details."/>
         <uriParameter name="deliveryPersistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Specifies whether persistent delivery is used by default."/>
         <uriParameter name="priority" type="string" javaType="int" kind="parameter" choice="1,2,3,4,5,6,7,8,9" deprecated="false" defaultValue="4" label="producer" group="producer" description="Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <uriParameter name="acceptMessagesWhileStopping" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option."/>
         <uriParameter name="consumerType" type="string" javaType="org.apache.camel.component.jms.ConsumerType" kind="parameter" choice="Simple,Default,Custom" deprecated="false" defaultValue="Default" label="consumer,advanced" group="consumer (advanced)" description="The consumer type to use which can be one of: Simple Default or Custom. The consumer type determines which Spring JMS listener to use. Default will use org.springframework.jms.listener.DefaultMessageListenerContainer Simple will use org.springframework.jms.listener.SimpleMessageListenerContainer. When Custom is specified the MessageListenerContainerFactory defined by the messageListenerContainerFactory option will determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use."/>
         <uriParameter name="acknowledgementModeName" type="string" javaType="java.lang.String" kind="parameter" choice="SESSION_TRANSACTED,CLIENT_ACKNOWLEDGE,AUTO_ACKNOWLEDGE,DUPS_OK_ACKNOWLEDGE" deprecated="false" defaultValue="AUTO_ACKNOWLEDGE" label="consumer" group="consumer" description="The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE"/>
         <uriParameter name="exposeListenerSession" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether the listener session should be exposed when consuming messages."/>
         <uriParameter name="receiveTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="advanced" group="advanced" description="The timeout for receiving messages (in milliseconds)."/>
         <uriParameter name="destinationResolver" type="object" javaType="org.springframework.jms.support.destination.DestinationResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example to lookup the real destination in a JNDI registry)."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Provides an explicit ReplyTo destination which overrides any incoming value of Message.getJMSReplyTo()."/>
         <uriParameter name="replyToOverride" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Provides an explicit ReplyTo destination in the JMS message which overrides the setting of replyTo. It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination."/>
         <uriParameter name="errorHandlerLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="advanced" group="advanced" description="Allows to configure the default errorHandler logging level for logging uncaught exceptions."/>
         <uriParameter name="errorHandler" type="object" javaType="org.springframework.util.ErrorHandler" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="allowReplyManagerQuickStop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfigurationisAcceptMessagesWhileStopping is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag."/>
         <uriParameter name="idleConsumerLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="advanced" group="advanced" description="Specify the limit for the number of consumers that are allowed to be idle at any given time."/>
         <uriParameter name="replyToOnTimeoutMaxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="producer" group="producer" description="Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS."/>
         <uriParameter name="explicitQosEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring&apos;s JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers."/>
         <uriParameter name="messageConverter" type="object" javaType="org.springframework.jms.support.converter.MessageConverter" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message."/>
         <uriParameter name="maxMessagesPerTask" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="advanced" group="advanced" description="The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="transaction" group="transaction" description="Specifies whether to use transacted mode"/>
         <uriParameter name="transactionName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="transaction,advanced" group="transaction (advanced)" description="The name of the transaction to use."/>
         <uriParameter name="autoStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Specifies whether the consumer container should auto-startup."/>
         <uriParameter name="messageTimestampEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS broker.If the JMS provider accepts this hint these messages must have the timestamp set to zero; if the provider ignores the hint the timestamp must be set to its normal value"/>
         <uriParameter name="jmsKeyFormatStrategy" type="string" javaType="java.lang.String" kind="parameter" choice="default,passthrough" deprecated="false" label="advanced" group="advanced" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="waitForProvisionCorrelationToBeUpdatedCounter" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="50" label="advanced" group="advanced" description="Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled."/>
         <uriParameter name="lazyCreateTransactionManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="transaction,advanced" group="transaction (advanced)" description="If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true."/>
         <uriParameter name="destinationName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the queue or topic to use as destination"/>
         <uriParameter name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.jms.MessageCreatedStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <uriParameter name="asyncStopListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to stop the JmsConsumer message listener asynchronously when stopping a route."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body Out body Fault body In headers Out headers Fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side so Camel knows the payloads is an Exchange and not a regular payload."/>
         <uriParameter name="selector" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the JMS selector to use"/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="20000" label="producer" group="producer" description="The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
         <uriParameter name="replyToDeliveryPersistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Specifies whether to use persistent delivery by default for replies."/>
         <uriParameter name="disableReplyTo" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true a producer will behave like a InOnly exchange with the exception that JMSReplyTo header is sent out and not be suppressed like in the case of InOnly. Like InOnly the producer will not wait for a reply. A consumer with this flag will behave like InOnly. This feature can be used to bridge InOut requests to another queue so that a route on the other queue will send its response directly back to the original JMSReplyTo."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead."/>
         <uriParameter name="recoveryInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="advanced" group="advanced" description="Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds."/>
         <uriParameter name="replyToCacheLevelName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION."/>
         <uriParameter name="messageIdEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="When sending specifies whether message IDs should be added. This is just an hint to the JMS broker.If the JMS provider accepts this hint these messages must have the message ID set to null; if the provider ignores the hint the message ID must be set to its normal unique value"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="pubSubNoLocal" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Specifies whether to inhibit the delivery of messages published by its own connection."/>
         <uriParameter name="preserveMessageQos" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header."/>
         <uriParameter name="forceSendOriginalMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received."/>
         <uriParameter name="replyToType" type="string" javaType="org.apache.camel.component.jms.ReplyToType" kind="parameter" choice="Temporary,Shared,Exclusive" deprecated="false" label="producer" group="producer" description="Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary Shared or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details and especially the notes about the implications if running in a clustered environment and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive."/>
         <uriParameter name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="parameter" deprecated="false" group="common" description="The connection factory to be use. A connection factory must be configured either on the component or endpoint."/>
         <uriParameter name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well."/>
         <uriParameter name="useMessageIDAsCorrelationID" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages."/>
         <uriParameter name="transactionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="transaction,advanced" group="transaction (advanced)" description="The timeout value of the transaction (in seconds) if using transacted mode."/>
         <uriParameter name="durableSubscriptionName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well."/>
         <uriParameter name="replyToSameDestinationAllowed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to consume from. This prevents an endless loop by consuming and sending back the same message to itself."/>
         <uriParameter name="jmsMessageType" type="string" javaType="org.apache.camel.component.jms.JmsMessageType" kind="parameter" choice="Bytes,Map,Object,Stream,Text" deprecated="false" group="common" description="Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages. Possible values are: Bytes Map Object Stream Text. By default Camel would determine which JMS message type to use from the In body type. This option allows you to specify it."/>
         <uriParameter name="defaultTaskExecutorType" type="string" javaType="org.apache.camel.component.jms.DefaultTaskExecutorType" kind="parameter" choice="ThreadPool,SimpleAsync" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer for both consumer endpoints and the ReplyTo consumer of producer endpoints. Possible values: SimpleAsync (uses Spring&apos;s SimpleAsyncTaskExecutor) or ThreadPool (uses Spring&apos;s ThreadPoolTaskExecutor with optimal values - cached threadpool-like). If not set it defaults to the previous behaviour which uses a cached thread pool for consumer endpoints and SimpleAsync for reply consumers. The use of ThreadPool is recommended to reduce thread trash in elastic configurations with dynamically increasing and decreasing concurrent consumers."/>
         <uriParameter name="cacheLevelName" type="string" javaType="java.lang.String" kind="parameter" choice="CACHE_AUTO,CACHE_CONNECTION,CACHE_CONSUMER,CACHE_NONE,CACHE_SESSION" deprecated="false" defaultValue="CACHE_AUTO" label="consumer" group="consumer" description="Sets the cache level by name for the underlying JMS resources. Possible values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION. The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information."/>
         <uriParameter name="transferFault" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on MessageisFault() will be send back in the response as a JMS header with the key JmsConstantsJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws."/>
         <uriParameter name="idleTaskExecutionLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="advanced" group="advanced" description="Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
      </uriParameters>
   </component>
   <component>
      <id>facebook</id>
      <tags>
         <tag>social</tag>
      </tags>
      <title>Facebook</title>
      <description>The Facebook component provides access to all of the Facebook APIs accessible using Facebook4J.</description>
      <syntax>facebook:methodName</syntax>
      <class>org.apache.camel.component.facebook.FacebookComponent</class>
      <kind>component</kind>
      <scheme>facebook</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-facebook-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.facebook.config.FacebookConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="httpMaxTotalConnections" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="20" group="common" description="HTTP maximum total connections"/>
         <uriParameter name="tabId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The tab id"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="httpProxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="HTTP proxy server host name"/>
         <uriParameter name="placeId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The place ID"/>
         <uriParameter name="videoId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The video ID"/>
         <uriParameter name="oAuthAppId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The application Id"/>
         <uriParameter name="permissions" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Test user permissions in the format perm1perm2..."/>
         <uriParameter name="scoreValue" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="The numeric score with value"/>
         <uriParameter name="clientURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Facebook4J API client URL"/>
         <uriParameter name="postUpdate" type="object" javaType="facebook4j.PostUpdate" kind="parameter" deprecated="false" group="common" description="The post to create or update"/>
         <uriParameter name="oAuthAuthorizationURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://www.facebook.com/dialog/oauth" label="security" group="security" description="OAuth authorization URL"/>
         <uriParameter name="testUserId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The ID of the test user"/>
         <uriParameter name="httpRetryIntervalSeconds" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="5" group="common" description="HTTP retry interval in seconds"/>
         <uriParameter name="oAuthAppSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The application Secret"/>
         <uriParameter name="pictureId2" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="The picture2 id"/>
         <uriParameter name="useSSL" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Use SSL"/>
         <uriParameter name="albumUpdate" type="object" javaType="facebook4j.AlbumUpdate" kind="parameter" deprecated="false" group="common" description="The facebook Album to be created or updated"/>
         <uriParameter name="size" type="string" javaType="facebook4j.PictureSize" kind="parameter" choice="square,small,normal,large" deprecated="false" group="common" description="The picture size one of large normal small or square"/>
         <uriParameter name="commentId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The comment ID"/>
         <uriParameter name="offerId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The offer id"/>
         <uriParameter name="pictureSize" type="string" javaType="facebook4j.PictureSize" kind="parameter" choice="square,small,normal,large" deprecated="false" group="common" description="The picture size"/>
         <uriParameter name="includeRead" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Enables notifications that the user has already read in addition to unread ones"/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="httpProxyUser" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="HTTP proxy server user name"/>
         <uriParameter name="jsonStoreEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If set to true raw JSON forms will be stored in DataObjectFactory"/>
         <uriParameter name="questionId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The question id"/>
         <uriParameter name="milestoneId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The milestone id"/>
         <uriParameter name="testUser2" type="object" javaType="facebook4j.TestUser" kind="parameter" deprecated="false" group="common" description="Test user 2"/>
         <uriParameter name="testUser1" type="object" javaType="facebook4j.TestUser" kind="parameter" deprecated="false" group="common" description="Test user 1"/>
         <uriParameter name="pictureId" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="The picture id"/>
         <uriParameter name="tagUpdate" type="object" javaType="facebook4j.TagUpdate" kind="parameter" deprecated="false" group="common" description="Photo tag information"/>
         <uriParameter name="gzipEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Use Facebook GZIP encoding"/>
         <uriParameter name="photoId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The photo ID"/>
         <uriParameter name="httpStreamingReadTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="40000" group="common" description="HTTP streaming read timeout in milliseconds"/>
         <uriParameter name="achievementURL" type="string" javaType="java.net.URL" kind="parameter" deprecated="false" group="common" description="The unique URL of the achievement"/>
         <uriParameter name="queries" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="FQL queries"/>
         <uriParameter name="userId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The Facebook user ID"/>
         <uriParameter name="httpProxyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="HTTP proxy server password"/>
         <uriParameter name="friendId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The friend ID"/>
         <uriParameter name="metric" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The metric name"/>
         <uriParameter name="friendUserId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The friend user ID"/>
         <uriParameter name="httpReadTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="120000" group="common" description="Http read timeout in milliseconds"/>
         <uriParameter name="videoBaseURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://graph-video.facebook.com/" group="common" description="Video API base URL"/>
         <uriParameter name="httpDefaultMaxPerRoute" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="2" group="common" description="HTTP maximum connections per route"/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The note of the subject"/>
         <uriParameter name="groupId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The group ID"/>
         <uriParameter name="readingOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="To configure Reading using key/value pairs from the Map."/>
         <uriParameter name="prettyDebugEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Prettify JSON debug output if set to true"/>
         <uriParameter name="debugEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Enables deubg output. Effective only with the embedded logger"/>
         <uriParameter name="source" type="object" javaType="facebook4j.Media" kind="parameter" deprecated="false" group="common" description="The media content from either a java.io.File or java.io.Inputstream"/>
         <uriParameter name="clientVersion" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Facebook4J client API version"/>
         <uriParameter name="eventUpdate" type="object" javaType="facebook4j.EventUpdate" kind="parameter" deprecated="false" group="common" description="The event to be created or updated"/>
         <uriParameter name="userId1" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The ID of a user 1"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="oAuthPermissions" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Default OAuth permissions. Comma separated permission names. See https://developers.facebook.com/docs/reference/login/permissions for the detail"/>
         <uriParameter name="checkinUpdate" type="object" javaType="facebook4j.CheckinUpdate" kind="parameter" deprecated="true" group="common" description="The checkin to be created. Deprecated instead create a Post with an attached location"/>
         <uriParameter name="httpRetryCount" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Number of HTTP retries"/>
         <uriParameter name="restBaseURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://graph.facebook.com/" group="common" description="API base URL"/>
         <uriParameter name="userId2" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The ID of a user 2"/>
         <uriParameter name="appId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The ID of the Facebook Application"/>
         <uriParameter name="notificationId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The notification ID"/>
         <uriParameter name="eventId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The event ID"/>
         <uriParameter name="oAuthAccessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The user access token"/>
         <uriParameter name="userLocale" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The test user locale"/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="FQL query or search terms for search endpoints"/>
         <uriParameter name="messageId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The message ID"/>
         <uriParameter name="noteId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The note ID"/>
         <uriParameter name="postId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The post ID"/>
         <uriParameter name="pageId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The page id"/>
         <uriParameter name="oAuthAccessTokenURL" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://graph.facebook.com/oauth/access_token" label="security" group="security" description="OAuth access token URL"/>
         <uriParameter name="friendlistName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The friend list Name"/>
         <uriParameter name="domainId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The domain ID"/>
         <uriParameter name="domainName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The domain name"/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Test user name must be of the form &apos;first last&apos;"/>
         <uriParameter name="httpConnectionTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="20000" group="common" description="Http connection timeout in milliseconds"/>
         <uriParameter name="ids" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="The ids of users"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="permissionName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The permission name"/>
         <uriParameter name="distance" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="common" description="Distance in meters"/>
         <uriParameter name="mbeanEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If set to true Facebook4J mbean will be registerd"/>
         <uriParameter name="link" type="string" javaType="java.net.URL" kind="parameter" deprecated="false" group="common" description="Link URL"/>
         <uriParameter name="albumId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The album ID"/>
         <uriParameter name="description" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The description text"/>
         <uriParameter name="locale" type="object" javaType="java.util.Locale" kind="parameter" deprecated="false" group="common" description="Desired FQL locale"/>
         <uriParameter name="title" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The title text"/>
         <uriParameter name="toUserId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The ID of the user to tag"/>
         <uriParameter name="friendlistId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The friend list ID"/>
         <uriParameter name="userIds" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="The IDs of users to invite to event"/>
         <uriParameter name="commentUpdate" type="object" javaType="facebook4j.CommentUpdate" kind="parameter" deprecated="false" group="common" description="The facebook Comment to be created or updated"/>
         <uriParameter name="domainNames" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="The domain names"/>
         <uriParameter name="objectId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The insight object ID"/>
         <uriParameter name="checkinId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The checkin ID"/>
         <uriParameter name="toUserIds" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="The IDs of the users to tag"/>
         <uriParameter name="center" type="object" javaType="facebook4j.GeoLocation" kind="parameter" deprecated="false" group="common" description="Location latitude and longitude"/>
         <uriParameter name="optionDescription" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The question&apos;s answer option description"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="What operation to perform"/>
         <uriParameter name="reading" type="object" javaType="facebook4j.Reading" kind="parameter" deprecated="false" group="common" description="Optional reading parameters. See Reading Options(reading)"/>
         <uriParameter name="httpProxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="HTTP proxy server port"/>
         <uriParameter name="message" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The message text"/>
         <uriParameter name="isHidden" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether hidden"/>
         <uriParameter name="linkId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Link ID"/>
      </uriParameters>
   </component>
   <component>
      <id>spring-ldap</id>
      <tags>
         <tag>spring</tag>
         <tag>ldap</tag>
      </tags>
      <title>Spring LDAP</title>
      <description>The spring-ldap component allows you to perform searches in LDAP servers using filters as the message payload.</description>
      <syntax>spring-ldap:templateName</syntax>
      <class>org.apache.camel.component.springldap.SpringLdapComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>spring-ldap</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-ldap-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="templateName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of the Spring LDAP Template bean"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="scope" type="string" javaType="java.lang.String" kind="parameter" choice="object,onelevel,subtree" deprecated="false" defaultValue="subtree" group="producer" description="The scope of the search operation."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.springldap.LdapOperation" kind="parameter" choice="SEARCH,BIND,UNBIND" deprecated="false" required="true" group="producer" description="The LDAP operation to be performed."/>
      </uriParameters>
   </component>
   <component>
      <id>rabbitmq</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>RabbitMQ</title>
      <description>The rabbitmq component allows you produce and consume messages from RabbitMQ instances.</description>
      <syntax>rabbitmq:hostname:portNumber/exchangeName</syntax>
      <class>org.apache.camel.component.rabbitmq.RabbitMQComponent</class>
      <kind>component</kind>
      <scheme>rabbitmq</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rabbitmq-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="prefetchCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The maximum number of messages that the server will deliver 0 if unlimited. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time"/>
         <uriParameter name="publisherAcknowledgementsTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The amount of time in milliseconds to wait for a basic.ack response from RabbitMQ server"/>
         <uriParameter name="addresses" type="object" javaType="com.rabbitmq.client.Address[]" kind="parameter" deprecated="false" label="advanced" group="advanced" description="If this option is set camel-rabbitmq will try to create connection based on the setting of option addresses. The addresses value is a string which looks like server1:12345 server2:12345"/>
         <uriParameter name="declare" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If the option is true camel declare the exchange and queue name and bind them together. If the option is false camel won&apos;t declare the exchange and queue name on the server."/>
         <uriParameter name="requestTimeoutCheckerInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Set requestTimeoutCheckerInterval for inOut exchange"/>
         <uriParameter name="prefetchGlobal" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the settings should be applied to the entire channel rather than each consumer You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="queueArgsConfigurer" type="object" javaType="org.apache.camel.component.rabbitmq.ArgsConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the configurer for setting the queue args in Channel.queueDeclare"/>
         <uriParameter name="portNumber" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="5672" required="true" group="common" description="Port number for the host with the running rabbitmq instance or cluster. Default value is 5672."/>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The hostname of the running rabbitmq instance or cluster."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="guest" label="security" group="security" description="Password for authenticated access"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="exchangeArgsConfigurer" type="object" javaType="org.apache.camel.component.rabbitmq.ArgsConfigurer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the configurer for setting the exchange args in Channel.exchangeDeclare"/>
         <uriParameter name="deadLetterRoutingKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The routing key for the dead letter exchange"/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="When true and an inOut Exchange failed on the consumer side send the caused Exception back in the response"/>
         <uriParameter name="exclusive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Exclusive queues may only be accessed by the current connection and are deleted when that connection closes."/>
         <uriParameter name="trustManager" type="object" javaType="javax.net.ssl.TrustManager" kind="parameter" deprecated="false" label="security" group="security" description="Configure SSL trust manager SSL should be enabled for this option to be effective"/>
         <uriParameter name="networkRecoveryInterval" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Network recovery interval in milliseconds (interval used when recovering from network failure)"/>
         <uriParameter name="bridgeEndpoint" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If the bridgeEndpoint is true the producer will ignore the message header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY"/>
         <uriParameter name="autoAck" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If messages should be auto acknowledged"/>
         <uriParameter name="automaticRecoveryEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enables connection automatic recovery (uses connection implementation that performs automatic recovery when connection shutdown is not initiated by the application)"/>
         <uriParameter name="requestedChannelMax" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Connection requested channel max (max number of channels offered)"/>
         <uriParameter name="channelPoolMaxSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="producer" group="producer" description="Get maximum number of opened channel in pool"/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of concurrent consumers when consuming from broker. (eg similar as to the same option for the JMS component)."/>
         <uriParameter name="guaranteedDeliveries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="When true an exception will be thrown when the message cannot be delivered (basic.return) and the message is marked as mandatory. PublisherAcknowledgement will also be activated in this case See also publisher acknowledgements - When will messages be confirmed"/>
         <uriParameter name="vhost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="/" group="common" description="The vhost for the channel"/>
         <uriParameter name="threadPoolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="consumer,advanced" group="consumer (advanced)" description="The consumer uses a Thread Pool Executor with a fixed number of threads. This setting allows you to set that number of threads."/>
         <uriParameter name="deadLetterQueue" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The name of the dead letter queue"/>
         <uriParameter name="immediate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="This flag tells the server how to react if the message cannot be routed to a queue consumer immediately. If this flag is set the server will return an undeliverable message with a Return method. If this flag is zero the server will queue the message but with no guarantee that it will ever be consumed. If the header is present rabbitmq.IMMEDIATE it will override this option."/>
         <uriParameter name="sslProtocol" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Enables SSL on connection accepted value are true TLS and &apos;SSLv3"/>
         <uriParameter name="publisherAcknowledgements" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="When true the message will be published with publisher acknowledgements turned on"/>
         <uriParameter name="prefetchEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Enables the quality of service on the RabbitMQConsumer side. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="routingKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The routing key to use when binding a consumer queue to the exchange. For producer routing keys you set the header rabbitmq.ROUTING_KEY."/>
         <uriParameter name="skipQueueDeclare" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="If true the producer will not declare and bind a queue. This can be used for directing messages via an existing routing key."/>
         <uriParameter name="exchangeType" type="string" javaType="java.lang.String" kind="parameter" choice="direct,fanout,headers,topic" deprecated="false" defaultValue="direct" label="common" group="common" description="The exchange type such as direct or topic."/>
         <uriParameter name="mandatory" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="This flag tells the server how to react if the message cannot be routed to a queue. If this flag is set the server will return an unroutable message with a Return method. If this flag is zero the server silently drops the message. If the header is present rabbitmq.MANDATORY it will override this option."/>
         <uriParameter name="requestedFrameMax" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Connection requested frame max (max size of frame offered)"/>
         <uriParameter name="prefetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The maximum amount of content (measured in octets) that the server will deliver 0 if unlimited. You need to specify the option of prefetchSize prefetchCount prefetchGlobal at the same time"/>
         <uriParameter name="durable" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="If we are declaring a durable exchange (the exchange will survive a server restart)"/>
         <uriParameter name="channelPoolMaxWait" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="producer" group="producer" description="Set the maximum number of milliseconds to wait for a channel from the pool"/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60000" group="common" description="Connection timeout"/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="advanced" group="advanced" description="Set timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds)"/>
         <uriParameter name="skipExchangeDeclare" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="This can be used if we need to declare the queue but not the exchange"/>
         <uriParameter name="deadLetterExchange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The name of the dead letter exchange"/>
         <uriParameter name="clientProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Connection client properties (client info used in negotiating with the server)"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="skipQueueBind" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="If true the queue will not be bound to the exchange after declaring it"/>
         <uriParameter name="deadLetterExchangeType" type="string" javaType="java.lang.String" kind="parameter" choice="direct,fanout,headers,topic" deprecated="false" defaultValue="direct" label="common" group="common" description="The type of the dead letter exchange"/>
         <uriParameter name="connectionFactory" type="object" javaType="com.rabbitmq.client.ConnectionFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom RabbitMQ connection factory. When this option is set all connection options (connectionTimeout requestedChannelMax...) set on URI are not used"/>
         <uriParameter name="autoDelete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="If it is true the exchange will be deleted when it is no longer in use"/>
         <uriParameter name="requestedHeartbeat" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60" label="advanced" group="advanced" description="Connection requested heartbeat (heart-beat in seconds offered)"/>
         <uriParameter name="exchangeName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The exchange name determines which exchange produced messages will sent to. In the case of consumers the exchange name determines which exchange the queue will bind to."/>
         <uriParameter name="topologyRecoveryEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enables connection topology recovery (should topology recovery be performed)"/>
         <uriParameter name="queue" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The queue to receive messages from"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="guest" label="security" group="security" description="Username in case of authenticated access"/>
      </uriParameters>
   </component>
   <component>
      <id>lpr</id>
      <tags>
         <tag>printing</tag>
      </tags>
      <title>Printer</title>
      <description>The printer component is used for sending messages to printers as print jobs.</description>
      <syntax>lpr:hostname:port/printername</syntax>
      <class>org.apache.camel.component.printer.PrinterComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>lpr</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-printer-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="orientation" type="string" javaType="java.lang.String" kind="parameter" choice="portrait,landscape,reverse-portrait,reverse-landscape" deprecated="false" defaultValue="portrait" group="producer" description="Sets the page orientation."/>
         <uriParameter name="sendToPrinter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="etting this option to false prevents sending of the print data to the printer"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="mimeType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets mimeTypes supported by the javax.print.DocFlavor API"/>
         <uriParameter name="mediaTray" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets MediaTray supported by the javax.print.DocFlavor API for example uppermiddle etc."/>
         <uriParameter name="docFlavor" type="object" javaType="javax.print.DocFlavor" kind="parameter" deprecated="false" group="producer" description="Sets DocFlavor to use."/>
         <uriParameter name="printerPrefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the prefix name of the printer it is useful when the printer name does not start with //hostname/printer"/>
         <uriParameter name="flavor" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets DocFlavor to use."/>
         <uriParameter name="mediaSize" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="na-letter" group="producer" description="Sets the stationary as defined by enumeration names in the javax.print.attribute.standard.MediaSizeName API. The default setting is to use North American Letter sized stationary. The value&apos;s case is ignored e.g. values of iso_a4 and ISO_A4 may be used."/>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Hostname of the printer"/>
         <uriParameter name="copies" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" group="producer" description="Number of copies to print"/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="producer" description="Port number of the printer"/>
         <uriParameter name="sides" type="string" javaType="java.lang.String" kind="parameter" choice="one-sided,duplex,tumble,two-sided-short-edge,two-sided-long-edge" deprecated="false" defaultValue="one-sided" group="producer" description="Sets one sided or two sided printing based on the javax.print.attribute.standard.Sides API"/>
         <uriParameter name="printername" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="producer" description="Name of the printer"/>
      </uriParameters>
   </component>
   <component>
      <id>rest-api</id>
      <tags>
         <tag>core</tag>
         <tag>rest</tag>
      </tags>
      <title>REST API</title>
      <description>The rest-api component is used for providing Swagger API of the REST services which has been defined using the rest-dsl in Camel.</description>
      <syntax>rest-api:path/contextIdPattern</syntax>
      <class>org.apache.camel.component.rest.RestApiComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>rest-api</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The base path"/>
         <uriParameter name="apiComponentName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="The Camel Rest API component to use for generating the API of the REST services such as swagger."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="contextIdPattern" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="consumer" description="Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext&apos;s which name matches the pattern."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="componentName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found then that is being used."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>infinispan</id>
      <tags>
         <tag>cache</tag>
         <tag>datagrid</tag>
         <tag>clustering</tag>
      </tags>
      <title>Infinispan</title>
      <description>For reading/writing from/to Infinispan distributed key/value store and data grid.</description>
      <syntax>infinispan:host</syntax>
      <class>org.apache.camel.component.infinispan.InfinispanComponent</class>
      <kind>component</kind>
      <scheme>infinispan</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-infinispan-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="customListener" type="object" javaType="org.apache.camel.component.infinispan.InfinispanCustomListener" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Returns the custom listener in use if provided"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="flags" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A comma separated list of Flag to be applied by default on each cache invocation not applicable to remote caches."/>
         <uriParameter name="cacheContainer" type="object" javaType="org.infinispan.commons.api.BasicCacheContainer" kind="parameter" deprecated="false" group="common" description="Specifies the cache Container to connect"/>
         <uriParameter name="eventTypes" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Specifies the set of event types to register by the consumer. Multiple event can be separated by comma. The possible event types are: CACHE_ENTRY_ACTIVATED CACHE_ENTRY_PASSIVATED CACHE_ENTRY_VISITED CACHE_ENTRY_LOADED CACHE_ENTRY_EVICTED CACHE_ENTRY_CREATED CACHE_ENTRY_REMOVED CACHE_ENTRY_MODIFIED TRANSACTION_COMPLETED TRANSACTION_REGISTERED CACHE_ENTRY_INVALIDATED DATA_REHASHED TOPOLOGY_CHANGED PARTITION_STATUS_CHANGED"/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If true the consumer will receive notifications synchronously"/>
         <uriParameter name="command" type="string" javaType="java.lang.String" kind="parameter" choice="put,putAll,putIfAbsent,putAsync,putAllAsync,putIfAbsentAsync,get,containsKey,containsValue,remove,removeAsync,replace,replaceAsync,size,clear,clearAsync,query,stats" deprecated="false" defaultValue="put" label="producer" group="producer" description="The operation to perform."/>
         <uriParameter name="configurationUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="An implementation specific URI for the CacheManager"/>
         <uriParameter name="clusteredListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If true the listener will be installed for the entire cluster"/>
         <uriParameter name="cacheName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specifies the cache name"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Specifies the host of the cache on Infinispan instance"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="queryBuilder" type="object" javaType="org.apache.camel.component.infinispan.InfinispanQueryBuilder" kind="parameter" deprecated="false" group="common" description="Specifies the query builder."/>
      </uriParameters>
   </component>
   <component>
      <id>quickfix</id>
      <tags>
         <tag>engine</tag>
         <tag>messaging</tag>
      </tags>
      <title>QuickFix</title>
      <description>The quickfix component allows to send Financial Interchange (FIX) messages to the QuickFix engine.</description>
      <syntax>quickfix:configurationName</syntax>
      <class>org.apache.camel.component.quickfixj.QuickfixjComponent</class>
      <kind>component</kind>
      <scheme>quickfix</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-quickfix-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="lazyCreateEngines" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If set to true the engines will be created and started when needed (when first message is send)"/>
         <componentProperty name="messageFactory" type="object" javaType="quickfix.MessageFactory" kind="property" deprecated="false" description="To use the given MessageFactory"/>
         <componentProperty name="logFactory" type="object" javaType="quickfix.LogFactory" kind="property" deprecated="false" description="To use the given LogFactory"/>
         <componentProperty name="messageStoreFactory" type="object" javaType="quickfix.MessageStoreFactory" kind="property" deprecated="false" description="To use the given MessageStoreFactory"/>
         <componentProperty name="configurations" type="object" javaType="java.util.Map&lt;java.lang.String,org.apache.camel.component.quickfixj.QuickfixjConfiguration&gt;" kind="property" deprecated="false" description="To use the given map of pre configured QuickFix configurations mapped to the key"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="lazyCreateEngine" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="This option allows to create QuickFIX/J engine on demand. Value true means the engine is started when first message is send or there&apos;s consumer configured in route definition. When false value is used the engine is started at the endpoint creation. When this parameter is missing the value of component&apos;s property lazyCreateEngines is being used."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="configurationName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The configFile is the name of the QuickFIX/J configuration to use for the FIX engine (located as a resource found in your classpath)."/>
         <uriParameter name="sessionID" type="object" javaType="quickfix.SessionID" kind="parameter" deprecated="false" group="common" description="The optional sessionID identifies a specific FIX session. The format of the sessionID is: (BeginString):(SenderCompID)/(SenderSubID)/(SenderLocationID)-(TargetCompID)/(TargetSubID)/(TargetLocationID)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>imaps</id>
      <tags>
         <tag>mail</tag>
      </tags>
      <title>IMAPS</title>
      <description>To send or receive emails using imap/pop3 or stmp protocols.</description>
      <syntax>imaps:host:port</syntax>
      <class>org.apache.camel.component.mail.MailComponent</class>
      <kind>component</kind>
      <scheme>imaps</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="property" deprecated="false" description="Resolver to determine Content-Type for file attachments."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mail.MailConfiguration" kind="property" deprecated="false" description="Sets the Mail configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll."/>
         <uriParameter name="contentTypeResolver" type="object" javaType="org.apache.camel.component.mail.ContentTypeResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Resolver to determine Content-Type for file attachments."/>
         <uriParameter name="subject" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="binding" type="object" javaType="org.apache.camel.component.mail.MailBinding" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the binding used to convert from a Camel message to and from a Mail message"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="copyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="consumer" group="consumer" description="After processing a mail message it can be copied to a mail folder with the given name. You can override this configuration value with a header with the key copyTo allowing you to copy messages to folder names configured at runtime."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="searchTerm" type="object" javaType="javax.mail.search.SearchTerm" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="Refers to a javax.mail.search.SearchTerm which allows to filter mails based on search criteria such as subject body from sent after a certain date etc."/>
         <uriParameter name="alternativeBodyHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="CamelMailAlternativeBody" label="advanced" group="advanced" description="Specifies the key to an IN message header that contains an alternative email body. For example if you send emails in text/html format and want to provide an alternative mail body for non-HTML email clients set the alternative mail body with this key as a header."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The mail server host name"/>
         <uriParameter name="attachmentsContentTransferEncodingResolver" type="object" javaType="org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments."/>
         <uriParameter name="skipFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid downloading thousands of files when the server starts up. Set a value of 0 or negative to disable this option."/>
         <uriParameter name="from" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel@localhost" label="producer" group="producer" description="The from email address"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="contentType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="text/plain" label="advanced" group="advanced" description="The mail message content type. Use text/html for HTML mails."/>
         <uriParameter name="postProcessAction" type="object" javaType="org.apache.camel.component.mail.MailBoxPostProcessAction" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Refers to an MailBoxPostProcessAction for doing post processing tasks on the mailbox once the normal processing ended."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="sortTerm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer,sort" group="sort" description="Sorting order for messages. Only natively supported for IMAP. Emulated to some degree when using POP3 or when IMAP server does not have the SORT capability."/>
         <uriParameter name="idempotentRepositoryRemoveOnCommit" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,filter" group="filter" description="When using idempotent repository then when the mail message has been successfully processed and is committed should the message id be removed from the idempotent repository (default) or be kept in the repository. By default its assumed the message id is unique and has no value to be kept in the repository because the mail message will be marked as seen/moved or deleted to prevent it from being consumed again. And therefore having the message id stored in the idempotent repository has little value. However this option allows to store the message id for whatever reason you may have."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="60000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" group="common" description="The port number of the mail server"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="dummyTrustManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="To use a dummy security setting for trusting all certificates. Should only be used for development mode and not production."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="false" label="producer" group="producer" description="The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma."/>
         <uriParameter name="mailUidGenerator" type="object" javaType="org.apache.camel.component.mail.MailUidGenerator" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable MailUidGenerator that allows to use custom logic to generate UUID of the mail message."/>
         <uriParameter name="folderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="INBOX" label="consumer,advanced" group="consumer (advanced)" description="The folder to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="debugMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="bcc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the BCC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="session" type="object" javaType="javax.mail.Session" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource such as a JavaEE container. If this is not specified Camel automatically creates the mail session for you."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="mapMailMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether Camel should map the received mail message to Camel body/headers. If set to true the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class)."/>
         <uriParameter name="delete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not."/>
         <uriParameter name="handleFailedMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" required="false" label="consumer" group="consumer" description="If the mail consumer cannot retrieve a given mail message then this option allows to handle the caused exception by the consumer&apos;s error handler. By enable the bridge error handler on the consumer then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="closeFolder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well then the consumer keep the folder open between polls."/>
         <uriParameter name="additionalJavaMailProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets additional java mail properties that will append/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="connectionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="advanced" group="advanced" description="The connection timeout in milliseconds."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="cc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the CC email address. Separate multiple email addresses with comma."/>
         <uriParameter name="fetchSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" required="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case where Camel will not consume any messages at all."/>
         <uriParameter name="javaMailSender" type="object" javaType="org.apache.camel.component.mail.JavaMailSender" kind="parameter" deprecated="false" required="false" label="producer,advanced" group="producer (advanced)" description="To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails."/>
         <uriParameter name="useInlineAttachments" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to use disposition inline or attachment."/>
         <uriParameter name="idempotentRepository" type="object" javaType="org.apache.camel.spi.IdempotentRepository&lt;java.lang.String&gt;" kind="parameter" deprecated="false" label="consumer,filter" group="filter" description="A pluggable repository org.apache.camel.spi.IdempotentRepository which allows to cluster consuming from the same mailbox and let the repository coordinate whether a mail message is valid for the consumer to process. By default no repository is in use."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="ignoreUnsupportedCharset" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="ignoreUriScheme" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead."/>
         <uriParameter name="peek" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server which allows us to rollback the mail message if there is an error processing in Camel."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="to" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Sets the To email address. Separate multiple email addresses with comma."/>
         <uriParameter name="unseen" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" required="false" label="consumer" group="consumer" description="Whether to limit by unseen mails only."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The username for login"/>
      </uriParameters>
   </component>
   <component>
      <id>atom</id>
      <tags>
         <tag>rss</tag>
      </tags>
      <title>Atom</title>
      <description>The atom component is used for consuming Atom RSS feeds.</description>
      <syntax>atom:feedUri</syntax>
      <class>org.apache.camel.component.atom.AtomComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>atom</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-atom-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the password to be used for basic authentication when polling from a HTTP feed"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="throttleEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether all entries identified in a single feed poll should be delivered immediately. If true only one entry is processed per consumer.delay. Only applicable when splitEntries = true."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="splitEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether or not entries should be sent individually or whether the entire feed should be sent as a single message"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sortEntries" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Sets whether to sort entries by published date. Only works when splitEntries = true."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="feedHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether to add the feed object as a header"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="filter" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="consumer" description="Sets whether to use filtering or not of the entries."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="lastUpdate" type="string" javaType="java.util.Date" kind="parameter" deprecated="false" group="consumer" description="Sets the timestamp to be used for filtering entries from the atom feeds. This options is only in conjunction with the splitEntries."/>
         <uriParameter name="feedUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The URI to the feed to poll."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="Sets the username to be used for basic authentication when polling from a HTTP feed"/>
      </uriParameters>
   </component>
   <component>
      <id>etcd</id>
      <tags>
         <tag>etcd</tag>
      </tags>
      <title>etcd</title>
      <description>The camel etcd component allows you to work with Etcd a distributed A distributed reliable key-value store.</description>
      <syntax>etcd:namespace/path</syntax>
      <class>org.apache.camel.component.etcd.EtcdComponent</class>
      <kind>component</kind>
      <scheme>etcd</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-etcd-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="sendEmptyExchangeOnTimeout" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="To send an empty message in case of timeout watching for a key."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The user name to use for basic authentication."/>
         <uriParameter name="recursive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="To apply an action recursively."/>
         <uriParameter name="timeout" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="common" description="To set the maximum time an action could take to complete."/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="false" group="common" description="The path the enpoint refers to"/>
         <uriParameter name="uris" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="http://localhost:2379,http://localhost:4001" group="common" description="To set the URIs the client connects."/>
         <uriParameter name="timeToLive" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="producer" group="producer" description="To set the lifespan of a key in milliseconds."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password to use for basic authentication."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="servicePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="/services/" group="common" description="The path to look for for service discovery"/>
         <uriParameter name="namespace" type="string" javaType="org.apache.camel.component.etcd.EtcdNamespace" kind="path" choice="keys,stats,watch" deprecated="false" required="true" group="common" description="The API namespace to use"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="fromIndex" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" defaultValue="0" label="consumer,advanced" group="consumer (advanced)" description="The index to watch from"/>
      </uriParameters>
   </component>
   <component>
      <id>google-mail</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>mail</tag>
      </tags>
      <title>Google Mail</title>
      <description>The google-mail component provides access to Google Mail.</description>
      <syntax>google-mail:apiName/methodName</syntax>
      <class>org.apache.camel.component.google.mail.GoogleMailComponent</class>
      <kind>component</kind>
      <scheme>google-mail</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-google-mail-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.google.mail.GoogleMailConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
         <componentProperty name="clientFactory" type="object" javaType="org.apache.camel.component.google.mail.GoogleMailClientFactory" kind="property" deprecated="false" description="To use the GoogleCalendarClientFactory as factory for creating the client. Will by default use BatchGoogleMailClientFactory"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.google.mail.internal.GoogleMailApiName" kind="path" choice="THREADS,MESSAGES,ATTACHMENTS,LABELS,HISTORY,DRAFTS,USERS" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client ID of the mail application"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" choice="attachments,create,delete,get,getProfile,gmailImport,insert,list,modify,patch,send,trash,untrash,update" deprecated="false" required="true" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 access token. This typically expires after an hour so refreshToken is recommended for long term usage."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="clientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client secret of the mail application"/>
         <uriParameter name="scopes" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="Specifies the level of permissions you want a mail application to have to a user account. See https://developers.google.com/gmail/api/auth/scopes for more info."/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="applicationName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Google mail application name. Example would be camel-google-mail/1.0"/>
         <uriParameter name="refreshToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 refresh token. Using this the Google Calendar component can obtain a new accessToken whenever the current one expires - a necessity if the application is long-lived."/>
      </uriParameters>
   </component>
   <component>
      <id>direct-vm</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>Direct VM</title>
      <description>The direct-vm component provides direct synchronous call to another endpoint from any CamelContext in the same JVM.</description>
      <syntax>direct-vm:name</syntax>
      <class>org.apache.camel.component.directvm.DirectVmComponent</class>
      <kind>component</kind>
      <scheme>direct-vm</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="Sets a HeaderFilterStrategy that will only be applied on producer endpoints (on both directions: request and response). Default value: none."/>
         <componentProperty name="block" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active."/>
         <componentProperty name="propagateProperties" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="true" required="false" description="Whether to propagate or not properties from the producer side to the consumer side and viceversa. Default value: true."/>
         <componentProperty name="timeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="30000" required="false" description="The timeout value to use if block is enabled."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets a HeaderFilterStrategy that will only be applied on producer endpoints (on both directions: request and response). Default value: none."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of direct-vm endpoint"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="failIfNoConsumers" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether the producer should fail by throwing an exception when sending to a Direct-VM endpoint with no active consumers."/>
         <uriParameter name="block" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If sending a message to a direct endpoint which has no active consumer then we can tell the producer to block and wait for the consumer to become active."/>
         <uriParameter name="propagateProperties" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to propagate or not properties from the producer side to the consumer side and viceversa. Default value: true."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="The timeout value to use if block is enabled."/>
      </uriParameters>
   </component>
   <component>
      <id>dozer</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Dozer</title>
      <description>The dozer component provides the ability to map between Java beans using the Dozer mapping library.</description>
      <syntax>dozer:name</syntax>
      <class>org.apache.camel.component.dozer.DozerComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>dozer</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-dozer-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="mappingFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="dozerBeanMapping.xml" group="producer" description="The location of a Dozer configuration file. The file is loaded from the classpath by default but you can use file: classpath: or http: to load the configuration from a specific location."/>
         <uriParameter name="unmarshalId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The id of a dataFormat defined within the Camel Context to use for unmarshalling the mapping input from a non-Java type."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="targetModel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="producer" description="Fully-qualified class name for the target type used in the mapping."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="A human readable name of the mapping."/>
         <uriParameter name="marshalId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The id of a dataFormat defined within the Camel Context to use for marshalling the mapping output to a non-Java type."/>
         <uriParameter name="sourceModel" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Fully-qualified class name for the source type used in the mapping. If specified the input to the mapping is converted to the specified type before being mapped with Dozer."/>
         <uriParameter name="mappingConfiguration" type="object" javaType="org.apache.camel.converter.dozer.DozerBeanMapperConfiguration" kind="parameter" deprecated="false" group="producer" description="The name of a DozerBeanMapperConfiguration bean in the Camel registry which should be used for configuring the Dozer mapping. This is an alternative to the mappingFile option that can be used for fine-grained control over how Dozer is configured. Remember to use a prefix in the value to indicate that the bean is in the Camel registry (e.g. myDozerConfig)."/>
      </uriParameters>
   </component>
   <component>
      <id>xmpp</id>
      <tags>
         <tag>chat</tag>
         <tag>messaging</tag>
      </tags>
      <title>XMPP</title>
      <description>To send and receive messages from a XMPP (chat) server.</description>
      <syntax>xmpp:host:port/participant</syntax>
      <class>org.apache.camel.component.xmpp.XmppComponent</class>
      <kind>component</kind>
      <scheme>xmpp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xmpp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="resource" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="Camel" label="common,advanced" group="common (advanced)" description="XMPP resource. The default is Camel."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="createAccount" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common,advanced" group="common (advanced)" description="If true an attempt to create an account will be made. Default is false."/>
         <uriParameter name="login" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="Whether to login the user."/>
         <uriParameter name="serviceName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The name of the service you are connecting to. For Google Talk this would be gmail.com."/>
         <uriParameter name="participant" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="common" group="common" description="JID (Jabber ID) of person to receive messages. room parameter has precedence over participant."/>
         <uriParameter name="room" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="If this option is specified the component will connect to MUC (Multi User Chat). Usually the domain name for MUC is different from the login domain. For example if you are supermanjabber.org and want to join the krypton room then the room URL is kryptonconference.jabber.org. Note the conference part. It is not a requirement to provide the full room JID. If the room parameter does not contain the symbol the domain part will be discovered and added by Camel"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password for login"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Port number for the chat server"/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="filter" group="filter" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="Specifies whether to test the connection on startup. This is used to ensure that the XMPP client has a valid connection to the XMPP server when the route starts. Camel throws an exception on startup if a connection cannot be established. When this option is set to false Camel will attempt to establish a lazy connection when needed by a producer and will poll for a consumer connection until the connection is established. Default is true."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname for the chat server"/>
         <uriParameter name="nickname" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Use nickname when joining room. If room is specified and nickname is not user will be used for the nickname."/>
         <uriParameter name="doc" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Set a doc header on the IN message containing a Document form of the incoming packet; default is true if presence or pubsub are true otherwise false"/>
         <uriParameter name="connectionConfig" type="object" javaType="org.jivesoftware.smack.ConnectionConfiguration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use an existing connection configuration"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="user" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="User name (without server name). If not specified anonymous login will be attempted."/>
         <uriParameter name="pubsub" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Accept pubsub packets on input default is false"/>
         <uriParameter name="connectionPollDelay" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="consumer" group="consumer" description="The amount of time in seconds between polls (in seconds) to verify the health of the XMPP connection or between attempts to establish an initial consumer connection. Camel will try to re-establish a connection if it has become inactive. Default is 10 seconds."/>
      </uriParameters>
   </component>
   <component>
      <id>rmi</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>RMI</title>
      <description>The rmi component is for invoking Java RMI beans from Camel.</description>
      <syntax>rmi:hostname:port/name</syntax>
      <class>org.apache.camel.component.rmi.RmiComponent</class>
      <kind>component</kind>
      <scheme>rmi</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rmi-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="localhost" group="common" description="Hostname of RMI server"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="method" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="You can set the name of the method to invoke."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="1099" group="common" description="Port number of RMI server"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="remoteInterfaces" type="array" javaType="java.util.List&lt;java.lang.Class&lt;?&gt;&gt;" kind="parameter" deprecated="false" group="common" description="To specific the remote interfaces."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name to use when binding to RMI server"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>salesforce</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>crm</tag>
      </tags>
      <title>Salesforce</title>
      <description>The salesforce component is used for integrating Camel with the massive Salesforce API.</description>
      <syntax>salesforce:operationName:topicName</syntax>
      <class>org.apache.camel.component.salesforce.SalesforceComponent</class>
      <kind>component</kind>
      <scheme>salesforce</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-salesforce-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="loginConfig" type="object" javaType="org.apache.camel.component.salesforce.SalesforceLoginConfig" kind="property" deprecated="false" description="To use the shared SalesforceLoginConfig as login configuration"/>
         <componentProperty name="isHttpProxySocks4" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Enable for Socks4 proxy false by default"/>
         <componentProperty name="httpProxyExcludedAddresses" type="object" javaType="java.util.Set&lt;java.lang.String&gt;" kind="property" deprecated="false" description="HTTP proxy excluded addresses"/>
         <componentProperty name="isHttpProxySecure" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Enable for TLS connections true by default"/>
         <componentProperty name="httpProxyIncludedAddresses" type="object" javaType="java.util.Set&lt;java.lang.String&gt;" kind="property" deprecated="false" description="HTTP proxy included addresses"/>
         <componentProperty name="httpProxyHost" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="To configure HTTP proxy host"/>
         <componentProperty name="httpProxyRealm" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="HTTP proxy authentication realm"/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="httpProxyPort" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="To configure HTTP proxy port"/>
         <componentProperty name="packages" type="array" javaType="java.lang.String[]" kind="property" deprecated="false" description="Package names to scan for DTO classes (multiple packages can be separated by comma)."/>
         <componentProperty name="httpProxyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="To configure HTTP proxy password"/>
         <componentProperty name="httpProxyUsername" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="To configure HTTP proxy username"/>
         <componentProperty name="httpProxyAuthUri" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="HTTP proxy authentication URI"/>
         <componentProperty name="httpProxyUseDigestAuth" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Use HTTP proxy Digest authentication false by default"/>
         <componentProperty name="config" type="object" javaType="org.apache.camel.component.salesforce.SalesforceEndpointConfig" kind="property" deprecated="false" description="To use the shared SalesforceLoginConfig as configuration"/>
         <componentProperty name="httpClientProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="property" deprecated="false" description="Used for configuring HTTP client properties as key/value pairs"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="initialReplayIdMap" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Long&gt;" kind="parameter" deprecated="false" group="common" description="Replay IDs to start from per channel name."/>
         <uriParameter name="notifyForOperations" type="string" javaType="org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum" kind="parameter" choice="ALL,CREATE,EXTENDED,UPDATE" deprecated="false" group="common" description="Notify for operations options are ALL CREATE EXTENDED UPDATE (API version 29.0)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sObjectQuery" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Salesforce SOQL query string"/>
         <uriParameter name="notifyForOperationCreate" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Notify for create operation defaults to false (API version = 29.0)"/>
         <uriParameter name="batchId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Bulk API Batch ID"/>
         <uriParameter name="notifyForOperationUndelete" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Notify for un-delete operation defaults to false (API version = 29.0)"/>
         <uriParameter name="sObjectClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Fully qualified SObject class name usually generated using camel-salesforce-maven-plugin"/>
         <uriParameter name="apexUrl" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="APEX method URL"/>
         <uriParameter name="apexMethod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="APEX method name"/>
         <uriParameter name="updateTopic" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to update an existing Push Topic when using the Streaming API defaults to false"/>
         <uriParameter name="apiVersion" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Salesforce API version defaults to SalesforceEndpointConfig.DEFAULT_VERSION"/>
         <uriParameter name="instanceId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Salesforce1 Analytics report execution instance ID"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="notifyForFields" type="string" javaType="org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum" kind="parameter" choice="ALL,REFERENCED,SELECT,WHERE" deprecated="false" group="common" description="Notify for fields options are ALL REFERENCED SELECT WHERE"/>
         <uriParameter name="sObjectIdValue" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject external ID field value"/>
         <uriParameter name="reportMetadata" type="object" javaType="org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata" kind="parameter" deprecated="false" group="common" description="Salesforce1 Analytics report metadata for filtering"/>
         <uriParameter name="apexQueryParams" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="Query params for APEX method"/>
         <uriParameter name="contentType" type="string" javaType="org.apache.camel.component.salesforce.api.dto.bulk.ContentType" kind="parameter" choice="XML,CSV,ZIP_XML,ZIP_CSV" deprecated="false" group="common" description="Bulk API content type one of XML CSV ZIP_XML ZIP_CSV"/>
         <uriParameter name="includeDetails" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Include details in Salesforce1 Analytics report defaults to false."/>
         <uriParameter name="sObjectFields" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject fields to retrieve"/>
         <uriParameter name="sObjectName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject name if required or supported by API"/>
         <uriParameter name="httpClient" type="object" javaType="org.apache.camel.component.salesforce.SalesforceHttpClient" kind="parameter" deprecated="false" group="common" description="Custom Jetty Http Client to use to connect to Salesforce."/>
         <uriParameter name="sObjectBlobFieldName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject blob field name"/>
         <uriParameter name="backoffIncrement" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Backoff interval increment for Streaming connection restart attempts for failures beyond CometD auto-reconnect."/>
         <uriParameter name="maxBackoff" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Maximum backoff interval for Streaming connection restart attempts for failures beyond CometD auto-reconnect."/>
         <uriParameter name="reportId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Salesforce1 Analytics report Id"/>
         <uriParameter name="resultId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Bulk API Result ID"/>
         <uriParameter name="format" type="string" javaType="org.apache.camel.component.salesforce.internal.PayloadFormat" kind="parameter" choice="JSON,XML" deprecated="false" group="common" description="Payload format to use for Salesforce API calls either JSON or XML defaults to JSON"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="operationName" type="string" javaType="org.apache.camel.component.salesforce.internal.OperationName" kind="path" choice="GET_VERSIONS,GET_RESOURCES,GET_GLOBAL_OBJECTS,GET_BASIC_INFO,GET_DESCRIPTION,GET_SOBJECT,CREATE_SOBJECT,UPDATE_SOBJECT,DELETE_SOBJECT,GET_SOBJECT_WITH_ID,UPSERT_SOBJECT,DELETE_SOBJECT_WITH_ID,GET_BLOB_FIELD,QUERY,QUERY_MORE,QUERY_ALL,SEARCH,APEX_CALL,CREATE_JOB,GET_JOB,CLOSE_JOB,ABORT_JOB,CREATE_BATCH,GET_BATCH,GET_ALL_BATCHES,GET_REQUEST,GET_RESULTS,CREATE_BATCH_QUERY,GET_QUERY_RESULT_IDS,GET_QUERY_RESULT,GET_RECENT_REPORTS,GET_REPORT_DESCRIPTION,EXECUTE_SYNCREPORT,EXECUTE_ASYNCREPORT,GET_REPORT_INSTANCES,GET_REPORT_RESULTS,COMPOSITE_TREE,COMPOSITE_BATCH" deprecated="false" group="common" description=""/>
         <uriParameter name="sObjectId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject ID if required by API"/>
         <uriParameter name="defaultReplayId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="common" description="Default replayId setting if no value is found in link initialReplayIdMap"/>
         <uriParameter name="jobId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Bulk API Job ID"/>
         <uriParameter name="objectMapper" type="object" javaType="com.fasterxml.jackson.databind.ObjectMapper" kind="parameter" deprecated="false" group="common" description="Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects."/>
         <uriParameter name="sObjectSearch" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Salesforce SOSL search string"/>
         <uriParameter name="notifyForOperationUpdate" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Notify for update operation defaults to false (API version = 29.0)"/>
         <uriParameter name="topicName" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description=""/>
         <uriParameter name="sObjectIdName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="SObject external ID field name"/>
         <uriParameter name="replayId" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The replayId value to use when subscribing"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="notifyForOperationDelete" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Notify for delete operation defaults to false (API version = 29.0)"/>
      </uriParameters>
   </component>
   <component>
      <id>jms</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>JMS</title>
      <description>The jms component allows messages to be sent to (or consumed from) a JMS Queue or Topic.</description>
      <syntax>jms:destinationType:destinationName</syntax>
      <class>org.apache.camel.component.jms.JmsComponent</class>
      <kind>component</kind>
      <scheme>jms</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jms-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="includeSentJMSMessageID" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination."/>
         <componentProperty name="asyncConsumer" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions)."/>
         <componentProperty name="mapJmsMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details."/>
         <componentProperty name="requestTimeoutCheckerInterval" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout."/>
         <componentProperty name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <componentProperty name="cacheLevel" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the cache level by ID for the underlying JMS resources. See cacheLevelName option for more details."/>
         <componentProperty name="errorHandlerLogStackTrace" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Allows to control whether stacktraces should be logged or not by the default errorHandler."/>
         <componentProperty name="eagerLoadingOfProperties" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties"/>
         <componentProperty name="timeToLive" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="When sending messages specifies the time-to-live of the message (in milliseconds)."/>
         <componentProperty name="password" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
         <componentProperty name="replyToMaxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <componentProperty name="deliveryMode" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="Specifies the delivery mode to be used. Possible values are Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2."/>
         <componentProperty name="transferException" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer."/>
         <componentProperty name="exceptionListener" type="object" javaType="javax.jms.ExceptionListener" kind="property" deprecated="false" description="Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."/>
         <componentProperty name="asyncStartListener" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry."/>
         <componentProperty name="transactionManager" type="object" javaType="org.springframework.transaction.PlatformTransactionManager" kind="property" deprecated="false" description="The Spring transaction manager to use."/>
         <componentProperty name="waitForProvisionCorrelationToBeUpdatedThreadSleepingTime" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Interval in millis to sleep each time while waiting for provisional correlation id to be updated."/>
         <componentProperty name="alwaysCopyMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)"/>
         <componentProperty name="replyToConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <componentProperty name="maxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <componentProperty name="taskExecutor" type="object" javaType="org.springframework.core.task.TaskExecutor" kind="property" deprecated="false" description="Allows you to specify a custom task executor for consuming messages."/>
         <componentProperty name="deliveryPersistent" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether persistent delivery is used by default."/>
         <componentProperty name="priority" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect."/>
         <componentProperty name="concurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <componentProperty name="acceptMessagesWhileStopping" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option."/>
         <componentProperty name="acknowledgementMode" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The JMS acknowledgement mode defined as an Integer. Allows you to set vendor-specific extensions to the acknowledgment mode. For the regular modes it is preferable to use the acknowledgementModeName instead."/>
         <componentProperty name="jmsOperations" type="object" javaType="org.springframework.jms.core.JmsOperations" kind="property" deprecated="false" description="Allows you to use your own implementation of the org.springframework.jms.core.JmsOperations interface. Camel uses JmsTemplate as default. Can be used for testing purpose but not used much as stated in the spring API docs."/>
         <componentProperty name="acknowledgementModeName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE"/>
         <componentProperty name="exposeListenerSession" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the listener session should be exposed when consuming messages."/>
         <componentProperty name="receiveTimeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="The timeout for receiving messages (in milliseconds)."/>
         <componentProperty name="applicationContext" type="object" javaType="org.springframework.context.ApplicationContext" kind="property" deprecated="false" description="Sets the Spring ApplicationContext to use"/>
         <componentProperty name="subscriptionDurable" type="boolean" javaType="boolean" kind="property" deprecated="true" defaultValue="false" description="Deprecated: Enabled by default if you specify a durableSubscriptionName and a clientId."/>
         <componentProperty name="destinationResolver" type="object" javaType="org.springframework.jms.support.destination.DestinationResolver" kind="property" deprecated="false" description="A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example to lookup the real destination in a JNDI registry)."/>
         <componentProperty name="errorHandlerLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="property" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" description="Allows to configure the default errorHandler logging level for logging uncaught exceptions."/>
         <componentProperty name="errorHandler" type="object" javaType="org.springframework.util.ErrorHandler" kind="property" deprecated="false" description="Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler."/>
         <componentProperty name="allowReplyManagerQuickStop" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfigurationisAcceptMessagesWhileStopping is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag."/>
         <componentProperty name="idleConsumerLimit" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specify the limit for the number of consumers that are allowed to be idle at any given time."/>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.jms.JmsConfiguration" kind="property" deprecated="false" description="To use a shared JMS configuration"/>
         <componentProperty name="explicitQosEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers."/>
         <componentProperty name="messageConverter" type="object" javaType="org.springframework.jms.support.converter.MessageConverter" kind="property" deprecated="false" description="To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message."/>
         <componentProperty name="maxMessagesPerTask" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required."/>
         <componentProperty name="transacted" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to use transacted mode"/>
         <componentProperty name="transactionName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The name of the transaction to use."/>
         <componentProperty name="autoStartup" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether the consumer container should auto-startup."/>
         <componentProperty name="messageTimestampEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether timestamps should be enabled by default on sending messages."/>
         <componentProperty name="replyOnTimeoutToMaxConcurrentConsumers" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS."/>
         <componentProperty name="jmsKeyFormatStrategy" type="object" javaType="org.apache.camel.component.jms.JmsKeyFormatStrategy" kind="property" deprecated="false" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <componentProperty name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="property" deprecated="false" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <componentProperty name="lazyCreateTransactionManager" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true."/>
         <componentProperty name="waitForProvisionCorrelationToBeUpdatedCounter" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled."/>
         <componentProperty name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.jms.MessageCreatedStrategy" kind="property" deprecated="false" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <componentProperty name="asyncStopListener" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to stop the JmsConsumer message listener asynchronously when stopping a route."/>
         <componentProperty name="transferExchange" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body Out body Fault body In headers Out headers Fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side so Camel knows the payloads is an Exchange and not a regular payload."/>
         <componentProperty name="requestTimeout" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option."/>
         <componentProperty name="allowNullBody" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
         <componentProperty name="clientId" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead."/>
         <componentProperty name="recoveryInterval" type="integer" javaType="long" kind="property" deprecated="false" defaultValue="0" description="Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds."/>
         <componentProperty name="replyToCacheLevelName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION."/>
         <componentProperty name="messageIdEnabled" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="When sending specifies whether message IDs should be added."/>
         <componentProperty name="pubSubNoLocal" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to inhibit the delivery of messages published by its own connection."/>
         <componentProperty name="queueBrowseStrategy" type="object" javaType="org.apache.camel.component.jms.QueueBrowseStrategy" kind="property" deprecated="false" description="To use a custom QueueBrowseStrategy when browsing queues"/>
         <componentProperty name="forceSendOriginalMessage" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received."/>
         <componentProperty name="preserveMessageQos" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header."/>
         <componentProperty name="replyToType" type="string" javaType="org.apache.camel.component.jms.ReplyToType" kind="property" choice="Temporary,Shared,Exclusive" deprecated="false" description="Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary Shared or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details and especially the notes about the implications if running in a clustered environment and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive."/>
         <componentProperty name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="property" deprecated="false" description="Sets the default connection factory to be use"/>
         <componentProperty name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well."/>
         <componentProperty name="useMessageIDAsCorrelationID" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages."/>
         <componentProperty name="transactionTimeout" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="The timeout value of the transaction (in seconds) if using transacted mode."/>
         <componentProperty name="durableSubscriptionName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well."/>
         <componentProperty name="defaultTaskExecutorType" type="string" javaType="org.apache.camel.component.jms.DefaultTaskExecutorType" kind="property" choice="ThreadPool,SimpleAsync" deprecated="false" description="Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer for both consumer endpoints and the ReplyTo consumer of producer endpoints. Possible values: SimpleAsync (uses Spring's SimpleAsyncTaskExecutor) or ThreadPool (uses Spring's ThreadPoolTaskExecutor with optimal values - cached threadpool-like). If not set it defaults to the previous behaviour which uses a cached thread pool for consumer endpoints and SimpleAsync for reply consumers. The use of ThreadPool is recommended to reduce thread trash in elastic configurations with dynamically increasing and decreasing concurrent consumers."/>
         <componentProperty name="cacheLevelName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the cache level by name for the underlying JMS resources. Possible values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION. The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information."/>
         <componentProperty name="transferFault" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on link org.apache.camel.MessageisFault() will be send back in the response as a JMS header with the key link JmsConstantsJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws."/>
         <componentProperty name="idleTaskExecutionLimit" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring."/>
         <componentProperty name="username" type="string" javaType="java.lang.String" kind="property" deprecated="false" required="false" description="Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="includeSentJMSMessageID" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination."/>
         <uriParameter name="asyncConsumer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions)."/>
         <uriParameter name="mapJmsMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc."/>
         <uriParameter name="messageListenerContainerFactory" type="object" javaType="org.apache.camel.component.jms.MessageListenerContainerFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Registry ID of the MessageListenerContainerFactory used to determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages. Setting this will automatically set consumerType to Custom."/>
         <uriParameter name="requestTimeoutCheckerInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="advanced" group="advanced" description="Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="includeAllJMSXProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."/>
         <uriParameter name="errorHandlerLogStackTrace" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Allows to control whether stacktraces should be logged or not by the default errorHandler."/>
         <uriParameter name="eagerLoadingOfProperties" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties"/>
         <uriParameter name="timeToLive" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="When sending messages specifies the time-to-live of the message (in milliseconds)."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="replyToMaxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <uriParameter name="deliveryMode" type="string" javaType="java.lang.Integer" kind="parameter" choice="1,2" deprecated="false" label="producer" group="producer" description="Specifies the delivery mode to be used. Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2."/>
         <uriParameter name="transferException" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer."/>
         <uriParameter name="exceptionListener" type="object" javaType="javax.jms.ExceptionListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."/>
         <uriParameter name="destinationType" type="string" javaType="java.lang.String" kind="path" choice="queue,topic,temp:queue,temp:topic" deprecated="false" defaultValue="queue" group="common" description="The kind of destination to use"/>
         <uriParameter name="asyncStartListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry."/>
         <uriParameter name="waitForProvisionCorrelationToBeUpdatedThreadSleepingTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="100" label="advanced" group="advanced" description="Interval in millis to sleep each time while waiting for provisional correlation id to be updated."/>
         <uriParameter name="transactionManager" type="object" javaType="org.springframework.transaction.PlatformTransactionManager" kind="parameter" deprecated="false" label="transaction,advanced" group="transaction (advanced)" description="The Spring transaction manager to use."/>
         <uriParameter name="alwaysCopyMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)"/>
         <uriParameter name="replyToConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="producer" group="producer" description="Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."/>
         <uriParameter name="replyToDestinationSelectorName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets the JMS Selector using the fixed name to be used so you can filter out your own replies from the others when using a shared queue (that is if you are not using a temporary reply queue)."/>
         <uriParameter name="maxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <uriParameter name="disableTimeToLive" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="Use this option to force disabling time to live. For example when you do request/reply over JMS then Camel will by default use the requestTimeout value as time to live on the message being sent. The problem is that the sender and receiver systems have to have their clocks synchronized so they are in sync. This is not always so easy to archive. So you can use disableTimeToLive=true to not set a time to live value on the sent message. Then the message will not expire on the receiver system. See below in section About time to live for more details."/>
         <uriParameter name="deliveryPersistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Specifies whether persistent delivery is used by default."/>
         <uriParameter name="priority" type="string" javaType="int" kind="parameter" choice="1,2,3,4,5,6,7,8,9" deprecated="false" defaultValue="4" label="producer" group="producer" description="Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener."/>
         <uriParameter name="acceptMessagesWhileStopping" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option."/>
         <uriParameter name="consumerType" type="string" javaType="org.apache.camel.component.jms.ConsumerType" kind="parameter" choice="Simple,Default,Custom" deprecated="false" defaultValue="Default" label="consumer,advanced" group="consumer (advanced)" description="The consumer type to use which can be one of: Simple Default or Custom. The consumer type determines which Spring JMS listener to use. Default will use org.springframework.jms.listener.DefaultMessageListenerContainer Simple will use org.springframework.jms.listener.SimpleMessageListenerContainer. When Custom is specified the MessageListenerContainerFactory defined by the messageListenerContainerFactory option will determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use."/>
         <uriParameter name="acknowledgementModeName" type="string" javaType="java.lang.String" kind="parameter" choice="SESSION_TRANSACTED,CLIENT_ACKNOWLEDGE,AUTO_ACKNOWLEDGE,DUPS_OK_ACKNOWLEDGE" deprecated="false" defaultValue="AUTO_ACKNOWLEDGE" label="consumer" group="consumer" description="The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE"/>
         <uriParameter name="exposeListenerSession" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies whether the listener session should be exposed when consuming messages."/>
         <uriParameter name="receiveTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="advanced" group="advanced" description="The timeout for receiving messages (in milliseconds)."/>
         <uriParameter name="destinationResolver" type="object" javaType="org.springframework.jms.support.destination.DestinationResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example to lookup the real destination in a JNDI registry)."/>
         <uriParameter name="replyTo" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Provides an explicit ReplyTo destination which overrides any incoming value of Message.getJMSReplyTo()."/>
         <uriParameter name="replyToOverride" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Provides an explicit ReplyTo destination in the JMS message which overrides the setting of replyTo. It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination."/>
         <uriParameter name="errorHandlerLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="advanced" group="advanced" description="Allows to configure the default errorHandler logging level for logging uncaught exceptions."/>
         <uriParameter name="errorHandler" type="object" javaType="org.springframework.util.ErrorHandler" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="allowReplyManagerQuickStop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case link JmsConfigurationisAcceptMessagesWhileStopping() is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag."/>
         <uriParameter name="idleConsumerLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="advanced" group="advanced" description="Specify the limit for the number of consumers that are allowed to be idle at any given time."/>
         <uriParameter name="replyToOnTimeoutMaxConcurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="producer" group="producer" description="Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS."/>
         <uriParameter name="explicitQosEnabled" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring&apos;s JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers."/>
         <uriParameter name="messageConverter" type="object" javaType="org.springframework.jms.support.converter.MessageConverter" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message."/>
         <uriParameter name="maxMessagesPerTask" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="advanced" group="advanced" description="The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="transaction" group="transaction" description="Specifies whether to use transacted mode"/>
         <uriParameter name="transactionName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="transaction,advanced" group="transaction (advanced)" description="The name of the transaction to use."/>
         <uriParameter name="autoStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Specifies whether the consumer container should auto-startup."/>
         <uriParameter name="messageTimestampEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS Broker. If the JMS provider accepts this hint these messages must have the timestamp set to zero; if the provider ignores the hint the timestamp must be set to its normal value"/>
         <uriParameter name="jmsKeyFormatStrategy" type="string" javaType="java.lang.String" kind="parameter" choice="default,passthrough" deprecated="false" label="advanced" group="advanced" description="Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom HeaderFilterStrategy to filter header to and from Camel message."/>
         <uriParameter name="waitForProvisionCorrelationToBeUpdatedCounter" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="50" label="advanced" group="advanced" description="Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled."/>
         <uriParameter name="lazyCreateTransactionManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="transaction,advanced" group="transaction (advanced)" description="If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true."/>
         <uriParameter name="destinationName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the queue or topic to use as destination"/>
         <uriParameter name="messageCreatedStrategy" type="object" javaType="org.apache.camel.component.jms.MessageCreatedStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."/>
         <uriParameter name="asyncStopListener" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether to stop the JmsConsumer message listener asynchronously when stopping a route."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body Out body Fault body In headers Out headers Fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side so Camel knows the payloads is an Exchange and not a regular payload."/>
         <uriParameter name="selector" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Sets the JMS selector to use"/>
         <uriParameter name="requestTimeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="20000" label="producer" group="producer" description="The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option."/>
         <uriParameter name="allowNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown."/>
         <uriParameter name="replyToDeliveryPersistent" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Specifies whether to use persistent delivery by default for replies."/>
         <uriParameter name="disableReplyTo" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If true a producer will behave like a InOnly exchange with the exception that JMSReplyTo header is sent out and not be suppressed like in the case of InOnly. Like InOnly the producer will not wait for a reply. A consumer with this flag will behave like InOnly. This feature can be used to bridge InOut requests to another queue so that a route on the other queue will send its response directly back to the original JMSReplyTo."/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead."/>
         <uriParameter name="recoveryInterval" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="advanced" group="advanced" description="Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds."/>
         <uriParameter name="replyToCacheLevelName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer,advanced" group="producer (advanced)" description="Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION."/>
         <uriParameter name="messageIdEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="When sending specifies whether message IDs should be added. This is just an hint to the JMS Broker. If the JMS provider accepts this hint these messages must have the message ID set to null; if the provider ignores the hint the message ID must be set to its normal unique value"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="pubSubNoLocal" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Specifies whether to inhibit the delivery of messages published by its own connection."/>
         <uriParameter name="preserveMessageQos" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header."/>
         <uriParameter name="forceSendOriginalMessage" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received."/>
         <uriParameter name="replyToType" type="string" javaType="org.apache.camel.component.jms.ReplyToType" kind="parameter" choice="Temporary,Shared,Exclusive" deprecated="false" label="producer" group="producer" description="Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary Shared or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details and especially the notes about the implications if running in a clustered environment and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive."/>
         <uriParameter name="connectionFactory" type="object" javaType="javax.jms.ConnectionFactory" kind="parameter" deprecated="false" group="common" description="Sets the default connection factory to be used if a connection factory is not specified for either link setTemplateConnectionFactory(ConnectionFactory) or link setListenerConnectionFactory(ConnectionFactory)"/>
         <uriParameter name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well."/>
         <uriParameter name="useMessageIDAsCorrelationID" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages."/>
         <uriParameter name="transactionTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="transaction,advanced" group="transaction (advanced)" description="The timeout value of the transaction (in seconds) if using transacted mode."/>
         <uriParameter name="durableSubscriptionName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well."/>
         <uriParameter name="replyToSameDestinationAllowed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,advanced" group="consumer (advanced)" description="Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to consume from. This prevents an endless loop by consuming and sending back the same message to itself."/>
         <uriParameter name="jmsMessageType" type="string" javaType="org.apache.camel.component.jms.JmsMessageType" kind="parameter" choice="Bytes,Map,Object,Stream,Text" deprecated="false" group="common" description="Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages. Possible values are: Bytes Map Object Stream Text. By default Camel would determine which JMS message type to use from the In body type. This option allows you to specify it."/>
         <uriParameter name="defaultTaskExecutorType" type="string" javaType="org.apache.camel.component.jms.DefaultTaskExecutorType" kind="parameter" choice="ThreadPool,SimpleAsync" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer for both consumer endpoints and the ReplyTo consumer of producer endpoints. Possible values: SimpleAsync (uses Spring&apos;s SimpleAsyncTaskExecutor) or ThreadPool (uses Spring&apos;s ThreadPoolTaskExecutor with optimal values - cached threadpool-like). If not set it defaults to the previous behaviour which uses a cached thread pool for consumer endpoints and SimpleAsync for reply consumers. The use of ThreadPool is recommended to reduce thread trash in elastic configurations with dynamically increasing and decreasing concurrent consumers."/>
         <uriParameter name="cacheLevelName" type="string" javaType="java.lang.String" kind="parameter" choice="CACHE_AUTO,CACHE_CONNECTION,CACHE_CONSUMER,CACHE_NONE,CACHE_SESSION" deprecated="false" defaultValue="CACHE_AUTO" label="consumer" group="consumer" description="Sets the cache level by name for the underlying JMS resources. Possible values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION. The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information."/>
         <uriParameter name="transferFault" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on link org.apache.camel.MessageisFault() will be send back in the response as a JMS header with the key link JmsConstantsJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws."/>
         <uriParameter name="idleTaskExecutionLimit" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="advanced" group="advanced" description="Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."/>
      </uriParameters>
   </component>
   <component>
      <id>msv</id>
      <tags>
         <tag>validation</tag>
      </tags>
      <title>MSV</title>
      <description>Validates the payload of a message using the MSV Library.</description>
      <syntax>msv:resourceUri</syntax>
      <class>org.apache.camel.component.validator.msv.MsvComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>msv</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-msv-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="schemaFactory" type="object" javaType="javax.xml.validation.SchemaFactory" kind="property" deprecated="false" description="To use the javax.xml.validation.SchemaFactory."/>
         <componentProperty name="resourceResolverFactory" type="object" javaType="org.apache.camel.component.validator.ValidatorResourceResolverFactory" kind="property" deprecated="false" label="advanced" required="false" description="To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="useDom" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Whether DOMSource/DOMResult or SaxSource/SaxResult should be used by the validator."/>
         <uriParameter name="headerName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To validate against a header instead of the message body."/>
         <uriParameter name="resourceResolver" type="object" javaType="org.w3c.dom.ls.LSResourceResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom LSResourceResolver. Do not use together with resourceResolverFactory"/>
         <uriParameter name="schemaFactory" type="object" javaType="javax.xml.validation.SchemaFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom javax.xml.validation.SchemaFactory"/>
         <uriParameter name="failOnNullHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to fail if no header exists when validating against a header."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="useSharedSchema" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Whether the Schema instance should be shared or not. This option is introduced to work around a JDK 1.6.x bug. Xerces should not have this issue."/>
         <uriParameter name="failOnNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to fail if no body exists."/>
         <uriParameter name="errorHandler" type="object" javaType="org.apache.camel.processor.validation.ValidatorErrorHandler" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler. The default error handler captures the errors and throws an exception."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="URL to a local resource on the classpath or a reference to lookup a bean in the Registry or a full URL to a remote resource or resource on the file system which contains the XSD to validate against."/>
         <uriParameter name="schemaLanguage" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="http://www.w3.org/2001/XMLSchema" label="advanced" group="advanced" description="Configures the W3C XML Schema Namespace URI."/>
         <uriParameter name="resourceResolverFactory" type="object" javaType="org.apache.camel.component.validator.ValidatorResourceResolverFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI. The default resource resolver factory resturns a resource resolver which can read files from the class path and file system. Do not use together with resourceResolver."/>
      </uriParameters>
   </component>
   <component>
      <id>jmx</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>JMX</title>
      <description>The jmx component allows to receive JMX notifications.</description>
      <syntax>jmx:serverURL</syntax>
      <class>org.apache.camel.component.jmx.JMXComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>jmx</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jmx-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="initThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="counter" group="counter" description="URI Property: counter monitor only Initial threshold for the monitor. The value must exceed this before notifications are fired."/>
         <uriParameter name="notifyHigh" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="gauge" group="gauge" description="URI Property: gauge monitor only If true the gauge will fire a notification when the high threshold is exceeded"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="handback" type="object" javaType="java.lang.Object" kind="parameter" deprecated="false" label="advanced" group="advanced" description="URI Property: Value to handback to the listener when a notification is received. This value will be put in the message header with the key jmx.handback"/>
         <uriParameter name="reconnectOnConnectionFailure" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="URI Property: If true the consumer will attempt to reconnect to the JMX server when any connection failure occurs. The consumer will attempt to re-establish the JMX connection every &apos;x&apos; seconds until the connection is made-- where &apos;x&apos; is the configured reconnectionDelay"/>
         <uriParameter name="granularityPeriod" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="10000" group="consumer" description="URI Property: monitor types only The frequency to poll the bean to check the monitor."/>
         <uriParameter name="monitorType" type="string" javaType="java.lang.String" kind="parameter" choice="counter,gauge,string" deprecated="false" group="consumer" description="URI Property: monitor types only The type of monitor to create. One of string gauge counter."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="URI Property: credentials for making a remote connection"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="notifyLow" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="gauge" group="gauge" description="URI Property: gauge monitor only If true the gauge will fire a notification when the low threshold is exceeded"/>
         <uriParameter name="stringToCompare" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="string" group="string" description="URI Property: string monitor only Value for the string monitor&apos;s string to compare."/>
         <uriParameter name="serverURL" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="consumer" description="server url comes from the remaining endpoint"/>
         <uriParameter name="objectDomain" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="consumer" description="URI Property: The domain for the mbean you&apos;re connecting to"/>
         <uriParameter name="observedAttribute" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="URI Property: monitor types only The attribute to observe for the monitor bean."/>
         <uriParameter name="modulus" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="counter" group="counter" description="URI Property: counter monitor only The value at which the counter is reset to zero"/>
         <uriParameter name="differenceMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="counter,gauge" group="gauge" description="URI Property: counter gauge monitor only If true then the value reported in the notification is the difference from the threshold as opposed to the value itself."/>
         <uriParameter name="offset" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="counter" group="counter" description="URI Property: counter monitor only The amount to increment the threshold after it&apos;s been exceeded."/>
         <uriParameter name="notifyMatch" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="string" group="string" description="URI Property: string monitor only If true the string monitor will fire a notification when the string attribute matches the string to compare."/>
         <uriParameter name="format" type="string" javaType="java.lang.String" kind="parameter" choice="xml,raw" deprecated="false" defaultValue="xml" group="consumer" description="URI Property: Format for the message body. Either xml or raw. If xml the notification is serialized to xml. If raw then the raw java object is set as the body."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="objectProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="URI Property: properties for the object name. These values will be used if the objectName param is not set"/>
         <uriParameter name="reconnectDelay" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="10" label="advanced" group="advanced" description="URI Property: The number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection"/>
         <uriParameter name="testConnectionOnStartup" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="URI Property: If true the consumer will throw an exception if unable to establish the JMX connection upon startup. If false the consumer will attempt to establish the JMX connection every &apos;x&apos; seconds until the connection is made -- where &apos;x&apos; is the configured reconnectionDelay"/>
         <uriParameter name="objectName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="consumer" description="URI Property: The name key for the mbean you&apos;re connecting to. This value is mutually exclusive with the object properties that get passed."/>
         <uriParameter name="notificationFilter" type="object" javaType="javax.management.NotificationFilter" kind="parameter" deprecated="false" label="advanced" group="advanced" description="URI Property: Reference to a bean that implements the NotificationFilter."/>
         <uriParameter name="notifyDiffer" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="string" group="string" description="URI Property: string monitor only If true the string monitor will fire a notification when the string attribute differs from the string to compare."/>
         <uriParameter name="thresholdHigh" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" label="gauge" group="gauge" description="URI Property: gauge monitor only Value for the gauge&apos;s high threshold"/>
         <uriParameter name="thresholdLow" type="number" javaType="java.lang.Double" kind="parameter" deprecated="false" label="gauge" group="gauge" description="URI Property: gauge monitor only Value for the gauge&apos;s low threshold"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="user" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="URI Property: credentials for making a remote connection"/>
      </uriParameters>
   </component>
   <component>
      <id>aws-ddbstream</id>
      <tags>
         <tag>cloud</tag>
         <tag>messaging</tag>
         <tag>streams</tag>
      </tags>
      <title>AWS DynamoDB Streams</title>
      <description>The aws-ddbstream component is used for working with Amazon DynamoDB Streams.</description>
      <syntax>aws-ddbstream:tableName</syntax>
      <class>org.apache.camel.component.aws.ddbstream.DdbStreamComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>aws-ddbstream</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="iteratorType" type="string" javaType="com.amazonaws.services.dynamodbv2.model.ShardIteratorType" kind="parameter" choice="TRIM_HORIZON,LATEST,AT_SEQUENCE_NUMBER,AFTER_SEQUENCE_NUMBER" deprecated="false" defaultValue="LATEST" label="consumer" group="consumer" description="Defines where in the DynaboDB stream to start getting records. Note that using TRIM_HORIZON can cause a significant delay before the stream has caught up to real-time. if ATAFTER_SEQUENCE_NUMBER are used then a sequenceNumberProvider MUST be supplied."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="amazonDynamoDbStreamsClient" type="object" javaType="com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams" kind="parameter" deprecated="false" required="true" label="consumer" group="consumer" description="Amazon DynamoDB client to use for all requests for this endpoint"/>
         <uriParameter name="sequenceNumberProvider" type="object" javaType="org.apache.camel.component.aws.ddbstream.SequenceNumberProvider" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Provider for the sequence number when using one of the two ShardIteratorType.ATAFTER_SEQUENCE_NUMBER iterator types. Can be a registry reference or a literal sequence number."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="tableName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" label="consumer" group="consumer" description="Name of the dynamodb table"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxResultsPerRequest" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Maximum number of records that will be fetched in each poll"/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
      </uriParameters>
   </component>
   <component>
      <id>ldap</id>
      <tags>
         <tag>ldap</tag>
      </tags>
      <title>LDAP</title>
      <description>The ldap component allows you to perform searches in LDAP servers using filters as the message payload.</description>
      <syntax>ldap:dirContextName</syntax>
      <class>org.apache.camel.component.ldap.LdapComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>ldap</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ldap-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="returnedAttributes" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Comma-separated list of attributes that should be set in each entry of the result"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="scope" type="string" javaType="java.lang.String" kind="parameter" choice="object,onelevel,subtree" deprecated="false" defaultValue="subtree" group="producer" description="Specifies how deeply to search the tree of entries starting at the base DN."/>
         <uriParameter name="pageSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="When specified the ldap module uses paging to retrieve all results (most LDAP Servers throw an exception when trying to retrieve more than 1000 entries in one query). To be able to use this a LdapContext (subclass of DirContext) has to be passed in as ldapServerBean (otherwise an exception is thrown)"/>
         <uriParameter name="dirContextName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of javax.naming.directory.DirContext bean to lookup in the registry."/>
         <uriParameter name="base" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="ou=system" group="producer" description="The base DN for searches."/>
      </uriParameters>
   </component>
   <component>
      <id>websocket</id>
      <tags>
         <tag>websocket</tag>
      </tags>
      <title>Jetty Websocket</title>
      <description>The websocket component provides websocket endpoints for communicating with clients using websocket.</description>
      <syntax>websocket:host:port/resourceUri</syntax>
      <class>org.apache.camel.component.websocket.WebsocketComponent</class>
      <kind>component</kind>
      <scheme>websocket</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-websocket-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="staticResources" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Set a resource path for static resources (such as .html files etc). The resources can be loaded from classpath if you prefix with classpath: otherwise the resources is loaded from file system or from JAR files. For example to load from root classpath use classpath:. or classpath:WEB-INF/static If not configured (eg null) then no static resource is in use."/>
         <componentProperty name="port" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="The port number. The default value is 9292"/>
         <componentProperty name="sslKeystore" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The path to the keystore."/>
         <componentProperty name="minThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9. The default values for minThreads is 1."/>
         <componentProperty name="socketFactory" type="object" javaType="java.util.Map&lt;java.lang.String,org.apache.camel.component.websocket.WebSocketFactory&gt;" kind="property" deprecated="false" description="To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol. The default key is reserved for the default implementation."/>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The hostname. The default value is 0.0.0.0"/>
         <componentProperty name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="property" deprecated="false" description="To configure security using SSLContextParameters"/>
         <componentProperty name="sslPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password when using SSL."/>
         <componentProperty name="sslKeyPassword" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The password for the keystore when using SSL."/>
         <componentProperty name="enableJmx" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If this option is true Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details."/>
         <componentProperty name="threadPool" type="object" javaType="org.eclipse.jetty.util.thread.ThreadPool" kind="property" deprecated="false" description="To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9."/>
         <componentProperty name="maxThreads" type="integer" javaType="java.lang.Integer" kind="property" deprecated="false" description="To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9. The default values for maxThreads is 1 2 noCores."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="sendTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="30000" label="producer" group="producer" description="Timeout in millis when sending to a websocket channel. The default timeout is 30000 (30 seconds)."/>
         <uriParameter name="minVersion" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="13" label="advanced" group="advanced" description="Can be used to set the minimum protocol version accepted for the websocketServlet. (Default 13 - the RFC6455 version)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendToAll" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="To send to all websocket subscribers. Can be used to configure on endpoint level instead of having to use the WebsocketConstants.SEND_TO_ALL header on the message."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters"/>
         <uriParameter name="maxIdleTime" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="300000" label="advanced" group="advanced" description="Set the time in ms that the websocket created by the websocketServlet may be idle before closing. (default is 300000)"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the websocket channel to use"/>
         <uriParameter name="enableJmx" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="monitoring" group="monitoring" description="If this option is true Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details."/>
         <uriParameter name="sessionSupport" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to enable session support which enables HttpSession for each http request."/>
         <uriParameter name="staticResources" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Set a resource path for static resources (such as .html files etc). The resources can be loaded from classpath if you prefix with classpath: otherwise the resources is loaded from file system or from JAR files. For example to load from root classpath use classpath:. or classpath:WEB-INF/static If not configured (eg null) then no static resource is in use."/>
         <uriParameter name="filterPath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="cors" group="cors" description="Context path for filtering CORS"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="allowedOrigins" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="cors" group="cors" description="The CORS allowed origins. Use to allow all."/>
         <uriParameter name="crossOriginFilterOn" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="cors" group="cors" description="Whether to enable CORS"/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" defaultValue="9292" group="common" description="The port number. The default value is 9292. Setting this option on the component will use the component configured value as default."/>
         <uriParameter name="maxTextMessageSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Can be used to set the size in characters that the websocket created by the websocketServlet may be accept before closing."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="0.0.0.0" group="common" description="The hostname. The default value is 0.0.0.0. Setting this option on the component will use the component configured value as default."/>
         <uriParameter name="maxBinaryMessageSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="-1" group="common" description="Can be used to set the size in bytes that the websocket created by the websocketServlet may be accept before closing. (Default is -1 - or unlimited)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="bufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="8192" label="advanced" group="advanced" description="Set the buffer size of the websocketServlet which is also the max frame byte size (default 8192)"/>
      </uriParameters>
   </component>
   <component>
      <id>aws-kinesis</id>
      <tags>
         <tag>cloud</tag>
         <tag>messaging</tag>
      </tags>
      <title>AWS Kinesis</title>
      <description>The aws-kinesis component is for consuming records from Amazon Kinesis Streams.</description>
      <syntax>aws-kinesis:streamName</syntax>
      <class>org.apache.camel.component.aws.kinesis.KinesisComponent</class>
      <kind>component</kind>
      <scheme>aws-kinesis</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="amazonKinesisClient" type="object" javaType="com.amazonaws.services.kinesis.AmazonKinesis" kind="parameter" deprecated="false" required="true" group="common" description="Amazon Kinesis client to use for all requests for this endpoint"/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sequenceNumber" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The sequence number to start polling from"/>
         <uriParameter name="iteratorType" type="string" javaType="com.amazonaws.services.kinesis.model.ShardIteratorType" kind="parameter" choice="AT_SEQUENCE_NUMBER,AFTER_SEQUENCE_NUMBER,TRIM_HORIZON,LATEST,AT_TIMESTAMP" deprecated="false" label="consumer" group="consumer" description="Defines where in the Kinesis stream to start getting records"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="shardId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Defines which shardId in the Kinesis stream to get records from"/>
         <uriParameter name="streamName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the stream"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="maxResultsPerRequest" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Maximum number of records that will be fetched in each poll"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>bean</id>
      <tags>
         <tag>core</tag>
         <tag>java</tag>
      </tags>
      <title>Bean</title>
      <description>The bean component is for invoking Java beans from Camel.</description>
      <syntax>bean:beanName</syntax>
      <class>org.apache.camel.component.bean.BeanComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>bean</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="cache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="If enabled Camel will cache the result of the first Registry look-up. Cache can be enabled if the bean in the Registry is defined as a singleton scope."/>
         <uriParameter name="method" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the name of the method to invoke on the bean"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="beanName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Sets the name of the bean to invoke"/>
         <uriParameter name="multiParameterArray" type="boolean" javaType="boolean" kind="parameter" deprecated="true" defaultValue="false" label="advanced" group="advanced" description="How to treat the parameters which are passed from the message body; if it is true the message body should be an array of parameters. Note: This option is used internally by Camel and is not intended for end users to use."/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Used for configuring additional properties on the bean"/>
      </uriParameters>
   </component>
   <component>
      <id>jt400</id>
      <tags>
         <tag>messaging</tag>
      </tags>
      <title>JT400</title>
      <description>The jt400 component allows you to exchanges messages with an AS/400 system using data queues or program call.</description>
      <syntax>jt400:userID:password/systemName/objectPath.type</syntax>
      <class>org.apache.camel.component.jt400.Jt400Component</class>
      <kind>component</kind>
      <scheme>jt400</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jt400-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="connectionPool" type="object" javaType="com.ibm.as400.access.AS400ConnectionPool" kind="property" deprecated="false" description="Returns the default connection pool used by this component."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.jt400.Jt400Type" kind="path" choice="DTAQ,PGM" deprecated="false" required="true" group="common" description="Whether to work with data queues or remote program call"/>
         <uriParameter name="userID" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Returns the ID of the AS/400 user."/>
         <uriParameter name="ccsid" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="common" description="Sets the CCSID to use for the connection with the AS/400 system."/>
         <uriParameter name="objectPath" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Returns the fully qualified integrated file system path name of the target object of this endpoint."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Returns the password of the AS/400 user."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="systemName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Returns the name of the AS/400 system."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="outputFieldsLengthArray" type="object" javaType="java.lang.Integer[]" kind="parameter" deprecated="false" group="common" description="Specifies the fields (program parameters) length as in the AS/400 program definition."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="guiAvailable" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Sets whether AS/400 prompting is enabled in the environment running Camel."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="searchType" type="object" javaType="org.apache.camel.component.jt400.Jt400Configuration.SearchType" kind="parameter" deprecated="false" defaultValue="EQ" group="common" description="Search type such as EQ for equal etc."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="format" type="object" javaType="org.apache.camel.component.jt400.Jt400Configuration.Format" kind="parameter" deprecated="false" defaultValue="text" group="common" description="Sets the data format for sending messages."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="searchKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Search key for keyed data queues."/>
         <uriParameter name="keyed" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to use keyed or non-keyed data queues."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="outputFieldsIdxArray" type="object" javaType="java.lang.Integer[]" kind="parameter" deprecated="false" group="common" description="Specifies which fields (program parameters) are output parameters."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="readTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30000" label="consumer" group="consumer" description="Timeout in millis the consumer will wait while trying to read a new message of the data queue."/>
         <uriParameter name="secured" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether connections to AS/400 are secured with SSL."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>sap-netweaver</id>
      <tags>
         <tag>sap</tag>
      </tags>
      <title>SAP NetWeaver</title>
      <description>The sap-netweaver component integrates with the SAP NetWeaver Gateway using HTTP transports.</description>
      <syntax>sap-netweaver:url</syntax>
      <class>org.apache.camel.component.sap.netweaver.NetWeaverComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>sap-netweaver</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sap-netweaver-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="flatternMap" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="If the JSON Map contains only a single entry then flattern by storing that single entry value as the message body."/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="producer" description="Password for account."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="json" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to return data in JSON format. If this option is false then XML is returned in Atom format."/>
         <uriParameter name="jsonAsMap" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="To transform the JSON from a String to a Map in the message body."/>
         <uriParameter name="url" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Url to the SAP net-weaver gateway server."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" group="producer" description="Username for account."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-ddb</id>
      <tags>
         <tag>cloud</tag>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>AWS DynamoDB</title>
      <description>The aws-ddb component is used for storing and retrieving data from Amazon&apos;s DynamoDB service.</description>
      <syntax>aws-ddb:tableName</syntax>
      <class>org.apache.camel.component.aws.ddb.DdbComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-ddb</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="amazonDDBClient" type="object" javaType="com.amazonaws.services.dynamodbv2.AmazonDynamoDB" kind="parameter" deprecated="false" group="producer" description="To use the AmazonDynamoDB as the client"/>
         <uriParameter name="readCapacity" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="The provisioned throughput to reserve for reading resources from your table"/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="amazonDdbEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-DDB client wants to work with."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="keyAttributeType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Attribute type when creating table"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="tableName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The name of the table currently worked with."/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="keyAttributeName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Attribute name when creating table"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="consistentRead" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Determines whether or not strong consistency should be enforced when data is read."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.aws.ddb.DdbOperations" kind="parameter" choice="BatchGetItems,DeleteItem,DeleteTable,DescribeTable,GetItem,PutItem,Query,Scan,UpdateItem,UpdateTable" deprecated="false" defaultValue="PutItem" group="producer" description="What operation to perform"/>
         <uriParameter name="writeCapacity" type="integer" javaType="java.lang.Long" kind="parameter" deprecated="false" group="producer" description="The provisioned throughput to reserved for writing resources to your table"/>
      </uriParameters>
   </component>
   <component>
      <id>google-drive</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>file</tag>
      </tags>
      <title>Google Drive</title>
      <description>The google-drive component provides access to Google Drive file storage service.</description>
      <syntax>google-drive:apiName/methodName</syntax>
      <class>org.apache.camel.component.google.drive.GoogleDriveComponent</class>
      <kind>component</kind>
      <scheme>google-drive</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-google-drive-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.google.drive.GoogleDriveConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
         <componentProperty name="clientFactory" type="object" javaType="org.apache.camel.component.google.drive.GoogleDriveClientFactory" kind="property" deprecated="false" description="To use the GoogleCalendarClientFactory as factory for creating the client. Will by default use BatchGoogleDriveClientFactory"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.google.drive.internal.GoogleDriveApiName" kind="path" choice="drive-about,drive-apps,drive-changes,drive-channels,drive-children,drive-comments,drive-files,drive-parents,drive-permissions,drive-properties,drive-realtime,drive-replies,drive-revisions" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client ID of the drive application"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="clientFactory" type="object" javaType="org.apache.camel.component.google.drive.GoogleDriveClientFactory" kind="parameter" deprecated="false" group="common" description="To use the GoogleCalendarClientFactory as factory for creating the client. Will by default use BatchGoogleDriveClientFactory"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" choice="copy,delete,get,getIdForEmail,insert,list,patch,stop,touch,trash,untrash,update,watch" deprecated="false" required="true" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="accessToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 access token. This typically expires after an hour so refreshToken is recommended for long term usage."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="clientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Client secret of the drive application"/>
         <uriParameter name="scopes" type="array" javaType="java.util.List&lt;java.lang.String&gt;" kind="parameter" deprecated="false" group="common" description="Specifies the level of permissions you want a drive application to have to a user account. See https://developers.google.com/drive/web/scopes for more info."/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="applicationName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Google drive application name. Example would be camel-google-drive/1.0"/>
         <uriParameter name="refreshToken" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="OAuth 2 refresh token. Using this the Google Calendar component can obtain a new accessToken whenever the current one expires - a necessity if the application is long-lived."/>
      </uriParameters>
   </component>
   <component>
      <id>spring-ws</id>
      <tags>
         <tag>soap</tag>
         <tag>webservice</tag>
      </tags>
      <title>Spring WebService</title>
      <description>The spring-ws component is used for SOAP WebServices using Spring WebServices.</description>
      <syntax>spring-ws:type:lookupKey:webServiceEndpointUri</syntax>
      <class>org.apache.camel.component.spring.ws.SpringWebserviceComponent</class>
      <kind>component</kind>
      <scheme>spring-ws</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-ws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="messageFactory" type="object" javaType="org.springframework.ws.WebServiceMessageFactory" kind="parameter" deprecated="false" label="producer" group="producer" description="Option to provide a custom WebServiceMessageFactory. For example when you want Apache Axiom to handle web service messages instead of SAAJ."/>
         <uriParameter name="expression" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The XPath expression to use when option type=xpathresult. Then this option is required to be configured."/>
         <uriParameter name="outputAction" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" label="producer" group="producer" description="Signifies the value for the response WS-Addressing Action header that is provided by the method."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="messageSender" type="object" javaType="org.springframework.ws.transport.WebServiceMessageSender" kind="parameter" deprecated="false" label="producer" group="producer" description="Option to provide a custom WebServiceMessageSender. For example to perform authentication or use alternative transports"/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To configure security using SSLContextParameters"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="webServiceTemplate" type="object" javaType="org.springframework.ws.client.core.WebServiceTemplate" kind="parameter" deprecated="false" label="producer" group="producer" description="Option to provide a custom WebServiceTemplate. This allows for full control over client-side web services handling; like adding a custom interceptor or specifying a fault resolver message sender or message factory."/>
         <uriParameter name="soapAction" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="SOAP action to include inside a SOAP request when accessing remote web services"/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.spring.ws.type.EndpointMappingType" kind="path" choice="ROOT_QNAME,ACTION,TO,SOAP_ACTION,XPATHRESULT,URI,URI_PATH,BEANNAME" deprecated="false" label="consumer" group="consumer" description="Endpoint mapping type if endpoint mapping is used. rootqname - Offers the option to map web service requests based on the qualified name of the root element contained in the message. soapaction - Used to map web service requests based on the SOAP action specified in the header of the message. uri - In order to map web service requests that target a specific URI. xpathresult - Used to map web service requests based on the evaluation of an XPath expression against the incoming message. The result of the evaluation should match the XPath result specified in the endpoint URI. beanname - Allows you to reference an org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher object in order to integrate with existing (legacy) endpoint mappings like PayloadRootQNameEndpointMapping SoapActionEndpointMapping etc"/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the socket read timeout (in milliseconds) while invoking a webservice using the producer see URLConnection.setReadTimeout() and CommonsHttpMessageSender.setReadTimeout(). This option works when using the built-in message sender implementations: CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of these implementations will be used by default for HTTP based services unless you customize the Spring WS configuration options supplied to the component. If you are using a non-standard sender it is assumed that you will handle your own timeout configuration. The built-in message sender HttpComponentsMessageSender is considered instead of CommonsHttpMessageSender which has been deprecated see HttpComponentsMessageSender.setReadTimeout()."/>
         <uriParameter name="endpointDispatcher" type="object" javaType="org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Spring org.springframework.ws.server.endpoint.MessageEndpoint for dispatching messages received by Spring-WS to a Camel endpoint to integrate with existing (legacy) endpoint mappings like PayloadRootQNameEndpointMapping SoapActionEndpointMapping etc."/>
         <uriParameter name="wsAddressingAction" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" label="producer" group="producer" description="WS-Addressing 1.0 action header to include when accessing web services. The To header is set to the address of the web service as specified in the endpoint URI (default Spring-WS behavior)."/>
         <uriParameter name="webServiceEndpointUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="producer" group="producer" description="The default Web Service endpoint uri to use for the producer."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="lookupKey" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="consumer" group="consumer" description="Endpoint mapping key if endpoint mapping is used"/>
         <uriParameter name="messageIdStrategy" type="object" javaType="org.springframework.ws.soap.addressing.messageid.MessageIdStrategy" kind="parameter" deprecated="false" label="producer" group="producer" description="Option to provide a custom MessageIdStrategy to control generation of unique message ids."/>
         <uriParameter name="faultAction" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" label="producer" group="producer" description="Signifies the value for the faultAction response WS-Addressing Fault Action header that is provided by the method."/>
         <uriParameter name="faultTo" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" label="producer" group="producer" description="Signifies the value for the faultAction response WS-Addressing FaultTo header that is provided by the method."/>
         <uriParameter name="replyTo" type="string" javaType="java.net.URI" kind="parameter" deprecated="false" label="producer" group="producer" description="Signifies the value for the replyTo response WS-Addressing ReplyTo header that is provided by the method."/>
         <uriParameter name="messageFilter" type="object" javaType="org.apache.camel.component.spring.ws.filter.MessageFilter" kind="parameter" deprecated="false" group="common" description="Option to provide a custom MessageFilter. For example when you want to process your headers or attachments by your own."/>
         <uriParameter name="endpointMapping" type="object" javaType="org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Reference to an instance of org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the Registry/ApplicationContext. Only one bean is required in the registry to serve all Camel/Spring-WS endpoints. This bean is auto-discovered by the MessageDispatcher and used to map requests to Camel endpoints based on characteristics specified on the endpoint (like root QName SOAP action etc)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>crypto</id>
      <tags>
         <tag>security</tag>
         <tag>transformation</tag>
      </tags>
      <title>Crypto (JCE)</title>
      <description>The crypto component is used for signing and verifying exchanges using the Signature Service of the Java Cryptographic Extension (JCE).</description>
      <syntax>crypto:cryptoOperation:name</syntax>
      <class>org.apache.camel.component.crypto.DigitalSignatureComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>crypto</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-crypto-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.crypto.DigitalSignatureConfiguration" kind="property" deprecated="false" description="To use the shared DigitalSignatureConfiguration as configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="clearHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Determines if the Signature specific headers be cleared after signing and verification. Defaults to true and should only be made otherwise at your extreme peril as vital private information such as Keys and passwords may escape if unset."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="certificate" type="object" javaType="java.security.cert.Certificate" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the Certificate that should be used to verify the signature in the exchange based on its payload."/>
         <uriParameter name="certificateName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the reference name for a PrivateKey that can be fond in the registry."/>
         <uriParameter name="keystoreName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the reference name for a Keystore that can be fond in the registry."/>
         <uriParameter name="publicKey" type="object" javaType="java.security.PublicKey" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the PublicKey that should be used to verify the signature in the exchange."/>
         <uriParameter name="cryptoOperation" type="string" javaType="org.apache.camel.component.crypto.CryptoOperation" kind="path" choice="sign,verify" deprecated="false" required="true" group="producer" description="Set the Crypto operation from that supplied after the crypto scheme in the endpoint uri e.g. crypto:sign sets sign as the operation."/>
         <uriParameter name="publicKeyName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="references that should be resolved when the context changes"/>
         <uriParameter name="secureRandomName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the reference name for a SecureRandom that can be fond in the registry."/>
         <uriParameter name="keyStoreParameters" type="object" javaType="org.apache.camel.util.jsse.KeyStoreParameters" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges based on the given KeyStoreParameters. A KeyStore is typically used with an alias either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore then this single entry will be used."/>
         <uriParameter name="privateKey" type="object" javaType="java.security.PrivateKey" kind="parameter" deprecated="false" group="producer" description="Set the PrivateKey that should be used to sign the exchange"/>
         <uriParameter name="secureRandom" type="object" javaType="java.security.SecureRandom" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Set the SecureRandom used to initialize the Signature service"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Sets the password used to access an aliased PrivateKey in the KeyStore."/>
         <uriParameter name="provider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Set the id of the security provider that provides the configured Signature algorithm."/>
         <uriParameter name="privateKeyName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the reference name for a PrivateKey that can be fond in the registry."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The logical name of this operation."/>
         <uriParameter name="alias" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Sets the alias used to query the KeyStore for keys and link java.security.cert.Certificate Certificates to be used in signing and verifying exchanges. This value can be provided at runtime via the message header link org.apache.camel.component.crypto.DigitalSignatureConstantsKEYSTORE_ALIAS"/>
         <uriParameter name="keystore" type="object" javaType="java.security.KeyStore" kind="parameter" deprecated="false" group="producer" description="Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges. A KeyStore is typically used with an alias either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore then this single entry will be used."/>
         <uriParameter name="signatureHeaderName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Set the name of the message header that should be used to store the base64 encoded signature. This defaults to &apos;CamelDigitalSignature&apos;"/>
         <uriParameter name="algorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="SHA1WithDSA" group="producer" description="Sets the JCE name of the Algorithm that should be used for the signer."/>
         <uriParameter name="bufferSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="2048" label="advanced" group="advanced" description="Set the size of the buffer used to read in the Exchange payload data."/>
      </uriParameters>
   </component>
   <component>
      <id>aws-sqs</id>
      <tags>
         <tag>cloud</tag>
         <tag>messaging</tag>
      </tags>
      <title>AWS Simple Queue Service</title>
      <description>The aws-sqs component is used for sending and receiving messages to Amazon&apos;s SQS service.</description>
      <syntax>aws-sqs:queueNameOrArn</syntax>
      <class>org.apache.camel.component.aws.sqs.SqsComponent</class>
      <kind>component</kind>
      <scheme>aws-sqs</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="amazonSQSEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The region with which the AWS-SQS client wants to work with. Only works if Camel creates the AWS-SQS client i.e. if you explicitly set amazonSQSClient then this setting will have no effect. You would have to set it on the client you create directly"/>
         <uriParameter name="maximumMessageSize" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="queue" group="queue" description="The maximumMessageSize (in bytes) an SQS message can contain for this queue."/>
         <uriParameter name="deleteIfFiltered" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Whether or not to send the DeleteMessage to the SQS queue if an exchange fails to get through a filter. If &apos;false&apos; and exchange does not make it through a Camel filter upstream in the route then don&apos;t send DeleteMessage."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="visibilityTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request to set in the com.amazonaws.services.sqs.model.SetQueueAttributesRequest. This only make sense if its different from defaultVisibilityTimeout. It changes the queue visibility timeout attribute permanently."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="proxy" group="proxy" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="attributeNames" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="A list of attribute names to receive when consuming. Multiple names can be separated by comma."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="headerFilterStrategy" type="object" javaType="org.apache.camel.spi.HeaderFilterStrategy" kind="parameter" deprecated="false" group="common" description="To use a custom HeaderFilterStrategy to map headers to/from Camel."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Gets the maximum number of messages as a limit to poll at each polling. Is default unlimited but use 0 or negative number to disable it as unlimited."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="messageRetentionPeriod" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="queue" group="queue" description="The messageRetentionPeriod (in seconds) a message will be retained by SQS for this queue."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="policy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="queue" group="queue" description="The policy for this queue"/>
         <uriParameter name="delaySeconds" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="producer" group="producer" description="Delay sending messages for a number of seconds."/>
         <uriParameter name="messageAttributeNames" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="A list of message attribute names to receive when consuming. Multiple names can be separated by comma."/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Secret Key"/>
         <uriParameter name="queueNameOrArn" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Queue name or ARN"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="extendMessageVisibility" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If enabled then a scheduled background task will keep extending the message visibility on SQS. This is needed if it takes a long time to process the message. If set to true defaultVisibilityTimeout must be set. See details at Amazon docs."/>
         <uriParameter name="defaultVisibilityTimeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="The default visibility timeout (in seconds)"/>
         <uriParameter name="queueOwnerAWSAccountId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specify the queue owner aws account id when you need to connect the queue with different account owner."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Allows you to use multiple threads to poll the sqs queue to increase throughput"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="receiveMessageWaitTimeSeconds" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="queue" group="queue" description="If you do not specify WaitTimeSeconds in the request the queue attribute ReceiveMessageWaitTimeSeconds is used to determine how long to wait."/>
         <uriParameter name="waitTimeSeconds" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Duration in seconds (0 to 20) that the ReceiveMessage action call will wait until a message is in the queue to include in the response."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="redrivePolicy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="queue" group="queue" description="Specify the policy that send message to DeadLetter queue. See detail at Amazon docs."/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Amazon AWS Access Key"/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="amazonSQSClient" type="object" javaType="com.amazonaws.services.sqs.AmazonSQS" kind="parameter" deprecated="false" group="common" description="To use the AmazonSQS as client"/>
         <uriParameter name="deleteAfterRead" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Delete message from SQS after it has been read"/>
         <uriParameter name="region" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specify the queue region which could be used with queueOwnerAWSAccountId to build the service URL."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>coap</id>
      <tags>
         <tag>iot</tag>
      </tags>
      <title>CoAP</title>
      <description>The coap component is used for sending and receiving messages from COAP capable devices.</description>
      <syntax>coap:uri</syntax>
      <class>org.apache.camel.coap.CoAPComponent</class>
      <kind>component</kind>
      <scheme>coap</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-coap-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="coapMethod" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="*" group="common" description="The CoAP method this endpoint binds to. Default is to bind to all () but can be restricted to GET POST PUT DELETE PING"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="uri" type="string" javaType="java.net.URI" kind="path" deprecated="false" group="common" description="The URI for the CoAP endpoint"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>mock</id>
      <tags>
         <tag>core</tag>
         <tag>testing</tag>
      </tags>
      <title>Mock</title>
      <description>The mock component is used for testing routes and mediation rules using mocks.</description>
      <syntax>mock:name</syntax>
      <class>org.apache.camel.component.mock.MockComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>mock</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="reportGroup" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="A number that is used to turn on throughput logging based on groups of the size."/>
         <uriParameter name="sleepForEmptyTest" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Name of mock endpoint"/>
         <uriParameter name="expectedCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n&apos;th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details."/>
         <uriParameter name="retainLast" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the last n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
         <uriParameter name="copyOnExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true."/>
         <uriParameter name="assertPeriod" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled."/>
         <uriParameter name="resultMinimumWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="resultWaitTime" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied"/>
         <uriParameter name="retainFirst" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="producer" group="producer" description="Specifies to only retain the first n&apos;th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received."/>
      </uriParameters>
   </component>
   <component>
      <id>jolt</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>JOLT</title>
      <description>The jolt component allows you to process a JSON messages using an JOLT specification (such as JSON-JSON transformation).</description>
      <syntax>jolt:resourceUri</syntax>
      <class>org.apache.camel.component.jolt.JoltComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>jolt</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jolt-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="transform" type="object" javaType="com.bazaarvoice.jolt.Transform" kind="property" deprecated="false" description="Explicitly sets the Transform to use. If not set a Transform specified by the transformDsl will be created"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="transformDsl" type="string" javaType="org.apache.camel.component.jolt.JoltTransformType" kind="parameter" choice="Chainr,Shiftr,Defaultr,Removr,Sortr" deprecated="false" defaultValue="Chainr" group="producer" description="Specifies the Transform DSL of the endpoint resource. If none is specified Chainr will be used."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.jolt.JoltInputOutputType" kind="parameter" choice="Hydrated,JsonString" deprecated="false" defaultValue="Hydrated" group="producer" description="Specifies if the output should be hydrated JSON or a JSON String."/>
         <uriParameter name="inputType" type="string" javaType="org.apache.camel.component.jolt.JoltInputOutputType" kind="parameter" choice="Hydrated,JsonString" deprecated="false" defaultValue="Hydrated" group="producer" description="Specifies if the input is hydrated JSON or a JSON String."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
      </uriParameters>
   </component>
   <component>
      <id>xmlsecurity</id>
      <tags>
         <tag>security</tag>
         <tag>transformation</tag>
      </tags>
      <title>XML Security</title>
      <description>Used to sign and verify exchanges using the XML signature specification.</description>
      <syntax>xmlsecurity:command:name</syntax>
      <class>org.apache.camel.component.xmlsecurity.XmlSignatureComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>xmlsecurity</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xmlsecurity-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="signerConfiguration" type="object" javaType="org.apache.camel.component.xmlsecurity.processor.XmlSignerConfiguration" kind="property" deprecated="false" description="To use a shared XmlSignerConfiguration configuration to use as base for configuring endpoints."/>
         <componentProperty name="verifierConfiguration" type="object" javaType="org.apache.camel.component.xmlsecurity.processor.XmlVerifierConfiguration" kind="property" deprecated="false" description="To use a shared XmlVerifierConfiguration configuration to use as base for configuring endpoints."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="canonicalizationMethod" type="object" javaType="javax.xml.crypto.AlgorithmMethod" kind="parameter" deprecated="false" defaultValue="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" label="sign" group="sign" description="Canonicalization method used to canonicalize the SignedInfo element before the digest is calculated. You can use the helper methods XmlSignatureHelper.getCanonicalizationMethod(String algorithm) or getCanonicalizationMethod(String algorithm List inclusiveNamespacePrefixes) to create a canonicalization method."/>
         <uriParameter name="omitXmlDeclaration" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="common" group="common" description="Indicator whether the XML declaration in the outgoing message body should be omitted. Default value is false. Can be overwritten by the header link XmlSignatureConstantsHEADER_OMIT_XML_DECLARATION."/>
         <uriParameter name="clearHeaders" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="Determines if the XML signature specific headers be cleared after signing and verification. Defaults to true."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="outputXmlEncoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The character encoding of the resulting signed XML document. If null then the encoding of the original XML document is used."/>
         <uriParameter name="contentObjectId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Sets the content object Id attribute value. By default a UUID is generated. If you set the null value then a new UUID will be generated. Only used in the enveloping case."/>
         <uriParameter name="parentNamespace" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Namespace of the parent element to which the XML signature element will be added."/>
         <uriParameter name="signatureId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Sets the signature Id. If this parameter is not set (null value) then a unique ID is generated for the signature ID (default). If this parameter is set to (empty string) then no Id attribute is created in the signature element."/>
         <uriParameter name="transformMethods" type="array" javaType="java.util.List&lt;javax.xml.crypto.AlgorithmMethod&gt;" kind="parameter" deprecated="false" label="sign" group="sign" description="Transforms which are executed on the message body before the digest is calculated. By default C14n is added and in the case of enveloped signature (see option parentLocalName) also http://www.w3.org/2000/09/xmldsigenveloped-signature is added at position 0 of the list. Use methods in XmlSignatureHelper to create the transform methods."/>
         <uriParameter name="outputNodeSearch" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="verify" group="verify" description="Sets the output node search value for determining the node from the XML signature document which shall be set to the output message body. The class of the value depends on the type of the output node search. The output node search is forwarded to XmlSignature2Message."/>
         <uriParameter name="parentXpath" type="object" javaType="javax.xml.crypto.dsig.spec.XPathFilterParameterSpec" kind="parameter" deprecated="false" label="sign" group="sign" description="Sets the XPath to find the parent node in the enveloped case. Either you specify the parent node via this method or the local name and namespace of the parent with the methods link setParentLocalName(String) and link setParentNamespace(String). Default value is null. The value must be null for enveloping and detached XML signature. If the parameters parentXpath and parentLocalName are specified in the same configuration then an exception is thrown."/>
         <uriParameter name="outputNodeSearchType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="Default" label="verify" group="verify" description="Determines the search type for determining the output node which is serialized into the output message bodyF. See link setOutputNodeSearch(Object). The supported default search types you can find in DefaultXmlSignature2Message."/>
         <uriParameter name="xpathsToIdAttributes" type="array" javaType="java.util.List&lt;javax.xml.crypto.dsig.spec.XPathFilterParameterSpec&gt;" kind="parameter" deprecated="false" label="sign" group="sign" description="Define the elements which are signed in the detached case via XPATH expressions to ID attributes (attributes of type ID). For each element found via the XPATH expression a detached signature is created whose reference URI contains the corresponding attribute value (preceded by &apos;&apos;). The signature becomes the last sibling of the signed element. Elements with deeper hierarchy level are signed first. You can also set the XPATH list dynamically via the header link XmlSignatureConstantsHEADER_XPATHS_TO_ID_ATTRIBUTES. The parameter link setParentLocalName(String) or link setParentXpath(XPathFilterParameterSpec) for enveloped signature and this parameter for detached signature must not be set in the same configuration."/>
         <uriParameter name="parentLocalName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Local name of the parent element to which the XML signature element will be added. Only relevant for enveloped XML signature. Alternatively you can also use link setParentXpath(XPathFilterParameterSpec). Default value is null. The value must be null for enveloping and detached XML signature. This parameter or the parameter link setParentXpath(XPathFilterParameterSpec) for enveloped signature and the parameter link setXpathsToIdAttributes(List) for detached signature must not be set in the same configuration. If the parameters parentXpath and parentLocalName are specified in the same configuration then an exception is thrown."/>
         <uriParameter name="contentReferenceType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Type of the content reference. The default value is null. This value can be overwritten by the header link XmlSignatureConstantsHEADER_CONTENT_REFERENCE_TYPE."/>
         <uriParameter name="uriDereferencer" type="object" javaType="javax.xml.crypto.URIDereferencer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="If you want to restrict the remote access via reference URIs you can set an own dereferencer. Optional parameter. If not set the provider default dereferencer is used which can resolve URI fragments HTTP file and XPpointer URIs. Attention: The implementation is provider dependent!"/>
         <uriParameter name="xmlSignatureChecker" type="object" javaType="org.apache.camel.component.xmlsecurity.api.XmlSignatureChecker" kind="parameter" deprecated="false" label="verify" group="verify" description="This interface allows the application to check the XML signature before the validation is executed. This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/check-what-is-signed"/>
         <uriParameter name="keyAccessor" type="object" javaType="org.apache.camel.component.xmlsecurity.api.KeyAccessor" kind="parameter" deprecated="false" label="sign" group="sign" description="For the signing process a private key is necessary. You specify a key accessor bean which provides this private key. The key accessor bean must implement the KeyAccessor interface. The package org.apache.camel.component.xmlsecurity.api contains the default implementation class DefaultKeyAccessor which reads the private key from a Java keystore."/>
         <uriParameter name="prefixForXmlSignatureNamespace" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="ds" label="sign" group="sign" description="Namespace prefix for the XML signature namespace http://www.w3.org/2000/09/xmldsig. Default value is ds. If null or an empty value is set then no prefix is used for the XML signature namespace. See best practice http://www.w3.org/TR/xmldsig-bestpractices/signing-xml- without-namespaces"/>
         <uriParameter name="keySelector" type="object" javaType="javax.xml.crypto.KeySelector" kind="parameter" deprecated="false" label="verify" group="verify" description="Provides the key for validating the XML signature."/>
         <uriParameter name="plainText" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="sign" group="sign" description="Indicator whether the message body contains plain text. The default value is false indicating that the message body contains XML. The value can be overwritten by the header link XmlSignatureConstantsHEADER_MESSAGE_IS_PLAIN_TEXT."/>
         <uriParameter name="plainTextEncoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="UTF-8" label="sign" group="sign" description="Encoding of the plain text. Only relevant if the message body is plain text (see parameter link plainText. Default value is UTF-8."/>
         <uriParameter name="removeSignatureElements" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" label="verify" group="verify" description="Indicator whether the XML signature elements (elements with local name Signature and namesapce http://www.w3.org/2000/09/xmldsig) shall be removed from the document set to the output message. Normally this is only necessary if the XML signature is enveloped. The default value is link BooleanFALSE. This parameter is forwarded to XmlSignature2Message. This indicator has no effect if the output node search is of type link DefaultXmlSignature2MessageOUTPUT_NODE_SEARCH_TYPE_DEFAULT.F"/>
         <uriParameter name="secureValidation" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="verify" group="verify" description="Enables secure validation. If true then secure validation is enabled."/>
         <uriParameter name="addKeyInfoReference" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="sign" group="sign" description="In order to protect the KeyInfo element from tampering you can add a reference to the signed info element so that it is protected via the signature value. The default value is true. Only relevant when a KeyInfo is returned by KeyAccessor. and link KeyInfogetId() is not null."/>
         <uriParameter name="digestAlgorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Digest algorithm URI. Optional parameter. This digest algorithm is used for calculating the digest of the input message. If this digest algorithm is not specified then the digest algorithm is calculated from the signature algorithm. Example: http://www.w3.org/2001/04/xmlencsha256"/>
         <uriParameter name="command" type="string" javaType="org.apache.camel.component.xmlsecurity.XmlCommand" kind="path" choice="sign,verify" deprecated="false" required="true" group="producer" description="Whether to sign or verify."/>
         <uriParameter name="schemaResourceUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Classpath to the XML Schema. Must be specified in the detached XML Signature case for determining the ID attributes might be set in the enveloped and enveloping case. If set then the XML document is validated with the specified XML schema. The schema resource URI can be overwritten by the header link XmlSignatureConstantsHEADER_SCHEMA_RESOURCE_URI."/>
         <uriParameter name="signatureAlgorithm" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="http://www.w3.org/2000/09/xmldsig#rsa-sha1" label="sign" group="sign" description="Signature algorithm. Default value is http://www.w3.org/2000/09/xmldsigrsa-sha1."/>
         <uriParameter name="validationFailedHandler" type="object" javaType="org.apache.camel.component.xmlsecurity.api.ValidationFailedHandler" kind="parameter" deprecated="false" label="verify" group="verify" description="Handles the different validation failed situations. The default implementation throws specific exceptions for the different situations (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException. If the signature value validation fails a XmlSignatureInvalidValueException is thrown. If a reference validation fails a XmlSignatureInvalidContentHashException is thrown. For more detailed information see the JavaDoc."/>
         <uriParameter name="contentReferenceUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="sign" group="sign" description="Reference URI for the content to be signed. Only used in the enveloped case. If the reference URI contains an ID attribute value then the resource schema URI ( link setSchemaResourceUri(String)) must also be set because the schema validator will then find out which attributes are ID attributes. Will be ignored in the enveloping or detached case."/>
         <uriParameter name="disallowDoctypeDecl" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="true" label="common" group="common" description="Disallows that the incoming XML document contains DTD DOCTYPE declaration. The default value is link BooleanTRUE."/>
         <uriParameter name="baseUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="You can set a base URI which is used in the URI dereferencing. Relative URIs are then concatenated with the base URI."/>
         <uriParameter name="name" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The name part in the URI can be chosen by the user to distinguish between different signer/verifier endpoints within the camel context."/>
         <uriParameter name="cryptoContextProperties" type="object" javaType="java.util.Map&lt;java.lang.String,?&gt;" kind="parameter" deprecated="false" label="common" group="common" description="Sets the crypto context properties. See link XMLCryptoContextsetProperty(String Object). Possible properties are defined in XMLSignContext an XMLValidateContext (see Supported Properties). The following properties are set by default to the value link BooleanTRUE for the XML validation. If you want to switch these features off you must set the property value to link BooleanFALSE. org.jcp.xml.dsig.validateManifests javax.xml.crypto.dsig.cacheReference"/>
         <uriParameter name="xmlSignature2Message" type="object" javaType="org.apache.camel.component.xmlsecurity.api.XmlSignature2Message" kind="parameter" deprecated="false" label="verify" group="verify" description="Bean which maps the XML signature to the output-message after the validation. How this mapping should be done can be configured by the options outputNodeSearchType outputNodeSearch and removeSignatureElements. The default implementation offers three possibilities which are related to the three output node search types Default ElementName and XPath. The default implementation determines a node which is then serialized and set to the body of the output message If the search type is ElementName then the output node (which must be in this case an element) is determined by the local name and namespace defined in the search value (see option outputNodeSearch). If the search type is XPath then the output node is determined by the XPath specified in the search value (in this case the output node can be of type Element TextNode or Document). If the output node search type is Default then the following rules apply: In the enveloped XML signature case (there is a reference with URI= and transform http://www.w3.org/2000/09/xmldsigenveloped-signature) the incoming XML document without the Signature element is set to the output message body. In the non-enveloped XML signature case the message body is determined from a referenced Object; this is explained in more detail in chapter Output Node Determination in Enveloping XML Signature Case."/>
         <uriParameter name="properties" type="object" javaType="org.apache.camel.component.xmlsecurity.api.XmlSignatureProperties" kind="parameter" deprecated="false" label="sign" group="sign" description="For adding additional References and Objects to the XML signature which contain additional properties you can provide a bean which implements the XmlSignatureProperties interface."/>
      </uriParameters>
   </component>
   <component>
      <id>couchdb</id>
      <tags>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>CouchDB</title>
      <description>The couchdb component is used for integrate with CouchDB databases.</description>
      <syntax>couchdb:protocol:hostname:port/database</syntax>
      <class>org.apache.camel.component.couchdb.CouchDbComponent</class>
      <kind>component</kind>
      <scheme>couchdb</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-couchdb-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="deletes" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Document deletes are published as events"/>
         <uriParameter name="heartbeat" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="How often to send an empty message to keep socket alive in millis"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="updates" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Document inserts/updates are published as events"/>
         <uriParameter name="createDatabase" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Creates the database if it does not already exist"/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" choice="http,https" deprecated="false" required="true" group="common" description="The protocol to use for communicating with the database."/>
         <uriParameter name="hostname" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname of the running couchdb instance"/>
         <uriParameter name="database" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of the database to use"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password for authenticated databases"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="5984" group="common" description="Port number for the running couchdb instance"/>
         <uriParameter name="style" type="string" javaType="java.lang.String" kind="parameter" choice="all_docs,main_only" deprecated="false" defaultValue="main_only" group="common" description="Specifies how many revisions are returned in the changes array. The default main_only will only return the current winning revision; all_docs will return all leaf revisions (including conflicts and deleted former conflicts.)"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username in case of authenticated databases"/>
      </uriParameters>
   </component>
   <component>
      <id>cql</id>
      <tags>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>Cassandra CQL</title>
      <description>The cql component aims at integrating Cassandra 2.0 using the CQL3 API (not the Thrift API).</description>
      <syntax>cql:beanRef:hosts:port/keyspace</syntax>
      <class>org.apache.camel.component.cassandra.CassandraComponent</class>
      <kind>component</kind>
      <scheme>cql</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cassandraql-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="resultSetConversionStrategy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="To use a custom class that implements logic for converting ResultSet into message body ALL ONE LIMIT_10 LIMIT_100..."/>
         <uriParameter name="cluster" type="object" javaType="com.datastax.driver.core.Cluster" kind="parameter" deprecated="false" group="common" description="To use the Cluster instance (you would normally not use this option)"/>
         <uriParameter name="beanRef" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="beanRef is defined using bean:id"/>
         <uriParameter name="hosts" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Hostname(s) cassansdra server(s). Multiple hosts can be separated by comma."/>
         <uriParameter name="session" type="object" javaType="com.datastax.driver.core.Session" kind="parameter" deprecated="false" group="common" description="To use the Session instance (you would normally not use this option)"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="keyspace" type="string" javaType="java.lang.String" kind="path" deprecated="false" group="common" description="Keyspace to use"/>
         <uriParameter name="prepareStatements" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to use PreparedStatements or regular Statements"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password for session authentication"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" group="common" description="Port number of cassansdra server(s)"/>
         <uriParameter name="clusterName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Cluster name"/>
         <uriParameter name="consistencyLevel" type="string" javaType="com.datastax.driver.core.ConsistencyLevel" kind="parameter" choice="ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE" deprecated="false" group="common" description="Consistency level to use"/>
         <uriParameter name="loadBalancingPolicy" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="To use a specific LoadBalancingPolicy"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="cql" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="CQL query to perform. Can be overridden with the message header with key CamelCqlQuery."/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Username for session authentication"/>
      </uriParameters>
   </component>
   <component>
      <id>mybatis</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>MyBatis</title>
      <description>Performs a query poll insert update or delete in a relational database using MyBatis.</description>
      <syntax>mybatis:statement</syntax>
      <class>org.apache.camel.component.mybatis.MyBatisComponent</class>
      <kind>component</kind>
      <scheme>mybatis</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mybatis-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="sqlSessionFactory" type="object" javaType="org.apache.ibatis.session.SqlSessionFactory" kind="property" deprecated="false" description="To use the SqlSessionFactory"/>
         <componentProperty name="configurationUri" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Location of MyBatis xml configuration file. The default value is: SqlMapConfig.xml loaded from the classpath"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="onConsume" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Statement to run after data has been processed in the route"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Enables or disables transaction. If enabled then if processing an exchange failed then the consumer break out processing any further exchanges to cause a rollback eager"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useIterator" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Process resultset individually or as a list"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="inputHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="User the header value for input parameters instead of the message body. By default inputHeader == null and the input parameters are taken from the message body. If outputHeader is set the value is used and query parameters will be taken from the header instead of the body."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="statement" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The statement name in the MyBatis XML mapping file which maps to the query insert update or delete operation you wish to evaluate."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="This option is intended to split results returned by the database pool into the batches and deliver them in multiple exchanges. This integer defines the maximum messages to deliver in single exchange. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disable it."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="executorType" type="string" javaType="org.apache.ibatis.session.ExecutorType" kind="parameter" choice="SIMPLE,REUSE,BATCH" deprecated="false" defaultValue="SIMPLE" label="producer" group="producer" description="The executor type to be used while executing statements. simple - executor does nothing special. reuse - executor reuses prepared statements. batch - executor reuses statements and batches updates."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="routeEmptyResultSet" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether allow empty resultset to be routed to the next hop"/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="outputHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Store the query result in a header instead of the message body. By default outputHeader == null and the query result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the query result and the original message body is preserved. Setting outputHeader will also omit populating the default CamelMyBatisResult header since it would be the same as outputHeader all the time."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="statementType" type="string" javaType="org.apache.camel.component.mybatis.StatementType" kind="parameter" choice="SelectOne,SelectList,Insert,InsertList,Update,UpdateList,Delete,DeleteList" deprecated="false" label="producer" group="producer" description="Mandatory to specify for the producer to control which kind of operation to invoke."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>chunk</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Chunk</title>
      <description>Transforms the message using a Chunk template.</description>
      <syntax>chunk:resourceUri</syntax>
      <class>org.apache.camel.component.chunk.ChunkComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>chunk</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-chunk-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="themeLayer" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Define the theme layer to elaborate"/>
         <uriParameter name="extension" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Define the file extension of the template"/>
         <uriParameter name="themeSubfolder" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Define the themes subfolder to scan"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="themeFolder" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Define the themes folder to scan"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Define the encoding of the body"/>
      </uriParameters>
   </component>
   <component>
      <id>vertx</id>
      <tags>
         <tag>eventbus</tag>
      </tags>
      <title>Vert.x</title>
      <description>The vertx component is used for sending and receive messages from a vertx event bus.</description>
      <syntax>vertx:address</syntax>
      <class>org.apache.camel.component.vertx.VertxComponent</class>
      <kind>component</kind>
      <scheme>vertx</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-vertx-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="port" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Port for creating an embedded clustered EventBus"/>
         <componentProperty name="vertxFactory" type="object" javaType="io.vertx.core.spi.VertxFactory" kind="property" deprecated="false" description="To use a custom VertxFactory implementation"/>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Hostname for creating an embedded clustered EventBus"/>
         <componentProperty name="vertxOptions" type="object" javaType="io.vertx.core.VertxOptions" kind="property" deprecated="false" description="Options to use for creating vertx"/>
         <componentProperty name="vertx" type="object" javaType="io.vertx.core.Vertx" kind="property" deprecated="false" description="To use the given vertx EventBus instead of creating a new embedded EventBus"/>
         <componentProperty name="timeout" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Timeout in seconds to wait for clustered Vertx EventBus to be ready. The default value is 60."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="address" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Sets the event bus address used to communicate"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="pubSub" type="boolean" javaType="java.lang.Boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to use publish/subscribe instead of point to point when sending to a vertx endpoint."/>
      </uriParameters>
   </component>
   <component>
      <id>box</id>
      <tags>
         <tag>api</tag>
         <tag>file</tag>
         <tag>cloud</tag>
      </tags>
      <title>Box</title>
      <description>For uploading downloading and managing files folders groups collaborations etc on box DOT com.</description>
      <syntax>box:apiName/methodName</syntax>
      <class>org.apache.camel.component.box.BoxComponent</class>
      <kind>component</kind>
      <scheme>box</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-box-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.box.BoxConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.box.internal.BoxApiName" kind="path" choice="COLLABORATIONS,COMMENTS,EVENTS,FILES,FOLDERS,GROUPS,POLL_EVENTS,SEARCH,SHARED_COMMENTS,SHARED_FILES,SHARED_FOLDERS,SHARED_ITEMS,USERS" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="userPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Box user password MUST be provided if authSecureStorage is not set or returns null on first call"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Box application client ID"/>
         <uriParameter name="revokeOnShutdown" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Flag to revoke OAuth refresh token on route shutdown default false. Will require a fresh refresh token on restart using either a custom IAuthSecureStorage or automatic component login by providing a user password"/>
         <uriParameter name="httpParams" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Custom HTTP params for settings like proxy host"/>
         <uriParameter name="authSecureStorage" type="object" javaType="com.box.boxjavalibv2.authorization.IAuthSecureStorage" kind="parameter" deprecated="false" label="advanced,security" group="security" description="OAuth Secure Storage callback can be used to provide and or save OAuth tokens. The callback may return null on first call to allow the component to login and authorize application and obtain an OAuth token which can then be saved in the secure storage. For the component to be able to create a token automatically a user password must be provided."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="boxConfig" type="object" javaType="com.box.boxjavalibv2.IBoxConfig" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Custom Box SDK configuration not required normally"/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure security using SSLContextParameters."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Box user name MUST be provided"/>
         <uriParameter name="refreshListener" type="object" javaType="com.box.boxjavalibv2.authorization.OAuthRefreshListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="OAuth listener for token updates if the Camel application needs to use the access token outside the route"/>
         <uriParameter name="connectionManagerBuilder" type="object" javaType="com.box.boxjavalibv2.BoxConnectionManagerBuilder" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Custom Box connection manager builder used to override default settings like max connections for underlying HttpClient."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="loginTimeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="30" group="common" description="Amount of time the component will wait for a response from Box.com default is 30 seconds"/>
         <uriParameter name="clientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="Box application client secret"/>
         <uriParameter name="sharedPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Password associated with the shared link MUST be provided with sharedLink"/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="sharedLink" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Box shared link for shared endpoints can be a link for a shared comment file or folder"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>ironmq</id>
      <tags>
         <tag>cloud</tag>
         <tag>messaging</tag>
      </tags>
      <title>ironmq</title>
      <description>The ironmq provides integration with IronMQ an elastic and durable hosted message queue as a service.</description>
      <syntax>ironmq:queueName</syntax>
      <class>org.apache.camel.component.ironmq.IronMQComponent</class>
      <kind>component</kind>
      <scheme>ironmq</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ironmq-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="wait" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Time in seconds to wait for a message to become available. This enables long polling. Default is 0 (does not wait) maximum is 30."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="timeout" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60" label="consumer" group="consumer" description="After timeout (in seconds) item will be placed back onto the queue."/>
         <uriParameter name="batchDelete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Should messages be deleted in one batch. This will limit the number of api requests since messages are deleted in one request instead of one pr. exchange. If enabled care should be taken that the consumer is idempotent when processing exchanges."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="client" type="object" javaType="io.iron.ironmq.Client" kind="parameter" deprecated="false" group="common" description="Reference to a io.iron.ironmq.Client in the Registry."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="Number of messages to poll pr. call. Maximum is 100."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="ironMQCloud" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="https://mq-aws-us-east-1-1.iron.io" group="common" description="IronMq Cloud url. Urls for public clusters: https://mq-aws-us-east-1-1.iron.io (US) and https://mq-aws-eu-west-1-1.iron.io (EU)"/>
         <uriParameter name="visibilityDelay" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The item will not be available on the queue until this many seconds have passed. Default is 0 seconds."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="preserveHeaders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Should message headers be preserved when publishing messages. This will add the Camel headers to the Iron MQ message as a json payload with a header list and a message body. Useful when Camel is both consumer and producer."/>
         <uriParameter name="concurrentConsumers" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1" label="consumer" group="consumer" description="The number of concurrent consumers."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="token" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="IronMQ token"/>
         <uriParameter name="queueName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The name of the IronMQ queue"/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="projectId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="IronMQ projectId"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>linkedin</id>
      <tags>
         <tag>api</tag>
         <tag>cloud</tag>
         <tag>social</tag>
      </tags>
      <title>Linkedin</title>
      <description>The linkedin component is uses for retrieving LinkedIn user profiles connections companies groups posts etc.</description>
      <syntax>linkedin:apiName/methodName</syntax>
      <class>org.apache.camel.component.linkedin.LinkedInComponent</class>
      <kind>component</kind>
      <scheme>linkedin</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-linkedin-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.linkedin.LinkedInConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="redirectUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Application redirect URI although the component never redirects to this page to avoid having to have a functioning redirect server. So for testing one could use https://localhost"/>
         <uriParameter name="apiName" type="string" javaType="org.apache.camel.component.linkedin.internal.LinkedInApiName" kind="path" choice="comments,companies,groups,jobs,people,posts,search" deprecated="false" required="true" group="common" description="What kind of operation to perform"/>
         <uriParameter name="userPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="LinkedIn account password"/>
         <uriParameter name="clientId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="LinkedIn application client ID"/>
         <uriParameter name="httpParams" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="Custom HTTP params for example proxy host and port use constants from AllClientPNames"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="secureStorage" type="object" javaType="org.apache.camel.component.linkedin.api.OAuthSecureStorage" kind="parameter" deprecated="false" group="common" description="Callback interface for providing an OAuth token or to store the token generated by the component. The callback should return null on the first call and then save the created token in the saveToken() callback. If the callback returns null the first time a userPassword MUST be provided"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="methodName" type="string" javaType="java.lang.String" kind="path" choice="addActivity,addComment,addCompanyUpdateComment,addCompanyUpdateCommentAsCompany,addGroupMembership,addInvite,addJob,addJobBookmark,addPost,addShare,addUpdateComment,editJob,flagCategory,followCompany,followPost,getComment,getCompanies,getCompanyById,getCompanyByName,getCompanyUpdateComments,getCompanyUpdateLikes,getCompanyUpdates,getConnections,getConnectionsById,getConnectionsByUrl,getFollowedCompanies,getGroup,getGroupMemberships,getGroupMembershipSettings,getHistoricalFollowStatistics,getHistoricalStatusUpdateStatistics,getJob,getJobBookmarks,getNetworkStats,getNetworkUpdates,getNetworkUpdatesById,getNumberOfFollowers,getPerson,getPersonById,getPersonByUrl,getPost,getPostComments,getPosts,getStatistics,getSuggestedCompanies,getSuggestedGroupPosts,getSuggestedGroups,getSuggestedJobs,getUpdateComments,getUpdateLikes,isShareEnabled,isViewerShareEnabled,likeCompanyUpdate,likePost,likeUpdate,removeComment,removeGroupMembership,removeGroupSuggestion,removeJob,removeJobBookmark,removePost,searchCompanies,searchJobs,searchPeople,share,stopFollowingCompany,updateGroupMembership" deprecated="false" required="true" group="common" description="What sub operation to use for the selected operation"/>
         <uriParameter name="userName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="LinkedIn user account name MUST be provided"/>
         <uriParameter name="lazyAuth" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Flag to enable/disable lazy OAuth default is true. when enabled OAuth token retrieval or generation is not done until the first REST call"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="clientSecret" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="LinkedIn application client secret"/>
         <uriParameter name="scopes" type="object" javaType="org.apache.camel.component.linkedin.api.OAuthScope[]" kind="parameter" deprecated="false" group="common" description="List of LinkedIn scopes as specified at https://developer.linkedin.com/documents/authenticationgranting"/>
         <uriParameter name="inBody" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of a parameter to be passed in the exchange In Body"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>sql</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>SQL</title>
      <description>The sql component allows you to work with databases using JDBC Stored Procedure queries.</description>
      <syntax>sql:query</syntax>
      <class>org.apache.camel.component.sql.SqlComponent</class>
      <kind>component</kind>
      <scheme>sql</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sql-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="dataSource" type="object" javaType="javax.sql.DataSource" kind="property" deprecated="false" description="Sets the DataSource to use to communicate with the database."/>
         <componentProperty name="usePlaceholder" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="true" required="false" description="Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries. This option is default true"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="breakBatchOnConsumeFail" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets whether to break batch if onConsume failed."/>
         <uriParameter name="onConsume" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing each row then this query can be executed if the Exchange was processed successfully for example to mark the row as processed. The query can have parameter."/>
         <uriParameter name="onConsumeFailed" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing each row then this query can be executed if the Exchange failed for example to mark the row as failed. The query can have parameter."/>
         <uriParameter name="useMessageBodyForSql" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether to use the message body as the SQL and then headers for parameters. If this option is enabled then the SQL in the uri is not used."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="dataSourceRef" type="string" javaType="java.lang.String" kind="parameter" deprecated="true" group="common" description="Sets the reference to a DataSource to lookup from the registry to use for communicating with the database."/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.sql.SqlOutputType" kind="parameter" choice="SelectOne,SelectList,StreamList" deprecated="false" defaultValue="SelectList" group="common" description="Make the output of consumer or producer to SelectList as List of Map or SelectOne as single Java object in the following way: a) If the query has only single column then that JDBC Column object is returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long object. b) If the query has more than one column then it will return a Map of that result. c) If the outputClass is set then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with. d) If the query resulted in more than one rows it throws an non-unique result exception."/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Enables or disables transaction. If enabled then if processing an exchange failed then the consumer break out processing any further exchanges to cause a rollback eager"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useIterator" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true."/>
         <uriParameter name="allowNamedParameters" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether to allow using named parameters in the queries."/>
         <uriParameter name="usePlaceholder" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries. This option is default true"/>
         <uriParameter name="parametersCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="producer,advanced" group="producer (advanced)" description="If set greater than zero then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API. This is useful if the JDBC vendor could not return correct parameters count then user may override instead."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If set will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing"/>
         <uriParameter name="templateOptions" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Configures the Spring JdbcTemplate with the key/values from the Map"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="Sets the maximum number of messages to poll"/>
         <uriParameter name="placeholder" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="#" label="advanced" group="advanced" description="Specifies a character that will be replaced to in SQL query. Notice that it is simple String.replaceAll() operation and no SQL parsing is involved (quoted strings will also change)."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file."/>
         <uriParameter name="onConsumeBatchComplete" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="After processing the entire batch this query can be executed to bulk update rows etc. The query cannot have parameters."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="batch" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Enables or disables batch mode"/>
         <uriParameter name="routeEmptyResultSet" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Sets whether empty resultset should be allowed to be sent to the next hop. Defaults to false. So the empty resultset will be filtered out."/>
         <uriParameter name="alwaysPopulateStatement" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer,advanced" group="producer (advanced)" description="If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there is 1 or more expected parameters to be set; for example this avoids reading the message body/headers for SQL queries with no parameters."/>
         <uriParameter name="separator" type="string" javaType="char" kind="parameter" deprecated="false" defaultValue="," group="common" description="The separator to use when parameter values is taken from message body (if the body is a String type) to be inserted at placeholders. Notice if you use named parameters then a Map type is used instead. The default value is comma."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="processingStrategy" type="object" javaType="org.apache.camel.component.sql.SqlProcessingStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch."/>
         <uriParameter name="prepareStatementStrategy" type="object" javaType="org.apache.camel.component.sql.SqlPrepareStatementStrategy" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="outputHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Store the query result in a header instead of the message body. By default outputHeader == null and the query result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the query result and the original message body is preserved."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="expectedUpdateCount" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Sets an expected update count to validate when using onConsume."/>
         <uriParameter name="outputClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Specify the full package and class name to use as conversion when outputType=SelectOne."/>
         <uriParameter name="dataSource" type="object" javaType="javax.sql.DataSource" kind="parameter" deprecated="false" group="common" description="Sets the DataSource to use to communicate with the database."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>timer</id>
      <tags>
         <tag>core</tag>
         <tag>scheduling</tag>
      </tags>
      <title>Timer</title>
      <description>The timer component is used for generating message exchanges when a timer fires.</description>
      <syntax>timer:timerName</syntax>
      <class>org.apache.camel.component.timer.TimerComponent</class>
      <kind>component</kind>
      <consumerOnly>true</consumerOnly>
      <scheme>timer</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="period" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" group="consumer" description="If greater than 0 generate periodic events every period milliseconds. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="pattern" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows you to specify a custom Date pattern to use for setting the time option using URI syntax."/>
         <uriParameter name="daemon" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Specifies whether or not the thread associated with the timer endpoint runs as a daemon. The default value is true."/>
         <uriParameter name="timer" type="object" javaType="java.util.Timer" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom Timer"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" group="consumer" description="The number of milliseconds to wait before the first event is generated. Should not be used in conjunction with the time option. The default value is 1000. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="fixedRate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="consumer" description="Events take place at approximately regular intervals separated by the specified period."/>
         <uriParameter name="timerName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="consumer" description="The name of the timer"/>
         <uriParameter name="time" type="string" javaType="java.util.Date" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A java.util.Date the first event should be generated. If using the URI the pattern expected is: yyyy-MM-dd HH:mm:ss or yyyy-MM-dd&apos;T&apos;HH:mm:ss."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="repeatCount" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="0" group="consumer" description="Specifies a maximum limit of number of fires. So if you set it to 1 the timer will only fire once. If you set it to 5 it will only fire five times. A value of zero or negative means fire forever."/>
      </uriParameters>
   </component>
   <component>
      <id>git</id>
      <tags>
         <tag>file</tag>
      </tags>
      <title>Git</title>
      <description>The git component is used for working with git repositories.</description>
      <syntax>git:localPath</syntax>
      <class>org.apache.camel.component.git.GitComponent</class>
      <kind>component</kind>
      <scheme>git</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-git-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="remotePath" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The remote repository path"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="branchName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The branch name to work on"/>
         <uriParameter name="tagName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The tag name to work on"/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.git.consumer.GitType" kind="parameter" choice="commit,tag,branch" deprecated="false" label="consumer" group="consumer" description="The consumer type"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Remote repository password"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="localPath" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Local repository path"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="clone,init,add,remove,commit,commitAll,createBranch,deleteBranch,createTag,deleteTag,status,log,push,pull,showBranches,cherryPick" deprecated="false" label="producer" group="producer" description="The operation to do on the repository"/>
         <uriParameter name="remoteName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="The remote repository name to use in particular operation like pull"/>
         <uriParameter name="username" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Remote repository username"/>
      </uriParameters>
   </component>
   <component>
      <id>aws-sdb</id>
      <tags>
         <tag>cloud</tag>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>AWS SimpleDB</title>
      <description>The aws-sdb component is for storing and retrieving data from/to Amazon&apos;s SDB service.</description>
      <syntax>aws-sdb:domainName</syntax>
      <class>org.apache.camel.component.aws.sdb.SdbComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>aws-sdb</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-aws-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="proxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="To define a proxy port when instantiating the SQS client"/>
         <uriParameter name="amazonSDBClient" type="object" javaType="com.amazonaws.services.simpledb.AmazonSimpleDB" kind="parameter" deprecated="false" group="producer" description="To use the AmazonSimpleDB as the client"/>
         <uriParameter name="secretKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Secret Key"/>
         <uriParameter name="accessKey" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Amazon AWS Access Key"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="domainName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The name of the domain currently worked with."/>
         <uriParameter name="consistentRead" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Determines whether or not strong consistency should be enforced when data is read."/>
         <uriParameter name="maxNumberOfDomains" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" group="producer" description="The maximum number of domain names you want returned. The range is 1 to 100."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.aws.sdb.SdbOperations" kind="parameter" choice="BatchDeleteAttributes,BatchPutAttributes,DeleteAttributes,DeleteDomain,DomainMetadata,GetAttributes,ListDomains,PutAttributes,Select" deprecated="false" defaultValue="PutAttributes" group="producer" description="Operation to perform"/>
         <uriParameter name="proxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To define a proxy host when instantiating the SQS client"/>
         <uriParameter name="amazonSdbEndpoint" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The region with which the AWS-SDB client wants to work with."/>
      </uriParameters>
   </component>
   <component>
      <id>krati</id>
      <tags>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>Krati</title>
      <description>The krati allows the use krati datastores and datasets inside Camel.</description>
      <syntax>krati:path</syntax>
      <class>org.apache.camel.component.krati.KratiComponent</class>
      <kind>component</kind>
      <scheme>krati</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-krati-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="hashFunction" type="object" javaType="krati.util.HashFunction&lt;byte[]&gt;" kind="parameter" deprecated="false" group="common" description="The hash function to use."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="initialCapacity" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="100" group="common" description="The inital capcity of the store."/>
         <uriParameter name="segmentFileSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="64" group="common" description="Data store segments size in MB."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="keySerializer" type="object" javaType="krati.io.Serializer&lt;java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="The serializer that will be used to serialize the key."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Path of the datastore is the relative path of the folder that krati will use for its datastore."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="The maximum number of messages which can be received in one poll. This can be used to avoid reading in too much data and taking up too much memory."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="value" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The Value."/>
         <uriParameter name="key" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The key."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="valueSerializer" type="object" javaType="krati.io.Serializer&lt;java.lang.Object&gt;" kind="parameter" deprecated="false" group="common" description="The serializer that will be used to serialize the value."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="segmentFactory" type="object" javaType="krati.core.segment.SegmentFactory" kind="parameter" deprecated="false" group="common" description="Sets the segment factory of the target store."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="operation" type="string" javaType="java.lang.String" kind="parameter" choice="CamelKratiPut,CamelKratiGet,CamelKratiDelete,CamelKratiDeleteAll" deprecated="false" label="producer" group="producer" description="Specifies the type of operation that will be performed to the datastore."/>
      </uriParameters>
   </component>
   <component>
      <id>jcache</id>
      <tags>
         <tag>cache</tag>
         <tag>datagrid</tag>
         <tag>clustering</tag>
      </tags>
      <title>JCache</title>
      <description>The jcache component enables you to perform caching operations using JSR107/JCache as cache implementation.</description>
      <syntax>jcache:cacheName</syntax>
      <class>org.apache.camel.component.jcache.JCacheComponent</class>
      <kind>component</kind>
      <scheme>jcache</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jcache-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="cacheWriterFactory" type="object" javaType="javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The CacheWriter factory"/>
         <uriParameter name="expiryPolicyFactory" type="object" javaType="javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The ExpiryPolicy factory"/>
         <uriParameter name="writeThrough" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If write-through caching should be used"/>
         <uriParameter name="filteredEvents" type="string" javaType="java.util.List&lt;javax.cache.event.EventType&gt;" kind="parameter" choice="CREATED,UPDATED,REMOVED,EXPIRED" deprecated="false" label="consumer" group="consumer" description="Events a consumer should filter. If using filteredEvents option then eventFilters one will be ignored"/>
         <uriParameter name="statisticsEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether statistics gathering is enabled"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="if the the event listener should block the thread causing the event"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="lookupProviders" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Configure if a camel-cache should try to find implementations of jcache api in runtimes like OSGi."/>
         <uriParameter name="storeByValue" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="If cache should use store-by-value or store-by-reference semantics"/>
         <uriParameter name="cachingProvider" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" required="true" label="advanced" group="advanced" description="The fully qualified class name of the javax.cache.spi.CachingProvider"/>
         <uriParameter name="configurationUri" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="An implementation specific URI for the CacheManager"/>
         <uriParameter name="cacheConfigurationProperties" type="object" javaType="java.util.Properties" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The Properties for the javax.cache.spi.CachingProvider to create the CacheManager"/>
         <uriParameter name="eventFilters" type="array" javaType="java.util.List&lt;javax.cache.event.CacheEntryEventFilter&gt;" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="The CacheEntryEventFilter. If using eventFilters option then filteredEvents one will be ignored"/>
         <uriParameter name="cacheConfiguration" type="object" javaType="javax.cache.configuration.Configuration" kind="parameter" deprecated="false" label="advanced" group="advanced" description="A Configuration for the Cache"/>
         <uriParameter name="cacheName" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="the cache name"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="managementEnabled" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether management gathering is enabled"/>
         <uriParameter name="oldValueRequired" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="if the old value is required for events"/>
         <uriParameter name="cacheLoaderFactory" type="object" javaType="javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="The CacheLoader factory"/>
         <uriParameter name="action" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="To configure using a cache operation by default. If an operation in the message header then the operation from the header takes precedence."/>
         <uriParameter name="createCacheIfNotExists" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Configure if a cache need to be created if it does exist or can&apos;t be pre-configured."/>
         <uriParameter name="readThrough" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="If read-through caching should be used"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>jpa</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>JPA</title>
      <description>The jpa component enables you to store and retrieve Java objects from databases using JPA.</description>
      <syntax>jpa:entityType</syntax>
      <class>org.apache.camel.component.jpa.JpaComponent</class>
      <kind>component</kind>
      <scheme>jpa</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jpa-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="entityManagerFactory" type="object" javaType="javax.persistence.EntityManagerFactory" kind="property" deprecated="false" description="To use the EntityManagerFactory. This is strongly recommended to configure."/>
         <componentProperty name="joinTransaction" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="The camel-jpa component will join transaction by default. You can use this option to turn this off for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent instead of having to set it on all endpoints."/>
         <componentProperty name="transactionManager" type="object" javaType="org.springframework.transaction.PlatformTransactionManager" kind="property" deprecated="false" description="To use the PlatformTransactionManager for managing transactions."/>
         <componentProperty name="sharedEntityManager" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="maximumResults" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="consumer" group="consumer" description="Set the maximum number of results to retrieve on the Query."/>
         <uriParameter name="preDeleteHandler" type="object" javaType="org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom Pre-DeleteHandler to delete the row after the consumer has read the entity."/>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="deleteHandler" type="object" javaType="org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom DeleteHandler to delete the row after the consumer is done processing the exchange"/>
         <uriParameter name="transacted" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Whether to run the consumer in transacted mode by which all messages will either commit or rollback when the entire batch has been processed. The default behavior (false) is to commit all the previously successfully processed messages and only rollback the last failed message."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="namedQuery" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a named query when consuming data."/>
         <uriParameter name="sharedEntityManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to use Spring&apos;s SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager."/>
         <uriParameter name="lockModeType" type="string" javaType="javax.persistence.LockModeType" kind="parameter" choice="READ,WRITE,OPTIMISTIC,OPTIMISTIC_FORCE_INCREMENT,PESSIMISTIC_READ,PESSIMISTIC_WRITE,PESSIMISTIC_FORCE_INCREMENT,NONE" deprecated="false" defaultValue="PESSIMISTIC_WRITE" label="consumer" group="consumer" description="To configure the lock mode on the consumer."/>
         <uriParameter name="remove" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Indicates to use entityManager.remove(entity)."/>
         <uriParameter name="entityManagerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Additional properties for the entity manager to use."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="maxMessagesPerPoll" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer" group="consumer" description="An integer value to define the maximum number of messages to gather per poll. By default no maximum is set. Can be used to avoid polling many thousands of messages when starting up the server. Set a value of 0 or negative to disable."/>
         <uriParameter name="skipLockedEntity" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="To configure whether to use NOWAIT on lock and silently skip the entity."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="persistenceUnit" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="camel" required="true" group="common" description="The JPA persistence unit used by default."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="usePersist" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Indicates to use entityManager.persist(entity) instead of entityManager.merge(entity). Note: entityManager.persist(entity) doesn&apos;t work for detached entities (where the EntityManager has to execute an UPDATE instead of an INSERT query)!"/>
         <uriParameter name="entityType" type="string" javaType="java.lang.Class&lt;?&gt;" kind="path" deprecated="false" required="true" group="common" description="The JPA annotated class to use as entity."/>
         <uriParameter name="query" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom query when consuming data."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="usePassedInEntityManager" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If set to true then Camel will use the EntityManager from the header JpaConstants.ENTITYMANAGER instead of the configured entity manager on the component/endpoint. This allows end users to control which entity manager will be in use."/>
         <uriParameter name="nativeQuery" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="To use a custom native query when consuming data. You may want to use the option consumer.resultClass also when using native queries."/>
         <uriParameter name="consumeLockEntity" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="Specifies whether or not to set an exclusive lock on each entity bean while processing the results from polling."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="joinTransaction" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="The camel-jpa component will join transaction by default. You can use this option to turn this off for example if you use LOCAL_RESOURCE and join transaction doesn&apos;t work with your JPA provider. This option can also be set globally on the JpaComponent instead of having to set it on all endpoints."/>
         <uriParameter name="resultClass" type="string" javaType="java.lang.Class&lt;?&gt;" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Defines the type of the returned payload (we will call entityManager.createNativeQuery(nativeQuery resultClass) instead of entityManager.createNativeQuery(nativeQuery)). Without this option we will return an object array. Only has an affect when using in conjunction with native query when consuming data."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="consumeDelete" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer" group="consumer" description="If true the entity is deleted after it is consumed; if false the entity is not deleted."/>
         <uriParameter name="parameters" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer" group="consumer" description="This key/value mapping is used for building the query parameters. It&apos;s is expected to be of the generic type java.util.Map where the keys are the named parameters of a given JPA query and the values are their corresponding effective values you want to select for."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="flushOnSend" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer" group="producer" description="Flushes the EntityManager after the entity bean has been persisted."/>
      </uriParameters>
   </component>
   <component>
      <id>mongodb</id>
      <tags>
         <tag>database</tag>
         <tag>nosql</tag>
      </tags>
      <title>MongoDB</title>
      <description>Component for working with documents stored in MongoDB database.</description>
      <syntax>mongodb:connectionBean</syntax>
      <class>org.apache.camel.component.mongodb.MongoDbComponent</class>
      <kind>component</kind>
      <scheme>mongodb</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mongodb-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="connectionBean" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Name of com.mongodb.Mongo to use."/>
         <uriParameter name="writeResultAsHeader" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="In write operations it determines whether instead of returning WriteResult as the body of the OUT message we transfer the IN message to the OUT and attach the WriteResult as a header."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="tailTrackDb" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="tail" group="tail" description="Indicates what database the tail tracking mechanism will persist to. If not specified the current database will be picked by default. Dynamicity will not be taken into account even if enabled i.e. the tail tracking database will not vary past endpoint initialisation."/>
         <uriParameter name="collectionIndex" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the collection index (JSON FORMAT : field1 : order1 field2 : order2)"/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="outputType" type="string" javaType="org.apache.camel.component.mongodb.MongoDbOutputType" kind="parameter" choice="DBObjectList,DBObject,DBCursor" deprecated="false" group="common" description="Convert the output of the producer to the selected type : DBObjectList DBObject or DBCursor. DBObjectList or DBObject applies to findAll. DBCursor applies to all other operations."/>
         <uriParameter name="writeConcern" type="string" javaType="com.mongodb.WriteConcern" kind="parameter" choice="ACKNOWLEDGED,W1,W2,W3,UNACKNOWLEDGED,JOURNALED,MAJORITY,SAFE" deprecated="false" defaultValue="ACKNOWLEDGED" group="common" description="Set the WriteConcern for write operations on MongoDB using the standard ones. Resolved from the fields of the WriteConcern class by calling the link WriteConcernvalueOf(String) method."/>
         <uriParameter name="persistentTailTracking" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="tail" group="tail" description="Enable persistent tail tracking which is a mechanism to keep track of the last consumed message across system restarts. The next time the system is up the endpoint will recover the cursor from the point where it last stopped slurping records."/>
         <uriParameter name="collection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of the MongoDB collection to bind to this endpoint"/>
         <uriParameter name="persistentId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="tail" group="tail" description="One tail tracking collection can host many trackers for several tailable consumers. To keep them separate each tracker should have its own unique persistentId."/>
         <uriParameter name="tailTrackCollection" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="tail" group="tail" description="Collection where tail tracking information will be persisted. If not specified link MongoDbTailTrackingConfigDEFAULT_COLLECTION will be used by default."/>
         <uriParameter name="database" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="Sets the name of the MongoDB database to target"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="dynamicity" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether this endpoint will attempt to dynamically resolve the target database and collection from the incoming Exchange properties. Can be used to override at runtime the database and collection specified on the otherwise static endpoint URI. It is disabled by default to boost performance. Enabling it will take a minimal performance hit."/>
         <uriParameter name="tailTrackField" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="tail" group="tail" description="Field where the last tracked value will be placed. If not specified link MongoDbTailTrackingConfigDEFAULT_FIELD will be used by default."/>
         <uriParameter name="tailTrackIncreasingField" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="tail" group="tail" description="Correlation field in the incoming record which is of increasing nature and will be used to position the tailing cursor every time it is generated. The cursor will be (re)created with a query of type: tailTrackIncreasingField lastValue (possibly recovered from persistent tail tracking). Can be of type Integer Date String etc. NOTE: No support for dot notation at the current time so the field should be at the top level of the document."/>
         <uriParameter name="cursorRegenerationDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="advanced" group="advanced" description="MongoDB tailable cursors will block until new data arrives. If no new data is inserted after some time the cursor will be automatically freed and closed by the MongoDB server. The client is expected to regenerate the cursor if needed. This value specifies the time to wait before attempting to fetch a new cursor and if the attempt fails how long before the next attempt is made. Default value is 1000ms."/>
         <uriParameter name="readPreference" type="object" javaType="com.mongodb.ReadPreference" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Sets a MongoDB ReadPreference on the Mongo connection. Read preferences set directly on the connection will be overridden by this setting. The link com.mongodb.ReadPreferencevalueOf(String) utility method is used to resolve the passed readPreference value. Some examples for the possible values are nearest primary or secondary etc."/>
         <uriParameter name="operation" type="string" javaType="org.apache.camel.component.mongodb.MongoDbOperation" kind="parameter" choice="findById,findOneByQuery,findAll,insert,save,update,remove,aggregate,getDbStats,getColStats,count,command" deprecated="false" group="common" description="Sets the operation this endpoint will execute against MongoDB. For possible values see MongoDbOperation."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="createCollection" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Create collection during initialisation if it doesn&apos;t exist. Default is true."/>
      </uriParameters>
   </component>
   <component>
      <id>rest</id>
      <tags>
         <tag>core</tag>
         <tag>rest</tag>
      </tags>
      <title>REST</title>
      <description>The rest component is used for either hosting REST services (consumer) or calling external REST services (producer).</description>
      <syntax>rest:method:path:uriTemplate</syntax>
      <class>org.apache.camel.component.rest.RestComponent</class>
      <kind>component</kind>
      <scheme>rest</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="host" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Host and port of HTTP service to use (override host in swagger schema)"/>
         <componentProperty name="componentName" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory (consumer) or org.apache.camel.spi.RestProducerFactory (producer) is registered in the registry. If either one is found then that is being used."/>
         <componentProperty name="apiDoc" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The swagger api doc resource to use. The resource is loaded from classpath by default and must be in JSon format."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="method" type="string" javaType="java.lang.String" kind="path" choice="get,post,put,delete,patch,head,trace,connect,options" deprecated="false" required="true" label="common" group="common" description="HTTP method to use."/>
         <uriParameter name="uriTemplate" type="string" javaType="java.lang.String" kind="path" deprecated="false" label="common" group="common" description="The uri template"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="description" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="Human description to document this REST service"/>
         <uriParameter name="outType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="To declare the outgoing POJO binding type as a FQN class name"/>
         <uriParameter name="path" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" label="common" group="common" description="The base path"/>
         <uriParameter name="routeId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Name of the route this REST services creates"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="queryParameters" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Query parameters for the HTTP service to call"/>
         <uriParameter name="produces" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Media type such as: &apos;text/xml&apos; or &apos;application/json&apos; this REST service returns."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="Host and port of HTTP service to use (override host in swagger schema)"/>
         <uriParameter name="componentName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found then that is being used."/>
         <uriParameter name="inType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="To declare the incoming POJO binding type as a FQN class name"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="consumes" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="common" group="common" description="Media type such as: &apos;text/xml&apos; or &apos;application/json&apos; this REST service accepts. By default we accept all kinds of types."/>
         <uriParameter name="apiDoc" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The swagger api doc resource to use. The resource is loaded from classpath by default and must be in JSon format."/>
      </uriParameters>
   </component>
   <component>
      <id>flatpack</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Flatpack</title>
      <description>The flatpack component supports fixed width and delimited file parsing via the FlatPack library.</description>
      <syntax>flatpack:type:resourceUri</syntax>
      <class>org.apache.camel.component.flatpack.FlatpackComponent</class>
      <kind>component</kind>
      <scheme>flatpack</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-flatpack-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="splitRows" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Sets the Component to send each row as a separate exchange once parsed"/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="type" type="string" javaType="org.apache.camel.component.flatpack.FlatpackType" kind="path" choice="fixed,delim" deprecated="false" required="false" group="common" description="Whether to use fixed or delimiter"/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="delimiter" type="string" javaType="char" kind="parameter" deprecated="false" defaultValue="," group="common" description="The default character delimiter for delimited files."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
         <uriParameter name="allowShortLines" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Allows for lines to be shorter than expected and ignores the extra characters"/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="URL for loading the flatpack mapping file from classpath or file system"/>
         <uriParameter name="ignoreFirstRecord" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Whether the first line is ignored for delimited files (for the column headers)."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="ignoreExtraColumns" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Allows for lines to be longer than expected and ignores the extra characters"/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="textQualifier" type="string" javaType="char" kind="parameter" deprecated="false" group="common" description="The text qualifier for delimited files."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>telegram</id>
      <tags>
         <tag>chat</tag>
      </tags>
      <title>Telegram</title>
      <description>The telegram component provides access to the Telegram Bot API.</description>
      <syntax>telegram:type/authorizationToken</syntax>
      <class>org.apache.camel.component.telegram.TelegramComponent</class>
      <kind>component</kind>
      <scheme>telegram</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-telegram-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="authorizationToken" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="The default Telegram authorization token to be used when the information is not provided in the endpoints."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="backoffMultiplier" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured."/>
         <uriParameter name="chatId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="producer" group="producer" description="The identifier of the chat that will receive the produced messages. Chat ids can be first obtained from incoming messages (eg. when a telegram user starts a conversation with a bot its client sends automatically a &apos;/start&apos; message containing the chat id). It is an optional parameter as the chat id can be set dynamically for each outgoing message (using body or headers)."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="sendEmptyMessageWhenIdle" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead."/>
         <uriParameter name="schedulerProperties" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.Object&gt;" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="initialDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="1000" label="consumer,scheduler" group="scheduler" description="Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="type" type="string" javaType="java.lang.String" kind="path" choice="bots" deprecated="false" required="true" group="common" description="The endpoint type. Currently only the &apos;bots&apos; type is supported."/>
         <uriParameter name="timeout" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="30" label="consumer" group="consumer" description="Timeout in seconds for long polling. Put 0 for short polling or a bigger number for long polling. Long polling produces shorter response time."/>
         <uriParameter name="backoffIdleThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent idle polls that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="authorizationToken" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The authorization token for using the bot (ask the BotFather) eg. 654321531:HGF_dTra456323dHuOedsE343211fqr3t-H."/>
         <uriParameter name="scheduler" type="string" javaType="org.apache.camel.spi.ScheduledPollConsumerScheduler" kind="parameter" choice="none,spring,quartz2" deprecated="false" defaultValue="none" label="consumer,scheduler" group="scheduler" description="To use a cron scheduler from either camel-spring or camel-quartz2 component"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="delay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="500" label="consumer,scheduler" group="scheduler" description="Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour)."/>
         <uriParameter name="useFixedDelay" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details."/>
         <uriParameter name="pollStrategy" type="object" javaType="org.apache.camel.spi.PollingConsumerPollStrategy" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel."/>
         <uriParameter name="runLoggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="TRACE" label="consumer,scheduler" group="scheduler" description="The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that."/>
         <uriParameter name="startScheduler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,scheduler" group="scheduler" description="Whether the scheduler should be auto started."/>
         <uriParameter name="backoffErrorThreshold" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" label="consumer,scheduler" group="scheduler" description="The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in."/>
         <uriParameter name="limit" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="100" label="consumer" group="consumer" description="Limit on the number of updates that can be received in a single polling request."/>
         <uriParameter name="greedy" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer,scheduler" group="scheduler" description="If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages."/>
         <uriParameter name="scheduledExecutorService" type="object" javaType="java.util.concurrent.ScheduledExecutorService" kind="parameter" deprecated="false" label="consumer,scheduler" group="scheduler" description="Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="timeUnit" type="string" javaType="java.util.concurrent.TimeUnit" kind="parameter" choice="NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS" deprecated="false" defaultValue="MILLISECONDS" label="consumer,scheduler" group="scheduler" description="Time unit for initialDelay and delay options."/>
      </uriParameters>
   </component>
   <component>
      <id>velocity</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>Velocity</title>
      <description>Transforms the message using a Velocity template.</description>
      <syntax>velocity:resourceUri</syntax>
      <class>org.apache.camel.component.velocity.VelocityComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>velocity</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-velocity-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="velocityEngine" type="object" javaType="org.apache.velocity.app.VelocityEngine" kind="property" deprecated="false" description="To use the VelocityEngine otherwise a new engine is created"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="propertiesFile" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="The URI of the properties file which is used for VelocityEngine initialization."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Character encoding of the resource content."/>
         <uriParameter name="loaderCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Enables / disables the velocity resource loader cache which is enabled by default"/>
      </uriParameters>
   </component>
   <component>
      <id>smpp</id>
      <tags>
         <tag>mobile</tag>
      </tags>
      <title>SMPP</title>
      <description>To send and receive SMS using a SMSC (Short Message Service Center).</description>
      <syntax>smpp:host:port</syntax>
      <class>org.apache.camel.component.smpp.SmppComponent</class>
      <kind>component</kind>
      <scheme>smpp</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-smpp-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.smpp.SmppConfiguration" kind="property" deprecated="false" description="To use the shared SmppConfiguration as configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="serviceType" type="string" javaType="java.lang.String" kind="parameter" choice="CMT,CPT,VMN,VMA,WAP,USSD" deprecated="false" defaultValue="CMT" label="producer" group="producer" description="The service type parameter can be used to indicate the SMS Application service associated with the message. The following generic service_types are defined: CMT: Cellular Messaging CPT: Cellular Paging VMN: Voice Mail Notification VMA: Voice Mail Alerting WAP: Wireless Application Protocol USSD: Unstructured Supplementary Services Data"/>
         <uriParameter name="lazySessionCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Sessions can be lazily created to avoid exceptions if the SMSC is not available when the Camel producer is started. Camel will check the in message headers &apos;CamelSmppSystemId&apos; and &apos;CamelSmppPassword&apos; of the first exchange. If they are present Camel will use these data to connect to the SMSC."/>
         <uriParameter name="initialReconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="common" group="common" description="Defines the initial delay in milliseconds after the consumer/producer tries to reconnect to the SMSC after the connection was lost."/>
         <uriParameter name="destAddrTon" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME destination address parameters. Only for SubmitSm SubmitMulti CancelSm and DataSm. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="httpProxyHost" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If you need to tunnel SMPP through a HTTP proxy set this attribute to the hostname or ip address of your HTTP proxy."/>
         <uriParameter name="numberingPlanIndicator" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the numeric plan indicator (NPI) to be used in the SME. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="alphabet" type="string" javaType="byte" kind="parameter" choice="0,4,8" deprecated="false" defaultValue="0" label="codec" group="codec" description="Defines encoding of data according the SMPP 3.4 specification section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2 Alphabet"/>
         <uriParameter name="destAddrNpi" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME destination address parameters. Only for SubmitSm SubmitMulti CancelSm and DataSm. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="password" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="security" group="security" description="The password for connecting to SMSC server."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="localhost" group="common" description="Hostname for the SMSC server to use."/>
         <uriParameter name="systemType" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="cp" label="common" group="common" description="This parameter is used to categorize the type of ESME (External Short Message Entity) that is binding to the SMSC (max. 13 characters)."/>
         <uriParameter name="sourceAddr" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="1616" label="producer" group="producer" description="Defines the address of SME (Short Message Entity) which originated this message."/>
         <uriParameter name="sourceAddrNpi" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,6,8,9,10,13,18" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the numeric plan indicator (NPI) to be used in the SME originator address parameters. The following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined by WAP Forum)"/>
         <uriParameter name="systemId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="smppclient" label="security" group="security" description="The system id (username) for connecting to SMSC server."/>
         <uriParameter name="addressRange" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="consumer" group="consumer" description="You can specify the address range for the SmppConsumer as defined in section 5.2.7 of the SMPP 3.4 specification. The SmppConsumer will receive messages only from SMSC&apos;s which target an address (MSISDN or IP address) within this range."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="sessionStateListener" type="object" javaType="org.jsmpp.session.SessionStateListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="You can refer to a org.jsmpp.session.SessionStateListener in the Registry to receive callbacks when the session state changed."/>
         <uriParameter name="usingSSL" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="security" group="security" description="Whether using SSL with the smpps protocol"/>
         <uriParameter name="registeredDelivery" type="string" javaType="byte" kind="parameter" choice="0,1,2" deprecated="false" defaultValue="0" label="producer" group="producer" description="Is used to request an SMSC delivery receipt and/or SME originated acknowledgements. The following values are defined: 0: No SMSC delivery receipt requested. 1: SMSC delivery receipt requested where final delivery outcome is success or failure. 2: SMSC delivery receipt requested where the final delivery outcome is delivery failure."/>
         <uriParameter name="httpProxyPort" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="3128" label="proxy" group="proxy" description="If you need to tunnel SMPP through a HTTP proxy set this attribute to the port of your HTTP proxy."/>
         <uriParameter name="reconnectDelay" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="5000" label="common" group="common" description="Defines the interval in milliseconds between the reconnect attempts if the connection to the SMSC was lost and the previous was not succeed."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="ISO-8859-1" label="codec" group="codec" description="Defines the encoding scheme of the short message user data. Only for SubmitSm ReplaceSm and SubmitMulti."/>
         <uriParameter name="httpProxyPassword" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If your HTTP proxy requires basic authentication set this attribute to the password required for your HTTP proxy."/>
         <uriParameter name="transactionTimer" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="10000" label="advanced" group="advanced" description="Defines the maximum period of inactivity allowed after a transaction after which an SMPP entity may assume that the session is no longer active. This timer may be active on either communicating SMPP entity (i.e. SMSC or ESME)."/>
         <uriParameter name="splittingPolicy" type="string" javaType="org.apache.camel.component.smpp.SmppSplittingPolicy" kind="parameter" choice="ALLOW,REJECT,TRUNCATE" deprecated="false" defaultValue="ALLOW" group="common" description="You can specify a policy for handling long messages: ALLOW - the default long messages are split to 140 bytes per message TRUNCATE - long messages are split and only the first fragment will be sent to the SMSC. Some carriers drop subsequent fragments so this reduces load on the SMPP connection sending parts of a message that will never be delivered. REJECT - if a message would need to be split it is rejected with an SMPP NegativeResponseException and the reason code signifying the message is too long."/>
         <uriParameter name="protocolId" type="integer" javaType="byte" kind="parameter" deprecated="false" defaultValue="0" label="producer" group="producer" description="The protocol id"/>
         <uriParameter name="proxyHeaders" type="object" javaType="java.util.Map&lt;java.lang.String,java.lang.String&gt;" kind="parameter" deprecated="false" label="proxy" group="proxy" description="These headers will be passed to the proxy server while establishing the connection."/>
         <uriParameter name="httpProxyUsername" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="proxy" group="proxy" description="If your HTTP proxy requires basic authentication set this attribute to the username required for your HTTP proxy."/>
         <uriParameter name="typeOfNumber" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" defaultValue="2775" group="common" description="Port number for the SMSC server to use."/>
         <uriParameter name="dataCoding" type="integer" javaType="byte" kind="parameter" deprecated="false" defaultValue="0" label="codec" group="codec" description="Defines the data coding according the SMPP 3.4 specification section 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2 (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990)"/>
         <uriParameter name="enquireLinkTimer" type="integer" javaType="java.lang.Integer" kind="parameter" deprecated="false" defaultValue="5000" label="advanced" group="advanced" description="Defines the interval in milliseconds between the confidence checks. The confidence check is used to test the communication path between an ESME and an SMSC."/>
         <uriParameter name="destAddr" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="1717" label="producer" group="producer" description="Defines the destination SME address. For mobile terminated messages this is the directory number of the recipient MS. Only for SubmitSm SubmitMulti CancelSm and DataSm."/>
         <uriParameter name="replaceIfPresentFlag" type="string" javaType="byte" kind="parameter" choice="0,1" deprecated="false" defaultValue="0" label="producer" group="producer" description="Used to request the SMSC to replace a previously submitted message that is still pending delivery. The SMSC will replace an existing message provided that the source address destination address and service type match the same fields in the new message. The following replace if present flag values are defined: 0: Don&apos;t replace 1: Replace"/>
         <uriParameter name="priorityFlag" type="string" javaType="byte" kind="parameter" choice="0,1,2,3" deprecated="false" defaultValue="0" label="producer" group="producer" description="Allows the originating SME to assign a priority level to the short message. Only for SubmitSm and SubmitMulti. Four Priority Levels are supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level 2 priority 3: Level 3 (highest) priority"/>
         <uriParameter name="maxReconnect" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="2147483647" label="common" group="common" description="Defines the maximum number of attempts to reconnect to the SMSC if SMSC returns a negative bind response"/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="sourceAddrTon" type="string" javaType="byte" kind="parameter" choice="0,1,2,3,4,5,6" deprecated="false" defaultValue="0" label="producer" group="producer" description="Defines the type of number (TON) to be used in the SME originator address parameters. The following TON values are defined: 0: Unknown 1: International 2: National 3: Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated"/>
      </uriParameters>
   </component>
   <component>
      <id>string-template</id>
      <tags>
         <tag>transformation</tag>
      </tags>
      <title>String Template</title>
      <description>Transforms the message using a String template.</description>
      <syntax>string-template:resourceUri</syntax>
      <class>org.apache.camel.component.stringtemplate.StringTemplateComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>string-template</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stringtemplate-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="delimiterStop" type="string" javaType="char" kind="parameter" deprecated="false" defaultValue="&gt;" group="producer" description="The variable end delimiter"/>
         <uriParameter name="delimiterStart" type="string" javaType="char" kind="parameter" deprecated="false" defaultValue="&lt;" group="producer" description="The variable start delimiter"/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Sets whether to use resource content cache or not"/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Path to the resource or a reference to lookup a bean in the Registry to use as the resource"/>
      </uriParameters>
   </component>
   <component>
      <id>mina2</id>
      <tags>
         <tag>networking</tag>
         <tag>tcp</tag>
         <tag>udp</tag>
      </tags>
      <title>Mina2</title>
      <description>Socket level networking using TCP or UDP with the Apache Mina 2.x library.</description>
      <syntax>mina2:protocol:host:port</syntax>
      <class>org.apache.camel.component.mina2.Mina2Component</class>
      <kind>component</kind>
      <scheme>mina2</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-mina2-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.mina2.Mina2Configuration" kind="property" deprecated="false" description="To use the shared mina configuration."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="disconnect" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether or not to disconnect(close) from Mina session right after use. Can be used for both consumer and producer."/>
         <uriParameter name="lazySessionCreation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Sessions can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="disconnectOnNoReply" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled then this option dictates MinaConsumer if it should disconnect where there is no reply to send back."/>
         <uriParameter name="encoderMaxLineLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="-1" label="codec" group="codec" description="To set the textline protocol encoder max line length. By default the default value of Mina itself is used which are Integer.MAX_VALUE."/>
         <uriParameter name="sslContextParameters" type="object" javaType="org.apache.camel.util.jsse.SSLContextParameters" kind="parameter" deprecated="false" label="security" group="security" description="To configure SSL security."/>
         <uriParameter name="timeout" type="integer" javaType="long" kind="parameter" deprecated="false" defaultValue="30000" group="common" description="You can configure the timeout that specifies how long to wait for a response from a remote server. The timeout unit is in milliseconds so 60000 is 60 seconds."/>
         <uriParameter name="protocol" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Protocol to use"/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="autoStartTls" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="security" group="security" description="Whether to auto start SSL handshake."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Hostname to use. Use localhost or 0.0.0.0 for local server as consumer. For producer use the hostname or ip address of the remote server."/>
         <uriParameter name="noReplyLogLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="WARN" label="consumer,advanced" group="consumer (advanced)" description="If sync is enabled this option dictates MinaConsumer which logging level to use when logging a there is no reply to send back."/>
         <uriParameter name="transferExchange" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body Out body fault body In headers Out headers fault headers exchange properties exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."/>
         <uriParameter name="textline" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="codec" group="codec" description="Only used for TCP. If no codec is specified you can use this flag to indicate a text line based codec; if not specified or the value is false then Object Serialization is assumed over TCP."/>
         <uriParameter name="textlineDelimiter" type="string" javaType="org.apache.camel.component.mina2.Mina2TextLineDelimiter" kind="parameter" choice="DEFAULT,AUTO,UNIX,WINDOWS,MAC" deprecated="false" label="codec" group="codec" description="Only used for TCP and if textline=true. Sets the text line delimiter to use. If none provided Camel will use DEFAULT. This delimiter is used to mark the end of text."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="orderedThreadPoolExecutor" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="advanced" group="advanced" description="Whether to use ordered thread pool to ensure events are processed orderly on the same channel."/>
         <uriParameter name="filters" type="array" javaType="java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;" kind="parameter" deprecated="false" label="codec" group="codec" description="You can set a list of Mina IoFilters to use."/>
         <uriParameter name="encoding" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="codec" group="codec" description="You can configure the encoding (a charset name) to use for the TCP textline codec and the UDP protocol. If not provided Camel will use the JVM default Charset"/>
         <uriParameter name="sync" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="common" description="Setting to set endpoint as one-way or request-response."/>
         <uriParameter name="minaLogger" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="You can enable the Apache MINA logging filter. Apache MINA uses slf4j logging at INFO level to log all input and output."/>
         <uriParameter name="codec" type="object" javaType="org.apache.mina.filter.codec.ProtocolCodecFactory" kind="parameter" deprecated="false" label="codec" group="codec" description="To use a custom minda codec implementation."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="0" required="true" group="common" description="Port number"/>
         <uriParameter name="cachedAddress" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="producer,advanced" group="producer (advanced)" description="Whether to create the InetAddress once and reuse. Setting this to false allows to pickup DNS changes in the network."/>
         <uriParameter name="allowDefaultCodec" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" label="codec" group="codec" description="The mina component installs a default codec if both codec is null and textline is false. Setting allowDefaultCodec to false prevents the mina component from installing a default codec as the first element in the filter chain. This is useful in scenarios where another filter must be the first in the filter chain like the SSL filter."/>
         <uriParameter name="maximumPoolSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="16" label="advanced" group="advanced" description="Number of worker threads in the worker pool for TCP and UDP"/>
         <uriParameter name="clientMode" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="If the clientMode is true mina consumer will connect the address as a TCP client."/>
         <uriParameter name="decoderMaxLineLength" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="1024" label="codec" group="codec" description="To set the textline protocol decoder max line length. By default the default value of Mina itself is used which are 1024."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
      </uriParameters>
   </component>
   <component>
      <id>ganglia</id>
      <tags>
         <tag>monitoring</tag>
      </tags>
      <title>Ganglia</title>
      <description>The ganglia component is used for sending metrics to the Ganglia monitoring system.</description>
      <syntax>ganglia:host:port</syntax>
      <class>org.apache.camel.component.ganglia.GangliaComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>ganglia</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ganglia-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="configuration" type="object" javaType="org.apache.camel.component.ganglia.GangliaConfiguration" kind="property" deprecated="false" description="To use the shared configuration"/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="metricName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="metric" group="producer" description="The name to use for the metric."/>
         <uriParameter name="prefix" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Prefix the metric name with this string and an underscore."/>
         <uriParameter name="tmax" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="60" group="producer" description="Maximum time in seconds that the value can be considered current. After this Ganglia considers the value to have expired."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="spoofHostname" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Spoofing information IP:hostname"/>
         <uriParameter name="units" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Any unit of measurement that qualifies the metric e.g. widgets litres bytes. Do not include a prefix such as k (kilo) or m (milli) other tools may scale the units later. The value should be unscaled."/>
         <uriParameter name="slope" type="string" javaType="info.ganglia.gmetric4j.gmetric.GMetricSlope" kind="parameter" choice="ZERO,POSITIVE,NEGATIVE,BOTH" deprecated="false" defaultValue="BOTH" group="producer" description="The slope"/>
         <uriParameter name="type" type="string" javaType="info.ganglia.gmetric4j.gmetric.GMetricType" kind="parameter" choice="STRING,INT8,UINT8,INT16,UINT16,INT32,UINT32,FLOAT,DOUBLE" deprecated="false" defaultValue="STRING" group="producer" description="The type of value"/>
         <uriParameter name="ttl" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="5" group="producer" description="If using multicast set the TTL of the packets"/>
         <uriParameter name="dmax" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="Minumum time in seconds before Ganglia will purge the metric value if it expires. Set to 0 and the value will remain in Ganglia indefinitely until a gmond agent restart."/>
         <uriParameter name="mode" type="object" javaType="info.ganglia.gmetric4j.gmetric.GMetric.UDPAddressingMode" kind="parameter" deprecated="false" defaultValue="MULTICAST" group="producer" description="Send the UDP metric packets using MULTICAST or UNICAST"/>
         <uriParameter name="groupName" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" defaultValue="java" group="producer" description="The group that the metric belongs to."/>
         <uriParameter name="port" type="integer" javaType="int" kind="path" deprecated="false" defaultValue="8649" group="producer" description="Port for Ganglia server"/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" defaultValue="239.2.11.71" group="producer" description="Host name for Ganglia server"/>
         <uriParameter name="wireFormat31x" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Use the wire format of Ganglia 3.1.0 and later versions. Set this to false to use Ganglia 3.0.x or earlier."/>
      </uriParameters>
   </component>
   <component>
      <id>xslt</id>
      <tags>
         <tag>core</tag>
         <tag>transformation</tag>
      </tags>
      <title>XSLT</title>
      <description>Transforms the message using a XSLT template.</description>
      <syntax>xslt:resourceUri</syntax>
      <class>org.apache.camel.component.xslt.XsltComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>xslt</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="xmlConverter" type="object" javaType="org.apache.camel.converter.jaxp.XmlConverter" kind="property" deprecated="false" label="advanced" required="false" description="To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter"/>
         <componentProperty name="uriResolverFactory" type="object" javaType="org.apache.camel.component.xslt.XsltUriResolverFactory" kind="property" deprecated="false" label="advanced" required="false" description="To use a custom javax.xml.transform.URIResolver which depends on a dynamic endpoint resource URI or which is a subclass of XsltUriResolver. Do not use in combination with uriResolver. See also link setUriResolver(URIResolver)."/>
         <componentProperty name="contentCache" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="true" required="false" description="Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation."/>
         <componentProperty name="saxon" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath."/>
         <componentProperty name="uriResolver" type="object" javaType="javax.xml.transform.URIResolver" kind="property" deprecated="false" label="advanced" required="false" description="To use a custom javax.xml.transform.URIResolver. Do not use in combination with uriResolverFactory. See also link setUriResolverFactory(XsltUriResolverFactory)."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="converter" type="object" javaType="org.apache.camel.converter.jaxp.XmlConverter" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter"/>
         <uriParameter name="contentCache" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation."/>
         <uriParameter name="resourceUri" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="The name of the template to load from classpath or file system"/>
         <uriParameter name="saxon" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath."/>
         <uriParameter name="allowStAX" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether to allow using StAX as the javax.xml.transform.Source."/>
         <uriParameter name="deleteOutputFile" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="If you have output=file then this option dictates whether or not the output file should be deleted when the Exchange is done processing. For example suppose the output file is a temporary file then it can be a good idea to delete it after use."/>
         <uriParameter name="output" type="string" javaType="org.apache.camel.component.xslt.XsltOutput" kind="parameter" choice="string,bytes,DOM,file" deprecated="false" defaultValue="string" group="producer" description="Option to specify which output type to use. Possible values are: string bytes DOM file. The first three options are all in memory based where as file is streamed directly to a java.io.File. For file you must specify the filename in the IN header with the key Exchange.XSLT_FILE_NAME which is also CamelXsltFileName. Also any paths leading to the filename must be created beforehand otherwise an exception is thrown at runtime."/>
         <uriParameter name="errorListener" type="object" javaType="javax.xml.transform.ErrorListener" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows to configure to use a custom javax.xml.transform.ErrorListener. Beware when doing this then the default error listener which captures any errors or fatal errors and store information on the Exchange as properties is not in use. So only use this option for special use-cases."/>
         <uriParameter name="entityResolver" type="object" javaType="org.xml.sax.EntityResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom org.xml.sax.EntityResolver with javax.xml.transform.sax.SAXSource."/>
         <uriParameter name="saxonExtensionFunctions" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add camel-saxon to the classpath. The function is looked up in the registry where you can comma to separate multiple values to lookup."/>
         <uriParameter name="failOnNullBody" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="true" group="producer" description="Whether or not to throw an exception if the input body is null."/>
         <uriParameter name="transformerCacheSize" type="integer" javaType="int" kind="parameter" deprecated="false" defaultValue="0" group="producer" description="The number of javax.xml.transform.Transformer object that are cached for reuse to avoid calls to Template.newTransformer()."/>
         <uriParameter name="resultHandlerFactory" type="object" javaType="org.apache.camel.builder.xml.ResultHandlerFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="Allows you to use a custom org.apache.camel.builder.xml.ResultHandlerFactory which is capable of using custom org.apache.camel.builder.xml.ResultHandler types."/>
         <uriParameter name="transformerFactoryClass" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom XSLT transformer factory specified as a FQN class name"/>
         <uriParameter name="transformerFactory" type="object" javaType="javax.xml.transform.TransformerFactory" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom XSLT transformer factory"/>
         <uriParameter name="uriResolver" type="object" javaType="javax.xml.transform.URIResolver" kind="parameter" deprecated="false" label="advanced" group="advanced" description="To use a custom javax.xml.transform.URIResolver"/>
      </uriParameters>
   </component>
   <component>
      <id>sql-stored</id>
      <tags>
         <tag>database</tag>
         <tag>sql</tag>
      </tags>
      <title>SQL StoredProcedure</title>
      <description>Camel SQL support</description>
      <syntax>sql-stored:template</syntax>
      <class>org.apache.camel.component.sql.stored.SqlStoredComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>sql-stored</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sql-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="dataSource" type="object" javaType="javax.sql.DataSource" kind="property" deprecated="false" description="Sets the DataSource to use to communicate with the database."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="template" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="producer" description="Sets the StoredProcedure template to perform"/>
         <uriParameter name="noop" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="If set will ignore the results of the template and use the existing IN message as the OUT message for the continuation of processing"/>
         <uriParameter name="useMessageBodyForTemplate" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Whether to use the message body as the template and then headers for parameters. If this option is enabled then the template in the uri is not used."/>
         <uriParameter name="outputHeader" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="Store the template result in a header instead of the message body. By default outputHeader == null and the template result is stored in the message body any existing content in the message body is discarded. If outputHeader is set the value is used as the name of the header to store the template result and the original message body is preserved."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="batch" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="producer" group="producer" description="Enables or disables batch mode"/>
         <uriParameter name="dataSource" type="object" javaType="javax.sql.DataSource" kind="parameter" deprecated="false" group="producer" description="Sets the DataSource to use to communicate with the database."/>
      </uriParameters>
   </component>
   <component>
      <id>controlbus</id>
      <tags>
         <tag>core</tag>
         <tag>monitoring</tag>
      </tags>
      <title>Control Bus</title>
      <description>The controlbus component provides easy management of Camel applications based on the Control Bus EIP pattern.</description>
      <syntax>controlbus:command:language</syntax>
      <class>org.apache.camel.component.controlbus.ControlBusComponent</class>
      <kind>component</kind>
      <producerOnly>true</producerOnly>
      <scheme>controlbus</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="async" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="producer" description="Whether to execute the control bus task asynchronously. Important: If this option is enabled then any result from the task is not set on the Exchange. This is only possible if executing tasks synchronously."/>
         <uriParameter name="routeId" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="producer" description="To specify a route by its id. The special keyword current indicates the current route."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="action" type="string" javaType="java.lang.String" kind="parameter" choice="start,stop,suspend,resume,status" deprecated="false" group="producer" description="To denote an action that can be either: start stop or status. To either start or stop a route or to get the status of the route as output in the message body. You can use suspend and resume from Camel 2.11.1 onwards to either suspend or resume a route. And from Camel 2.11.1 onwards you can use stats to get performance statics returned in XML format; the routeId option can be used to define which route to get the performance stats for if routeId is not defined then you get statistics for the entire CamelContext."/>
         <uriParameter name="language" type="string" javaType="org.apache.camel.spi.Language" kind="path" choice="bean,constant,el,exchangeProperty,file,groovy,header,jsonpath,jxpath,mvel,ognl,ref,simple,spel,sql,terser,tokenize,xpath,xquery,xtokenize" deprecated="false" group="producer" description="Allows you to specify the name of a Language to use for evaluating the message body. If there is any result from the evaluation then the result is put in the message body."/>
         <uriParameter name="command" type="string" javaType="java.lang.String" kind="path" choice="route,language" deprecated="false" required="true" group="producer" description="Command can be either route or language"/>
         <uriParameter name="loggingLevel" type="string" javaType="org.apache.camel.LoggingLevel" kind="parameter" choice="TRACE,DEBUG,INFO,WARN,ERROR,OFF" deprecated="false" defaultValue="INFO" group="producer" description="Logging level used for logging when task is done or if any exceptions occurred during processing the task."/>
      </uriParameters>
   </component>
   <component>
      <id>properties</id>
      <tags>
         <tag>core</tag>
         <tag>endpoint</tag>
      </tags>
      <title>Properties</title>
      <description>The properties component is used for using property placeholders in endpoint uris.</description>
      <syntax>properties:key</syntax>
      <class>org.apache.camel.component.properties.PropertiesComponent</class>
      <kind>component</kind>
      <scheme>properties</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
         <componentProperty name="propertySuffix" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Optional suffix appended to property names before resolution."/>
         <componentProperty name="cache" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether or not to cache loaded properties. The default value is true."/>
         <componentProperty name="prefixToken" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the value of the prefix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_PREFIX_TOKEN)."/>
         <componentProperty name="initialProperties" type="object" javaType="java.util.Properties" kind="property" deprecated="false" description="Sets initial properties which will be used before any locations are resolved."/>
         <componentProperty name="systemPropertiesMode" type="integer" javaType="int" kind="property" deprecated="false" defaultValue="0" description="Sets the system property mode."/>
         <componentProperty name="encoding" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Encoding to use when loading properties file from the file system or classpath. If no encoding has been set then the properties files is loaded using ISO-8859-1 encoding (latin-1) as documented by link java.util.Propertiesload(java.io.InputStream)"/>
         <componentProperty name="propertiesResolver" type="object" javaType="org.apache.camel.component.properties.PropertiesResolver" kind="property" deprecated="false" description="To use a custom PropertiesResolver"/>
         <componentProperty name="propertiesParser" type="object" javaType="org.apache.camel.component.properties.PropertiesParser" kind="property" deprecated="false" description="To use a custom PropertiesParser"/>
         <componentProperty name="overrideProperties" type="object" javaType="java.util.Properties" kind="property" deprecated="false" description="Sets a special list of override properties that take precedence and will use first if a property exist."/>
         <componentProperty name="suffixToken" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Sets the value of the suffix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_SUFFIX_TOKEN)."/>
         <componentProperty name="ignoreMissingLocation" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="Whether to silently ignore if a location cannot be located such as a properties file not found."/>
         <componentProperty name="locations" type="array" javaType="java.lang.String[]" kind="property" deprecated="false" description="A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option."/>
         <componentProperty name="location" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option."/>
         <componentProperty name="propertyPrefix" type="string" javaType="java.lang.String" kind="property" deprecated="false" description="Optional prefix prepended to property names before resolution."/>
         <componentProperty name="fallbackToUnaugmentedProperty" type="boolean" javaType="boolean" kind="property" deprecated="false" defaultValue="false" description="If true first attempt resolution of property name augmented with propertyPrefix and propertySuffix before falling back the plain property name specified. If false only the augmented property name is searched."/>
      </componentProperties>
      <uriParameters>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the default exchange pattern when creating an exchange."/>
         <uriParameter name="ignoreMissingLocation" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" group="common" description="Whether to silently ignore if a location cannot be located such as a properties file not found."/>
         <uriParameter name="locations" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="key" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="Property key to use as placeholder"/>
      </uriParameters>
   </component>
   <component>
      <id>spring-redis</id>
      <tags>
         <tag>spring</tag>
         <tag>nosql</tag>
      </tags>
      <title>Spring Redis</title>
      <description>The spring-redis component allows sending and receiving messages from Redis.</description>
      <syntax>spring-redis:host:port</syntax>
      <class>org.apache.camel.component.redis.RedisComponent</class>
      <kind>component</kind>
      <scheme>spring-redis</scheme>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-redis-starter</artifactId>
            <version>2.18.1.redhat-000015</version>
         </dependency>
      </dependencies>
      <componentProperties>
      </componentProperties>
      <uriParameters>
         <uriParameter name="redisTemplate" type="object" javaType="org.springframework.data.redis.core.RedisTemplate" kind="parameter" deprecated="false" group="common" description="Reference to a pre-configured RedisTemplate instance to use."/>
         <uriParameter name="bridgeErrorHandler" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="consumer" group="consumer" description="Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="channels" type="string" javaType="java.lang.String" kind="parameter" deprecated="false" group="common" description="List of topic names or name patterns to subscribe to. Multiple names can be separated by comma."/>
         <uriParameter name="port" type="integer" javaType="java.lang.Integer" kind="path" deprecated="false" required="true" group="common" description="Redis server port number"/>
         <uriParameter name="connectionFactory" type="object" javaType="org.springframework.data.redis.connection.RedisConnectionFactory" kind="parameter" deprecated="false" group="common" description="Reference to a pre-configured RedisConnectionFactory instance to use."/>
         <uriParameter name="synchronous" type="boolean" javaType="boolean" kind="parameter" deprecated="false" defaultValue="false" label="advanced" group="advanced" description="Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."/>
         <uriParameter name="host" type="string" javaType="java.lang.String" kind="path" deprecated="false" required="true" group="common" description="The host where Redis server is running."/>
         <uriParameter name="exchangePattern" type="string" javaType="org.apache.camel.ExchangePattern" kind="parameter" choice="InOnly,RobustInOnly,InOut,InOptionalOut,OutOnly,RobustOutOnly,OutIn,OutOptionalIn" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="Sets the exchange pattern when the consumer creates an exchange."/>
         <uriParameter name="serializer" type="object" javaType="org.springframework.data.redis.serializer.RedisSerializer" kind="parameter" deprecated="false" group="common" description="Reference to a pre-configured RedisSerializer instance to use."/>
         <uriParameter name="listenerContainer" type="object" javaType="org.springframework.data.redis.listener.RedisMessageListenerContainer" kind="parameter" deprecated="false" group="common" description="Reference to a pre-configured RedisMessageListenerContainer instance to use."/>
         <uriParameter name="exceptionHandler" type="object" javaType="org.apache.camel.spi.ExceptionHandler" kind="parameter" deprecated="false" label="consumer,advanced" group="consumer (advanced)" description="To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored."/>
         <uriParameter name="command" type="string" javaType="org.apache.camel.component.redis.Command" kind="parameter" choice="PING,SET,GET,QUIT,EXISTS,DEL,TYPE,FLUSHDB,KEYS,RANDOMKEY,RENAME,RENAMENX,RENAMEX,DBSIZE,EXPIRE,EXPIREAT,TTL,SELECT,MOVE,FLUSHALL,GETSET,MGET,SETNX,SETEX,MSET,MSETNX,DECRBY,DECR,INCRBY,INCR,APPEND,SUBSTR,HSET,HGET,HSETNX,HMSET,HMGET,HINCRBY,HEXISTS,HDEL,HLEN,HKEYS,HVALS,HGETALL,RPUSH,LPUSH,LLEN,LRANGE,LTRIM,LINDEX,LSET,LREM,LPOP,RPOP,RPOPLPUSH,SADD,SMEMBERS,SREM,SPOP,SMOVE,SCARD,SISMEMBER,SINTER,SINTERSTORE,SUNION,SUNIONSTORE,SDIFF,SDIFFSTORE,SRANDMEMBER,ZADD,ZRANGE,ZREM,ZINCRBY,ZRANK,ZREVRANK,ZREVRANGE,ZCARD,ZSCORE,MULTI,DISCARD,EXEC,WATCH,UNWATCH,SORT,BLPOP,BRPOP,AUTH,SUBSCRIBE,PUBLISH,UNSUBSCRIBE,PSUBSCRIBE,PUNSUBSCRIBE,ZCOUNT,ZRANGEBYSCORE,ZREVRANGEBYSCORE,ZREMRANGEBYRANK,ZREMRANGEBYSCORE,ZUNIONSTORE,ZINTERSTORE,SAVE,BGSAVE,BGREWRITEAOF,LASTSAVE,SHUTDOWN,INFO,MONITOR,SLAVEOF,CONFIG,STRLEN,SYNC,LPUSHX,PERSIST,RPUSHX,ECHO,LINSERT,DEBUG,BRPOPLPUSH,SETBIT,GETBIT,SETRANGE,GETRANGE,PEXPIRE,PEXPIREAT" deprecated="false" defaultValue="SET" group="common" description="Default command which can be overridden by message header. Notice the consumer only supports the following commands: PSUBSCRIBE and SUBSCRIBE"/>
      </uriParameters>
   </component>
</components>
