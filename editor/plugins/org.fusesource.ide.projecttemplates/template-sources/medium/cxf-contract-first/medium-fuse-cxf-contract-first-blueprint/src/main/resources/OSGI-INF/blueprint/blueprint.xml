<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2014-2017, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. 

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="              http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd              http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd              http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <cxf:cxfEndpoint address="http://localhost:12345/cxf/order" id="orderEndpoint" serviceClass="ws.camel.mycompany.com.OrderEndpoint"/>
    <camelContext id="camelContext-23ffa64c-2727-4e28-b561-2d39d32c5e53"
        xmlns="http://camel.apache.org/schema/blueprint" xmlns:order="http://com.mycompany.camel.ws">
        <route id="_route1">
            <!-- route starts from the cxf webservice -->
            <!-- and then create the OK reply for the webservice which is still waiting for a reply -->
            <from id="_from1" uri="cxf:bean:orderEndpoint"/>
            <setBody id="_setBody1">
                <simple>${in.body[0]}</simple>
            </setBody>
            <convertBodyTo type="org.w3c.dom.Document"/>
            <log id="_log1" message="Got this WSDL payload: ${body}"/>
            <choice id="_choice1">
                <when id="_when1">
                    <xpath>/order:order/order:customer/country = 'UK'</xpath>
                    <log id="_log2" message="Sending order to the UK"/>
                    <to id="_to1" uri="seda:ukOrders"/>
                </when>
                <when id="_when2">
                    <xpath>/order:order/order:customer/country = 'US'</xpath>
                    <log id="_log3" message="Sending order to the US"/>
                    <to id="_to2" uri="seda:usOrders"/>
                </when>
                <otherwise id="_otherwise1">
                    <log id="_log4" message="Sending order to another country"/>
                    <to id="_to3" uri="seda:otherOrders"/>
                </otherwise>
            </choice>
            <transform id="_transform1">
                <constant>OK</constant>
            </transform>
        </route>
        <!-- test route -->
        <route id="_route2">
            <from id="_from2" uri="seda:ukOrders"/>
            <to id="_to5" uri="mock:end"/>
        </route>
        <!-- test route -->
        <route id="_route3">
            <from id="_from3" uri="seda:usOrders"/>
            <to id="_to6" uri="mock:end"/>
        </route>
        <!-- test route -->
        <route id="_route4">
            <from id="_from4" uri="seda:otherOrders"/>
            <to id="_to4" uri="mock:end"/>
        </route>
    </camelContext>
</blueprint>
